##/*
##
##   (c) Copyright, Real-Time Innovations, Inc. 2001.  All rights reserved.
##   No duplications, whole or partial, manual or electronic, may be made
##   without prior written permission.  Any such copies, or
##   revisions thereof, must display this notice unaltered.
##   This code contains trade secrets of Real-Time Innovations, Inc.
##========================================================================*/*#
/*
 * (c) Copyright, Real-Time Innovations, 2012.  All rights reserved.
 * RTI grants Licensee a license to use, modify, compile, and create derivative
 * works of the software solely for use with RTI Connext DDS. Licensee may
 * redistribute copies of the software provided that all such copies are subject
 * to this license. The software is provided "as is", with no warranty of any
 * type, including any warranty for fitness for any purpose. RTI is under no
 * obligation to maintain or support the software. RTI shall not be liable for
 * any incidental or consequential damages arising out of the use or inability
 * to use the software.
 */

/* ${envMap.idlFileName}_publisher.cxx

   A publication of data of type ${constructMap.nativeFQName}

   This file is derived from code automatically generated by the rtiddsgen 
   command:

   rtiddsgen -language C++03 -example <arch> ${envMap.idlFileName}.idl

   Example publication of type ${constructMap.nativeFQName} automatically generated by 
   'rtiddsgen'. To test it, follow these steps:

   (1) Compile this file and the example subscription.

   (2) Start the subscription on the same domain used for RTI Connext

   (3) Start the publication on the same domain used for RTI Connext

   (4) [Optional] Specify the list of discovery initial peers and 
       multicast receive addresses via an environment variable or a file 
       (in the current working directory) called NDDS_DISCOVERY_PEERS. 
       
   You can run any number of publisher and subscriber programs, and can 
   add and remove them dynamically from the domain.
*/

${envMap.POUND_CHAR}include <iostream>

${envMap.POUND_CHAR}include <dds/pub/ddspub.hpp>
${envMap.POUND_CHAR}include <rti/util/util.hpp> // for sleep()

${envMap.POUND_CHAR}include "${envMap.idlFileName}.hpp"

#if( ${envMap.universal} )
${envMap.POUND_CHAR}if defined(RTI_ANDROID)
#end
#if( ${envMap.android} || ${envMap.universal})
${envMap.POUND_CHAR}include <android/log.h>

typedef int (*RTIAndroidOnCoutMethod)(const char *text);
static RTIAndroidOnCoutMethod publisher_onCout = NULL;
extern "C" void RTIAndroid_registerOnCout(RTIAndroidOnCoutMethod onCout) {
    publisher_onCout = onCout;
}

${envMap.POUND_CHAR}define RTI_ANDROID_BUFFER_SIZE 512

class RTIAndroidBuffer : public std::streambuf {
  public:
    RTIAndroidBuffer() { 
	this->setp(buffer, buffer + RTI_ANDROID_BUFFER_SIZE - 1); 
    }

  private:
    int overflow(int c) {
	if (c == traits_type::eof()) {
	    *this->pptr() = traits_type::to_char_type(c);
	    this->sbumpc();
	}
	return this->sync()? traits_type::eof(): traits_type::not_eof(c);
    }

    int sync() {
	int rc = 0;
	if (this->pbase() != this->pptr()) {
	    char writebuf[RTI_ANDROID_BUFFER_SIZE + 1];
	    memcpy(writebuf, this->pbase(), this->pptr() - this->pbase());
	    writebuf[this->pptr() - this->pbase()] = '\0';

	    /* forward message */
	    if (publisher_onCout != NULL) {
		rc = publisher_onCout(writebuf);
	    }

        /* log also to logcat */
        __android_log_write(ANDROID_LOG_INFO, "RTIConnextLog", writebuf);

	    this->setp(buffer, buffer + RTI_ANDROID_BUFFER_SIZE - 1);
	}
	return rc;
    }

    char buffer[RTI_ANDROID_BUFFER_SIZE];
};
#end
#if( ${envMap.universal} )
${envMap.POUND_CHAR}endif /* RTI_ANDROID */
#end

#*——*##if($constructMap.languageBinding.equals("FLAT_DATA") 
        && $constructMap.extensibility.equals("MUTABLE_EXTENSIBILITY"))
void build_data_sample(${constructMap.nativeFQName}Builder& builder)
{
        // Build the ${constructMap.nativeFQName} data sample using the builder
        //
        // For example:
        //
#*--*##foreach($member in $constructMap.memberFieldMapList)
#*------*##if(!$member.isPrimitive)
#*--------*##if($member.extensibility == "MUTABLE_EXTENSIBILITY" || $member.seqSize || $member.strSize)
        // auto ${member.name}_builder = builder.build_${member.name}();
        // ... build ${member.name}
        // ${member.name}_builder.finish();
        //
#*--------*##else ## non-mutable
        // auto ${member.name}_offset = builder.add_${member.name}();
        // ... fill ${member.name}_offset
        //
#*--------*##end
#*------*##else ## primitive
        // builder.add_${member.name}(...);
        //
#*------*##end ## primitive
#*--*##end
}
#*--*##end

void publisher_main(int domain_id, int sample_count)
{
    // Create a DomainParticipant with default Qos
    dds::domain::DomainParticipant participant (domain_id);

    // Create a Topic -- and automatically register the type
    dds::topic::Topic<${constructMap.nativeFQName}> topic (participant, "Example ${constructMap.nativeCFQName}");

    // Create a DataWriter with default Qos (Publisher created in-line)
    dds::pub::DataWriter<${constructMap.nativeFQName}> writer(dds::pub::Publisher(participant), topic);

## Regular case
#*——*##if(!${constructMap.isMetpType} && !$constructMap.languageBinding.equals("FLAT_DATA"))
    ${constructMap.nativeFQName} sample;
    for (int count = 0; count < sample_count || sample_count == 0; count++) {
        // Modify the data to be written here
        ${envMap.modifyPubData}
        std::cout << "Writing ${constructMap.nativeFQName}, count " << count << std::endl;

        writer.write(sample);

        rti::util::sleep(dds::core::Duration(4));
    }
## Plain Zero-Copy or non-mutable Flat-Data (with or without Zero Copy)
#*——*##elseif(!$constructMap.languageBinding.equals("FLAT_DATA") 
        || !$constructMap.extensibility.equals("MUTABLE_EXTENSIBILITY"))
    for (int count = 0; count < sample_count || sample_count == 0; count++) {
    	${constructMap.nativeFQName} *sample = writer->get_loan();

        // Modify the data to be written here
        ${envMap.modifyPubData}
        std::cout << "Writing ${constructMap.nativeFQName}, count " << count << std::endl;

        writer.write(*sample);

        rti::util::sleep(dds::core::Duration(4));
    }
## Mutable Flat-Data (with or without Zero Copy)
#*——*##else
    for (int count = 0; count < sample_count || sample_count == 0; count++) {
    	${constructMap.nativeFQName}Builder builder = rti::flat::build_data(writer);

        // Build the ${constructMap.nativeFQName} data sample using the builder
        build_data_sample(builder);

        // Create the sample
        ${constructMap.nativeFQName} *sample = builder.finish_sample();

        std::cout << "Writing ${constructMap.nativeFQName}, count " << count << std::endl;

        writer.write(*sample);

        rti::util::sleep(dds::core::Duration(4));
    }    
#*——*##end
}

#if( ${envMap.universal} )
${envMap.POUND_CHAR}if (!defined(RTI_VXWORKS) || defined(__RTP__))
#end
#if( !${envMap.vxWorks} || ${envMap.rtp}  || ${envMap.universal} )
int main(int argc, char *argv[])
{
#if( ${envMap.universal} )
${envMap.POUND_CHAR}if defined(RTI_ANDROID)
#end
#if( ${envMap.android} || ${envMap.universal})
    std::cout.rdbuf(new RTIAndroidBuffer);
    std::cerr.rdbuf(new RTIAndroidBuffer);
#end
#if( ${envMap.universal} )
${envMap.POUND_CHAR}endif /* RTI_ANDROID */
#end

    int domain_id = 0;
    int sample_count = 0; // infinite loop

    if (argc >= 2) {
        domain_id = atoi(argv[1]);
    }
    if (argc >= 3) {
        sample_count = atoi(argv[2]);
    }

    // To turn on additional logging, include <rti/config/Logger.hpp> and
    // uncomment the following line:
    // rti::config::Logger::instance().verbosity(rti::config::Verbosity::STATUS_ALL);

    try {
        publisher_main(domain_id, sample_count);
    } catch (const std::exception& ex) {
        // This will catch DDS exceptions
        std::cerr << "Exception in publisher_main(): " << ex.what() << std::endl;
        return -1;
    }

    // RTI Connext provides a finalize_participant_factory() method
    // if you want to release memory used by the participant factory singleton.
    // Uncomment the following line to release the singleton:
    //
    // dds::domain::DomainParticipant::finalize_participant_factory();
  
#if( ${envMap.universal} )
${envMap.POUND_CHAR}if defined(RTI_ANDROID)
#end
#if( ${envMap.android} || ${envMap.universal})
    std::cout.rdbuf(0);
    std::cerr.rdbuf(0);
#end
#if( ${envMap.universal} )
${envMap.POUND_CHAR}endif /* RTI_ANDROID */
#end
    
    return 0;
}
#end
#if(${envMap.universal})
${envMap.POUND_CHAR}endif
#end
