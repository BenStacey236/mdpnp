##
##
## (c) Copyright, Real-Time Innovations, Inc. 2001.  All rights reserved.
## No duplications, whole or partial, manual or electronic, may be made
## without prior written permission.  Any such copies, or
## revisions thereof, must display this notice unaltered.
## This code contains trade secrets of Real-Time Innovations, Inc.
##
## modification history:
## ---------------------
## 5.2.0,07oct15,drs [PLATFORMS-662] change to armv7aLinux3.12gcc4.9.3cortex-a9
## 5.2.0,10sep15,drs [PLATFORMS-662] add armv7aLinux3.12gcc4.8.3cortex-a9
## 2.3,11aug15,eys PLATFORMS-664 Added Android 5 port using ndkr10e
## 2.2,11may15,acr Compile C++03 with -pthreads on Solaris to enable
##                 a thread-safe implementation of shared_ptr.
## 2.2,09apr15 ajm Hiding archs removed from Eddy PAM
## 2.2,08apr15 ajm CODEGENII-437 Fixing VxWorks makefiles to support munching for the PSM
## 2.2,25feb15,ajm CODEGENII-322 Removing VS2010 from C++11supported arch
##                 because it does not support "auto"
## 2.2,9dec14,ajm reordering arch by OS
## 2.2,9jun14,vmg created
##========================================================================
#set($architectures={})

#macro (arch $name $compiler $params)
	$!{architectures.put("$name$compiler", [$name, $compiler, $params])}
#end

#******************** ANDROID ********************#

#arch("arm64Android12","clang12.0.8ndkr23b", {
    $OS : $OS.ANDROID,
    $PLATFORM : $PLATFORM.arm64,
    $C_COMPILER : "aarch64-linux-android31-clang",
    $C_COMPILER_FLAGS : ["Wall", "I$(ANDROID_NDK_ROOT)/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include"],
    $C_LINKER : "aarch64-linux-android31-clang",
    $C_LINKER_FLAGS : [],
    $CXX_COMPILER : "aarch64-linux-android31-clang++",
    $CXX_COMPILER_FLAGS : ["Wall", "Wno-return-type-c-linkage", "Wno-deprecated-register", "I$(ANDROID_NDK_ROOT)/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/c++/v1"],
    $CXX_LINKER : "aarch64-linux-android31-clang++",
    $CXX_LINKER_FLAGS : [],
    $C_SYSLIBS :  ["llog", "lc", "lm"],
    $CXX_SYSLIBS : ["llog", "lc", "lm", "L$(ANDROID_NDK_ROOT)/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/aarch64-linux-android", "lc++_shared"],
    $DEFINES : ["fpic", "DLINUX", "DRTI_LINUX", "DRTI_ANDROID=12", "DRTI_64BIT", "DRTI_LINUX26", "DRTI_UNIX"],
    $INCLUDES : [],
    $SUPPORTS_JAVA : true,
    $CPP11_COMPILER_FLAGS : ["std=c++11"],
    $SUPPORTS_CPP11: true,
    "ANDROID_SYSLIB_PATH" : "-L$(ANDROID_NDK_ROOT)/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/aarch64-linux-android/31",
    "ANDROID_SDK_VERSION" : "31",
    "ANDROID_ABI" : "arm64-v8a"
})

#arch("arm64Android9.0","clang8.0ndkr19b", {
    $OS : $OS.ANDROID,
    $PLATFORM : $PLATFORM.arm64,
    $C_COMPILER : "aarch64-linux-android28-clang",
    $C_COMPILER_FLAGS : ["Wall", "I$(ANDROID_NDK_PATH)/platforms/android-28/arch-arm64/usr/include"],
    $C_LINKER : "aarch64-linux-android28-clang",
    $C_LINKER_FLAGS : [],
    $CXX_COMPILER : "aarch64-linux-android28-clang++",
    $CXX_COMPILER_FLAGS : ["Wall", "Wno-return-type-c-linkage", "Wno-deprecated-register"],
    $CXX_LINKER : "aarch64-linux-android28-clang++",
    $CXX_LINKER_FLAGS : [],
    $C_SYSLIBS : ["-sysroot=$(ANDROID_NDK_PATH)/platforms/android-28/arch-arm64", "llog", "lc", "lm", "rdynamic"],
    $CXX_SYSLIBS : ["-sysroot=$(ANDROID_NDK_PATH)/platforms/android-28/arch-arm64", "L$(ANDROID_NDK_PATH)/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/aarch64-linux-android/28", "llog", "lc", "lm", "L$(ANDROID_NDK_PATH)/sources/cxx-stl/llvm-libc++/libs/arm64-v8a", "lc++_shared", "lc++abi", "rdynamic"],
    $DEFINES : ["fpic", "DLINUX", "DRTI_LINUX", "DRTI_ANDROID", "DRTI_ANDROID9", "DRTI_64BIT", "DRTI_LINUX26", "DRTI_UNIX"],
    $INCLUDES : [],
    $SUPPORTS_JAVA : true,
    $CPP11_COMPILER_FLAGS : ["std=c++0x"],
    $SUPPORTS_CPP11: true,
    "TARGET_ID" : "android-28",
    "ANDROID_ABI" : "arm64-v8a",
    $HIDDEN: true
})

#arch("armv7Android9.0","clang8.0ndkr19b", {
    $OS : $OS.ANDROID,
    $PLATFORM : $PLATFORM.armv7,
    $C_COMPILER : "armv7a-linux-androideabi28-clang",
    $C_COMPILER_FLAGS : ["Wall"],
    $C_LINKER : "armv7a-linux-androideabi28-clang",
    $C_LINKER_FLAGS : [],
    $CXX_COMPILER : "armv7a-linux-androideabi28-clang++",
    $CXX_COMPILER_FLAGS : ["Wall", "Wno-return-type-c-linkage", "Wno-deprecated-register"],
    $CXX_LINKER : "armv7a-linux-androideabi28-clang++",
    $CXX_LINKER_FLAGS : [],
    $C_SYSLIBS : ["-sysroot=$(ANDROID_NDK_PATH)/platforms/android-28/arch-arm", "llog", "lc", "lm", "L$(ANDROID_NDK_PATH)/sources/cxx-stl/llvm-libc++/libs/armeabi-v7a", "rdynamic"],
    $CXX_SYSLIBS : ["-sysroot=$(ANDROID_NDK_PATH)/platforms/android-28/arch-arm", "L$(ANDROID_NDK_PATH)/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/arm-linux-androideabi/28", "llog", "lc", "lm", "L$(ANDROID_NDK_PATH)/sources/cxx-stl/llvm-libc++/libs/armeabi-v7a", "lc++_shared", "lc++abi", "rdynamic"],
    $DEFINES : ["fpic", "DLINUX", "DRTI_LINUX", "DRTI_ANDROID", "DRTI_ANDROID9", "DRTI_LINUX26", "DRTI_UNIX"],
    $INCLUDES : [],
    $SUPPORTS_JAVA : true,
    $CPP11_COMPILER_FLAGS : ["std=c++0x"],
    $SUPPORTS_CPP11: true,
    "TARGET_ID" : "android-28",
    "ANDROID_ABI" : "armeabi-v7a",
    $HIDDEN: true
})

#******************** LINUX ********************#
#* All the unix use the template in ./Mekfile/makefileC.vm if you want to specify
a different one set the $MAKEFILE_TEMPLATE variable*#
#arch("armv6vfphLinux3.x","gcc4.7.2", {
	$OS : $OS.UNIX,
	$C_COMPILER : "arm-linux-gnueabihf-gcc",
	$C_COMPILER_FLAGS : ["march=armv6", "mfpu=vfp", "mfloat-abi=hard", "mlong-calls", "funwind-tables"],
	$C_LINKER : "arm-linux-gnueabihf-gcc",
	$C_LINKER_FLAGS : [],
	$CXX_COMPILER : "arm-linux-gnueabihf-g++",
	$CXX_COMPILER_FLAGS : ["march=armv6", "mfpu=vfp", "mfloat-abi=hard", "mlong-calls", "funwind-tables"],
	$CXX_LINKER : "arm-linux-gnueabihf-g++",
	$CXX_LINKER_FLAGS : [],
	$SYSLIBS : ["ldl", "lm", "lpthread", "lrt", "rdynamic"],
	$DEFINES : ["fPIC", "DRTI_UNIX", "DRTI_LINUX", "march=armv6", "mfpu=vfp", "mfloat-abi=hard", "mlong-calls", "funwind-tables"],
	$INCLUDES : [],
	$SUPPORTS_JAVA : false,
    $CPP11_COMPILER_FLAGS : [],
    $SUPPORTS_CPP11: false,
    $HIDDEN: true
})

#arch("armv7Linux3.0","gcc4.6.1.cortex-a9", {
        $OS : $OS.UNIX,
        $C_COMPILER : "arm-xilinx-linux-gnueabi-gcc",
        $C_COMPILER_FLAGS : [],
        $C_LINKER : "arm-xilinx-linux-gnueabi-gcc",
        $C_LINKER_FLAGS : [],
        $CXX_COMPILER : "arm-xilinx-linux-gnueabi-g++",
        $CXX_COMPILER_FLAGS : [],
        $CXX_LINKER : "arm-xilinx-linux-gnueabi-g++",
        $CXX_LINKER_FLAGS : [],
        $SYSLIBS : ["ldl", "lm", "lpthread", "lrt", "rdynamic"],
        $DEFINES : ["fPIC", "DRTI_UNIX", "DRTI_LINUX", "march=armv7-a", "mcpu=cortex-a9", "mlong-calls"],
        $INCLUDES : [],
        $SUPPORTS_JAVA :false,
    $CPP11_COMPILER_FLAGS : [],
    $SUPPORTS_CPP11: false,
    $HIDDEN: true
})

#arch("armv7aLinux3.12","gcc4.9.3cortex-a9", {
    $OS : $OS.UNIX,
    $C_COMPILER : "arm-linux-gnueabihf-gcc",
    $C_COMPILER_FLAGS : [],
    $C_LINKER : "arm-linux-gnueabihf-gcc",
    $C_LINKER_FLAGS : [],
    $CXX_COMPILER : "arm-linux-gnueabihf-g++",
    $CXX_COMPILER_FLAGS : [],
    $CXX_LINKER : "arm-linux-gnueabihf-g++",
    $CXX_LINKER_FLAGS : ["static-libgcc"],
    $SYSLIBS : ["ldl", "lm", "lpthread", "lrt", "rdynamic"],
    $DEFINES : ["fPIC", "DRTI_UNIX", "DRTI_LINUX", "march=armv7-a", "mcpu=cortex-a9", "mlong-calls", "funwind-tables"],
    $INCLUDES : [],
    $SUPPORTS_JAVA : true,
    $CPP11_COMPILER_FLAGS : ["std=c++0x"],
    $SUPPORTS_CPP11: true,
    $HIDDEN: true
})

#arch("armv8Linux4.9","gcc6.2.0", {
    $OS : $OS.UNIX,
    $C_COMPILER : "aarch64-poky-linux-gcc",
    $C_COMPILER_FLAGS : ["-sysroot=$(SYSROOT)"],
    $C_LINKER : "aarch64-poky-linux-gcc",
    $C_LINKER_FLAGS : ["-sysroot=$(SYSROOT)"],
    $CXX_COMPILER : "aarch64-poky-linux-g++",
    $CXX_COMPILER_FLAGS : ["-sysroot=$(SYSROOT)"],
    $CXX_LINKER : "aarch64-poky-linux-g++",
    $CXX_LINKER_FLAGS : ["static-libgcc", "-sysroot=$(SYSROOT)"],
    $SYSLIBS : ["lm", "lpthread", "lrt", "ldl", "no-pie", "rdynamic"],
    $DEFINES : ["DRTI_UNIX", "DRTI_LINUX", "funwind-tables"],
    $INCLUDES : [],
    $SUPPORTS_JAVA : false,
    $CPP11_COMPILER_FLAGS : ["std=c++11"],
    $SUPPORTS_CPP11: true,
    $HIDDEN: true
})

#arch("armv7Linux","gcc7.3.0", {
    $OS : $OS.UNIX,
    $C_COMPILER : "arm-poky-linux-gcc",
    $C_COMPILER_FLAGS : ["-sysroot=$(SYSROOT) -march=armv7 -mthumb -mfloat-abi=hard -mabi=aapcs-linux"],
    $C_LINKER : "arm-poky-linux-gcc",
    $C_LINKER_FLAGS : ["-sysroot=$(SYSROOT)"],
    $CXX_COMPILER : "arm-poky-linux-g++",
    $CXX_COMPILER_FLAGS : ["-sysroot=$(SYSROOT) -march=armv7 -mthumb -mfloat-abi=hard -mabi=aapcs-linux"],
    $CXX_LINKER : "arm-poky-linux-g++",
    $CXX_LINKER_FLAGS : ["static-libgcc", "-sysroot=$(SYSROOT)"],
    $SYSLIBS : ["lm", "lpthread", "lrt", "ldl", "no-pie", "rdynamic"],
    $DEFINES : ["DRTI_UNIX", "DRTI_LINUX", "funwind-tables"],
    $INCLUDES : [],
    "CSR_VAR" : "#SYSROOT = # Set the location of the Yocto toolchain sysroot",
    $SUPPORTS_JAVA : true,
    $CPP11_COMPILER_FLAGS : ["std=c++11"],
    $SUPPORTS_CPP11: true,
    $HIDDEN: true
})

#arch("armv7Linux4","gcc7.5.0" {
    $OS : $OS.UNIX,
    $C_COMPILER : "arm-linux-gnueabihf-gcc",
    $C_COMPILER_FLAGS : ["march=armv7", "mthumb", "mfloat-abi=hard", "mabi=aapcs-linux", "pthread"],
    $C_LINKER : "arm-linux-gnueabihf-gcc",
    $C_LINKER_FLAGS : ["pthread"],
    $CXX_COMPILER : "arm-linux-gnueabihf-g++",
    $CXX_COMPILER_FLAGS : ["march=armv7", "mthumb", "mfloat-abi=hard", "mabi=aapcs-linux", "pthread"],
    $CXX_LINKER : "arm-linux-gnueabihf-g++",
    $CXX_LINKER_FLAGS : ["static-libgcc", "pthread"],
    $SYSLIBS : ["ldl", "lm", "lrt", "latomic"],
    $DEFINES : ["fPIC", "DRTI_UNIX", "DRTI_LINUX"],
    $INCLUDES : [],
    $SUPPORTS_JAVA : true,
    $CPP11_COMPILER_FLAGS : ["std=c++11"],
    $SUPPORTS_CPP11: true
})

#arch("armv8Linux4.4","gcc5.4.0", {
        $OS : $OS.UNIX,
        $C_COMPILER : "gcc",
        $C_COMPILER_FLAGS : [],
        $C_LINKER : "gcc",
        $C_LINKER_FLAGS : [],
        $CXX_COMPILER : "g++",
        $CXX_COMPILER_FLAGS : [],
        $CXX_LINKER : "g++",
        $CXX_LINKER_FLAGS : ["static-libgcc"],
        $SYSLIBS : ["ldl", "lm", "lpthread", "lrt", "rdynamic"],
        $DEFINES : ["fPIC", "DRTI_UNIX", "DRTI_LINUX", "DRTI_64BIT", "funwind-tables"],
        $INCLUDES : [],
        $SUPPORTS_JAVA : true,
        $CPP11_COMPILER_FLAGS : ["std=c++0x"],
        $SUPPORTS_CPP11: true,
        $HIDDEN: true
})

#arch("armv8Linux4","gcc7.3.0", {
        $OS : $OS.UNIX,
        $C_COMPILER : "aarch64-linux-gnu-gcc",
        $C_COMPILER_FLAGS : [],
        $C_LINKER : "aarch64-linux-gnu-gcc",
        $C_LINKER_FLAGS : [],
        $CXX_COMPILER : "aarch64-linux-gnu-g++",
        $CXX_COMPILER_FLAGS : [],
        $CXX_LINKER : "aarch64-linux-gnu-g++",
        $CXX_LINKER_FLAGS : ["static-libgcc"],
        $SYSLIBS : ["ldl", "lm", "lpthread", "lrt", "no-pie", "rdynamic"],
        $DEFINES : ["fPIC", "DRTI_UNIX", "DRTI_LINUX", "DRTI_64BIT", "funwind-tables"],
        $INCLUDES : [],
        $SUPPORTS_JAVA : true,
        $CPP11_COMPILER_FLAGS : ["std=c++0x"],
        $SUPPORTS_CPP11: true
})

#arch("armv8Linux","-armgcc9.2.1", {
        $OS : $OS.UNIX,
        $C_COMPILER : "aarch64-none-linux-gnu-gcc",
        $C_COMPILER_FLAGS : ["-sysroot=$(SYSROOT)", "feliminate-unused-debug-types"],
        $C_LINKER : "aarch64-none-linux-gnu-gcc",
        $C_LINKER_FLAGS : ["-sysroot=$(SYSROOT)"],
        $CXX_COMPILER : "aarch64-none-linux-gnu-g++",
        $CXX_COMPILER_FLAGS : ["-sysroot=$(SYSROOT)", "feliminate-unused-debug-types"],
        $CXX_LINKER : "aarch64-none-linux-gnu-g++",
        $CXX_LINKER_FLAGS : ["-sysroot=$(SYSROOT)", "static-libgcc"],
        $SYSLIBS : ["ldl", "lm", "lpthread", "lrt", "no-pie", "rdynamic"],
        $DEFINES : ["fPIC", "DRTI_UNIX", "DRTI_LINUX", "DRTI_64BIT"],
        $INCLUDES : [],
        "CSR_VAR" : "#SYSROOT = # Set the location of thetoolchain sysroot",
        $SUPPORTS_JAVA : true,
        $CPP11_COMPILER_FLAGS : ["std=c++11"],
        $SUPPORTS_CPP11: true
})

#arch("i86Linux2.6","gcc4.4.5", {
	$OS : $OS.UNIX,
	$PLATFORM : $PLATFORM.i86,
	$C_COMPILER : "gcc",
	$C_COMPILER_FLAGS : ["m32"],
	$C_LINKER : "gcc",
	$C_LINKER_FLAGS : ["m32"],
	$CXX_COMPILER : "g++",
	$CXX_COMPILER_FLAGS : ["m32"],
	$CXX_LINKER : "g++",
	$CXX_LINKER_FLAGS : ["m32", "static-libgcc"],
	$SYSLIBS : ["ldl", "lm", "lpthread", "lrt", "rdynamic"],
	$DEFINES : ["DRTI_UNIX", "DRTI_LINUX"],
	$INCLUDES : [],
	$SUPPORTS_JAVA : false,
    $HIDDEN: true
})

#arch("i86Linux3","gcc4.8.2", {
	$OS : $OS.UNIX,
	$PLATFORM : $PLATFORM.i86,
	$C_COMPILER : "gcc",
	$C_COMPILER_FLAGS : ["m32", "Wall"],
	$C_LINKER : "gcc",
	$C_LINKER_FLAGS : ["m32"],
	$CXX_COMPILER : "g++",
	$CXX_COMPILER_FLAGS : ["m32", "Wall"],
	$CXX_LINKER : "g++",
	$CXX_LINKER_FLAGS : ["m32", "static-libgcc"],
	$SYSLIBS : ["ldl", "lm", "lpthread", "lrt", "rdynamic"],
	$DEFINES : ["DRTI_UNIX", "DRTI_LINUX"],
	$INCLUDES : [],
	$SUPPORTS_JAVA : false,
    $CPP11_COMPILER_FLAGS : ["std=c++0x"],
    $SUPPORTS_CPP11: true
})

#arch("i86RedHawk6.5","gcc4.9.2", {
    $OS : $OS.UNIX,
    $PLATFORM : $PLATFORM.i86,
    $C_COMPILER : "gcc",
    $C_COMPILER_FLAGS : ["m32", "Wall"],
    $C_LINKER : "gcc",
    $C_LINKER_FLAGS : ["m32"],
    $CXX_COMPILER : "g++",
    $CXX_COMPILER_FLAGS : ["m32", "Wall"],
    $CXX_LINKER : "g++",
    $CXX_LINKER_FLAGS : ["m32", "static-libgcc"],
    $SYSLIBS : ["lm", "lpthread", "lrt", "ldl", "rdynamic"],
    $DEFINES : ["DRTI_UNIX", "DRTI_LINUX"],
    $INCLUDES : [],
    $INCLUDES : [],
    $SUPPORTS_JAVA : false,
    $CPP11_COMPILER_FLAGS : ["std=c++11"], 
    $SUPPORTS_CPP11: true,
    $OPENSSL_LIBRARIES: ["/usr/lib/libssl.so", "/usr/lib/libcrypto.so"],
    $HIDDEN: true
})

#arch("i86RedHawk8.4","gcc8.5.0", {
    $OS : $OS.UNIX,
    $PLATFORM : $PLATFORM.i86,
    $C_COMPILER : "gcc",
    $C_COMPILER_FLAGS : ["m32", "Wall"],
    $C_LINKER : "gcc",
    $C_LINKER_FLAGS : ["m32"],
    $CXX_COMPILER : "g++",
    $CXX_COMPILER_FLAGS : ["m32", "Wall"],
    $CXX_LINKER : "g++",
    $CXX_LINKER_FLAGS : ["m32"],
    $SYSLIBS : ["lm", "lpthread", "lrt", "ldl", "no-pie", "rdynamic"],
    $DEFINES : ["DRTI_UNIX"],
    $INCLUDES : [],
    $SUPPORTS_JAVA : false,
    $CPP11_COMPILER_FLAGS : ["std=c++11"], 
    $SUPPORTS_CPP11: true,
    $OPENSSL_LIBRARIES: ["/usr/lib/libssl.so", "/usr/lib/libcrypto.so"]
})

#arch("x64RedHawk6.5","gcc4.9.2", {
    $OS : $OS.UNIX,
    $PLATFORM : $PLATFORM.x64,
    $C_COMPILER : "gcc",
    $C_COMPILER_FLAGS : ["m64", "Wall"],
    $C_LINKER : "gcc",
    $C_LINKER_FLAGS : ["m64"],
    $CXX_COMPILER : "g++",
    $CXX_COMPILER_FLAGS : ["m64", "Wall"],
    $CXX_LINKER : "g++",
    $CXX_LINKER_FLAGS : ["m64", "static-libgcc"],
    $SYSLIBS : ["lm", "lpthread", "lrt", "ldl", "rdynamic"],
    $DEFINES : ["DRTI_UNIX", "DRTI_LINUX", "DRTI_64BIT"],
    $INCLUDES : [],
    $SUPPORTS_JAVA : true,
    $CPP11_COMPILER_FLAGS : ["std=c++11"],
    $SUPPORTS_CPP11: true,
    $OPENSSL_LIBRARIES: ["/usr/lib64/libssl.so", "/usr/lib64/libcrypto.so"],
    $HIDDEN: true
})

#arch("x64RedHawk8.2","gcc8.3.1", {
    $OS : $OS.UNIX,
    $PLATFORM : $PLATFORM.x64,
    $C_COMPILER : "gcc",
    $C_COMPILER_FLAGS : ["m64", "Wall", "fno-omit-frame-pointer"],
    $C_LINKER : "gcc",
    $C_LINKER_FLAGS : ["m64"],
    $CXX_COMPILER : "g++",
    $CXX_COMPILER_FLAGS : ["m64", "Wall", "fno-omit-frame-pointer"],
    $CXX_LINKER : "g++",
    $CXX_LINKER_FLAGS : ["m64"],
    $SYSLIBS : ["lm", "lpthread", "lrt", "ldl", "no-pie", "rdynamic"],
    $DEFINES : ["DRTI_UNIX"],
    $INCLUDES : [],
    $SUPPORTS_JAVA : true,
    $CPP11_COMPILER_FLAGS : ["std=c++11", "fno-omit-frame-pointer"],
    $SUPPORTS_CPP11: true,
    $OPENSSL_LIBRARIES: ["/usr/lib64/libssl.so", "/usr/lib64/libcrypto.so"],
    $HIDDEN: true
})

#arch("x64RedHawk8.4","gcc8.5.0", {
    $OS : $OS.UNIX,
    $PLATFORM : $PLATFORM.x64,
    $C_COMPILER : "gcc",
    $C_COMPILER_FLAGS : ["m64", "Wall", "fno-omit-frame-pointer"],
    $C_LINKER : "gcc",
    $C_LINKER_FLAGS : ["m64"],
    $CXX_COMPILER : "g++",
    $CXX_COMPILER_FLAGS : ["m64", "Wall", "fno-omit-frame-pointer"],
    $CXX_LINKER : "g++",
    $CXX_LINKER_FLAGS : ["m64"],
    $SYSLIBS : ["lm", "lpthread", "lrt", "ldl", "no-pie", "rdynamic"],
    $DEFINES : ["DRTI_UNIX"],
    $INCLUDES : [],
    $SUPPORTS_JAVA : true,
    $CPP11_COMPILER_FLAGS : ["std=c++11", "fno-omit-frame-pointer"], 
    $SUPPORTS_CPP11: true,
    $OPENSSL_LIBRARIES: ["/usr/lib64/libssl.so", "/usr/lib64/libcrypto.so"]
})

#arch("ppce500mcLinux3","gcc4.7.2", {
	$OS : $OS.UNIX,
	$PLATFORM : $PLATFORM.ppc,
	$C_COMPILER : "powerpc-fsl_networking-linux-gcc",
	$C_COMPILER_FLAGS : ["m32", "mhard-float", "mcpu=e500mc", "Wall", "Wno-unknown-pragmas", "-sysroot=$(SYSROOT_e500mc)/ppce500mc-fsl_networking-linux"],
	$C_LINKER : "powerpc-fsl_networking-linux-gcc",
	$C_LINKER_FLAGS : ["m32", "mcpu=e500mc", "static-libgcc", "-sysroot=$(SYSROOT_e500mc)/ppce500mc-fsl_networking-linux"],
	$CXX_COMPILER : "powerpc-fsl_networking-linux-g++",
	$CXX_COMPILER_FLAGS : ["m32", "mhard-float", "mcpu=e500mc", "Wall", "Wno-unknown-pragmas", "-sysroot=$(SYSROOT_e500mc)/ppce500mc-fsl_networking-linux"],
	$CXX_LINKER : "powerpc-fsl_networking-linux-g++",
	$CXX_LINKER_FLAGS : ["m32", "mcpu=e500mc", "static-libgcc", "-sysroot=$(SYSROOT_e500mc)/ppce500mc-fsl_networking-linux"],
	$SYSLIBS : ["ldl", "lm", "lpthread", "lrt", "rdynamic"],
	$DEFINES : ["DRTI_UNIX", "DRTI_LINUX", "DPOWERPC"],
	$INCLUDES : [],
	$SUPPORTS_JAVA : false,
    $CPP11_COMPILER_FLAGS : ["std=c++0x"],
    $SUPPORTS_CPP11: true
})

#arch("ppc32e6500Linux","gcc4.9.1", {
	$OS : $OS.UNIX,
	$PLATFORM : $PLATFORM.ppc,
	$C_COMPILER : "powerpc-wrsmllib32-linux-gcc",
	$C_COMPILER_FLAGS : ["m32", "Wall", "Wno-unknown-pragmas"],
	$C_LINKER : "powerpc-wrsmllib32-linux-gcc",
	$C_LINKER_FLAGS : ["m32"],
	$CXX_COMPILER : "powerpc-wrsmllib32-linux-g++",
	$CXX_COMPILER_FLAGS : ["m32", "Wall", "Wno-unknown-pragmas"],
	$CXX_LINKER : "powerpc-wrsmllib32-linux-g++",
	$CXX_LINKER_FLAGS : ["m32"],
	$SYSLIBS : ["ldl", "lm", "lpthread", "lrt", "rdynamic"],
	$DEFINES : ["DRTI_UNIX", "DRTI_LINUX"],
	$INCLUDES : [],
	$SUPPORTS_JAVA : false,
    $CPP11_COMPILER_FLAGS : ["std=c++11"],
    $SUPPORTS_CPP11: true,
    $HIDDEN: true
})

#arch("x64Linux2.6","gcc4.3.4", {
    $OS : $OS.UNIX,
    $PLATFORM : $PLATFORM.x64,
    $C_COMPILER : "gcc",
    $C_COMPILER_FLAGS : ["m64", "Wall"],
    $C_LINKER : "gcc",
    $C_LINKER_FLAGS : ["m64"],
    $CXX_COMPILER : "g++",
    $CXX_COMPILER_FLAGS : ["m64", "Wall"],
    $CXX_LINKER : "g++",
    $CXX_LINKER_FLAGS : ["m64", "static-libgcc"],
    $SYSLIBS : ["ldl", "lm", "lpthread", "lrt", "rdynamic"],
    $DEFINES : ["DRTI_UNIX", "DRTI_LINUX", "DRTI_64BIT"],
    $INCLUDES : [],
    $SUPPORTS_JAVA : true,
    $HIDDEN: true
})

#arch("x64Linux2.6","gcc4.4.5", {
    $OS : $OS.UNIX,
    $PLATFORM : $PLATFORM.x64,
    $C_COMPILER : "gcc",
    $C_COMPILER_FLAGS : ["m64"],
    $C_LINKER : "gcc",
    $C_LINKER_FLAGS : ["m64"],
    $CXX_COMPILER : "g++",
    $CXX_COMPILER_FLAGS : ["m64"],
    $CXX_LINKER : "g++",
    $CXX_LINKER_FLAGS : ["m64", "static-libgcc"],
    $SYSLIBS : ["ldl", "lm", "lpthread", "lrt", "rdynamic"],
    $DEFINES : ["DRTI_UNIX", "DRTI_LINUX", "DRTI_64BIT"],
    $INCLUDES : [],
    $SUPPORTS_JAVA : true,
    $HIDDEN: true
})

#arch("x64Linux3","gcc4.8.2FACE_GP", {
    $OS : $OS.UNIX,
    $PLATFORM : $PLATFORM.x64,
    $C_COMPILER : "gcc",
    $C_COMPILER_FLAGS : ["m64", "Wall"],
    $C_LINKER : "gcc",
    $C_LINKER_FLAGS : ["m64"],
    $CXX_COMPILER : "g++",
    $CXX_COMPILER_FLAGS : ["m64", "Wall"],
    $CXX_LINKER : "g++",
    $CXX_LINKER_FLAGS : ["m64", "static-libgcc"],
    $SYSLIBS : ["ldl", "lm", "lpthread", "lrt", "rdynamic"],
    $DEFINES : ["DRTI_UNIX", "DRTI_LINUX", "DRTI_64BIT", "DFACE_COMPLIANCE_LEVEL_GENERAL=4", "DENABLE_FACE_COMPLIANCE=FACE_COMPLIANCE_LEVEL_GENERAL", "D_FORTIFY_SOURCE=0"],
    $INCLUDES : [],
    $SUPPORTS_ADA : true,
    $SUPPORTS_JAVA : true,
    $CPP11_COMPILER_FLAGS : ["std=c++0x"],
    $SUPPORTS_CPP11: true,
    $HIDDEN: true
})

#arch("x64Linux3","gcc4.8.2", {
    $OS : $OS.UNIX,
    $PLATFORM : $PLATFORM.x64,
    $C_COMPILER : "gcc",
    $C_COMPILER_FLAGS : ["m64", "Wall"],
    $C_LINKER : "gcc",
    $C_LINKER_FLAGS : ["m64"],
    $CXX_COMPILER : "g++",
    $CXX_COMPILER_FLAGS : ["m64", "Wall"],
    $CXX_LINKER : "g++",
    $CXX_LINKER_FLAGS : ["m64", "static-libgcc"],
    $SYSLIBS : ["ldl", "lm", "lpthread", "lrt", "rdynamic"],
    $DEFINES : ["DRTI_UNIX", "DRTI_LINUX", "DRTI_64BIT"],
    $INCLUDES : [],
    $SUPPORTS_ADA : true,
    $SUPPORTS_JAVA : true,
    $CPP11_COMPILER_FLAGS : ["std=c++0x"],
    $SUPPORTS_CPP11: true,
    $WOLFSSL_LIBRARIES: ["$(NDDSHOME)/third_party/wolfssl-$wolfsslVersion/x64Linux3gcc4.8.2/release/lib/libwolfssl.a"]
})

#arch("armv7AngstromLinux3.2","gcc4.4.1.cortex-a9", {
    $OS : $OS.UNIX,
    $C_COMPILER : "arm-none-linux-gnueabi-gcc",
    $C_COMPILER_FLAGS : [],
    $C_LINKER : "arm-none-linux-gnueabi-gcc",
    $C_LINKER_FLAGS : [],
    $CXX_COMPILER : "arm-none-linux-gnueabi-g++",
    $CXX_COMPILER_FLAGS : [],
    $CXX_LINKER : "arm-none-linux-gnueabi-g++",
    $CXX_LINKER_FLAGS : ["static-libgcc"],
    $SYSLIBS : ["ldl", "lm", "lpthread", "lrt", "rdynamic"],
    $DEFINES : ["fPIC", "DRTI_UNIX", "DRTI_LINUX", "march=armv7-a", "mcpu=cortex-a9", "mthumb", "mlong-calls"],
    $INCLUDES : [],
    $HIDDEN : true
})

#arch("armv7aWRLinux8","gcc5.2.0", {
        $OS : $OS.UNIX,
        $C_COMPILER : "arm-wrs-linux-gnueabi-gcc",
        $C_COMPILER_FLAGS : ["-sysroot=$(COMPILERSYSROOT)", "B$(COMPILERSYSROOT)/../../../../host-cross/", "march=armv7-a", "marm", "mfpu=neon", "mfloat-abi=hard", "mtune=cortex-a7"],
        $C_LINKER : "arm-wrs-linux-gnueabi-gcc",
        $C_LINKER_FLAGS : ["-sysroot=$(COMPILERSYSROOT)", "B$(COMPILERSYSROOT)/../../../../host-cross/", "march=armv7-a", "marm", "mfpu=neon", "mfloat-abi=hard", "mtune=cortex-a7"],
        $CXX_COMPILER : "arm-wrs-linux-gnueabi-g++",
        $CXX_COMPILER_FLAGS : ["-sysroot=$(COMPILERSYSROOT)", "B$(COMPILERSYSROOT)/../../../../host-cross/", "march=armv7-a", "marm", "mfpu=neon", "mfloat-abi=hard", "mtune=cortex-a7"],
        $CXX_LINKER : "arm-wrs-linux-gnueabi-g++",
        $CXX_LINKER_FLAGS : ["-sysroot=$(COMPILERSYSROOT)", "B$(COMPILERSYSROOT)/../../../../host-cross/", "march=armv7-a", "marm", "mfpu=neon", "mfloat-abi=hard", "mtune=cortex-a7"],
        $SYSLIBS : ["lm", "lpthread", "lrt", "ldl", "rdynamic"],
        $DEFINES : ["fPIC", "DRTI_UNIX", "DRTI_LINUX", "funwind-tables"],
        $INCLUDES : [],
        $SUPPORTS_JAVA :true,
    $CPP11_COMPILER_FLAGS : ["std=c++14"],
    $SUPPORTS_CPP11: true,
    $HIDDEN: true
})

#arch("ppce6500Linux","gcc5.2.0", {
    $OS : $OS.UNIX,
    $C_COMPILER : "$(COMPILER_PATH)/powerpc-wrsmllib32-linux-gcc",
    $C_COMPILER_FLAGS : ["-sysroot=$(SYSROOT)"],
    $C_LINKER : "$(COMPILER_PATH)/powerpc-wrsmllib32-linux-gcc",
    $C_LINKER_FLAGS : ["-sysroot=$(SYSROOT)"],
    $CXX_COMPILER : "$(COMPILER_PATH)/powerpc-wrsmllib32-linux-g++",
    $CXX_COMPILER_FLAGS : ["-sysroot=$(SYSROOT)"],
    $CXX_LINKER : "$(COMPILER_PATH)/powerpc-wrsmllib32-linux-g++",
    $CXX_LINKER_FLAGS : ["-sysroot=$(SYSROOT)"],
    $SYSLIBS : ["ldl", "lm", "lpthread", "lrt", "rdynamic"],
    $DEFINES : ["DRTI_UNIX", "DRTI_LINUX"],
    $INCLUDES : [],
    $CPP11_COMPILER_FLAGS : ["-sysroot=$(SYSROOT)","std=c++11"],
    $SUPPORTS_CPP11: true,
    "CSR_VAR" : "#SYSROOT = # Set the location of the toolchain sysroot",
    "COMP_PATH_VAR" : "#COMPILER_PATH = # Set the location of the toolchain path",
    $HIDDEN: true
})

#arch("i86Linux3","gcc5.4.0", {
	$OS : $OS.UNIX,
	$PLATFORM : $PLATFORM.i86,
	$C_COMPILER : "gcc",
	$C_COMPILER_FLAGS : ["m32", "Wall"],
	$C_LINKER : "gcc",
	$C_LINKER_FLAGS : ["m32"],
	$CXX_COMPILER : "g++",
	$CXX_COMPILER_FLAGS : ["m32", "Wall"],
	$CXX_LINKER : "g++",
	$CXX_LINKER_FLAGS : ["m32"],
	$SYSLIBS : ["ldl", "lm", "lpthread", "lrt", "rdynamic"],
	$DEFINES : ["DRTI_UNIX", "DRTI_LINUX"],
	$INCLUDES : [],
	$SUPPORTS_JAVA : false,
    $CPP11_COMPILER_FLAGS : ["std=c++11"],
    $SUPPORTS_CPP11: true,
    $HIDDEN: true
})

#arch("x64Linux3","gcc5.4.0", {
    $OS : $OS.UNIX,
    $PLATFORM : $PLATFORM.x64,
    $C_COMPILER : "gcc",
    $C_COMPILER_FLAGS : ["m64", "Wall"],
    $C_LINKER : "gcc",
    $C_LINKER_FLAGS : ["m64"],
    $CXX_COMPILER : "g++",
    $CXX_COMPILER_FLAGS : ["m64", "Wall"],
    $CXX_LINKER : "g++",
    $CXX_LINKER_FLAGS : ["m64"],
    $SYSLIBS : ["ldl", "lm", "lpthread", "lrt", "rdynamic"],
    $DEFINES : ["DRTI_UNIX", "DRTI_LINUX", "DRTI_64BIT"],
    $INCLUDES : [],
    $SUPPORTS_JAVA : true,
    $CPP11_COMPILER_FLAGS : ["std=c++11"],
    $SUPPORTS_CPP11: true,
    $HIDDEN: true
})

#arch("x64Linux4","gcc7.3.0", {
    $OS : $OS.UNIX,
    $PLATFORM : $PLATFORM.x64,
    $C_COMPILER : "$(COMPILER_PATH)$(GCC_PREFIX)gcc",
    $C_COMPILER_FLAGS : ["m64", "Wall $(ADDITIONAL_COMPILER_FLAGS)"],
    $C_LINKER : "$(COMPILER_PATH)$(GCC_PREFIX)gcc",
    $C_LINKER_FLAGS : ["m64 $(ADDITIONAL_LINKER_FLAGS)"],
    $CXX_COMPILER : "$(COMPILER_PATH)$(GCC_PREFIX)g++",
    $CXX_COMPILER_FLAGS : ["m64", "Wall $(ADDITIONAL_COMPILER_FLAGS)"],
    $CXX_LINKER : "$(COMPILER_PATH)$(GCC_PREFIX)g++",
    $CXX_LINKER_FLAGS : ["m64 $(ADDITIONAL_LINKER_FLAGS)"],
    $SYSLIBS : ["ldl", "lm", "lpthread", "lrt", "no-pie", "rdynamic"],
    $DEFINES : ["DRTI_UNIX", "DRTI_LINUX", "DRTI_64BIT"],
    $INCLUDES : [],
    $SUPPORTS_JAVA : true,
    $MAKEFILE_TEMPLATE: "makefileC.vm",
    "TR_VAR" : "#TOOLSROOT = # Set the location of the toolchain",
    "CSR_VAR" : "#COMPILERSYSROOT = $(TOOLSROOT)/build/tmp/sysroots/genericx86-64",
    "COMP_PATH_VAR" : "#COMPILER_PATH = $(TOOLSROOT)/build/tmp/sysroots/x86_64-linux/usr/bin/x86_64-wrs-linux",
    $CPP11_COMPILER_FLAGS : ["std=c++14"],
    $SUPPORTS_CPP11: true,
    $WOLFSSL_LIBRARIES: ["$(NDDSHOME)/third_party/wolfssl-$wolfsslVersion/x64Linux4gcc7.3.0/release/lib/libwolfssl.a"]
})

#arch("x64Linux5Unreal5.2","clang15", {
    $OS : $OS.UNIX,
    $PLATFORM : $PLATFORM.x64,
    $C_COMPILER : "$(COMPILER_PATH)/clang",
    $C_COMPILER_FLAGS : [
        "m64", "Wall", "Wno-deprecated-builtins", "Wno-return-type-c-linkage",
        "-sysroot=$(COMPILERSYSROOT)"
    ],
    $C_LINKER : "$(COMPILER_PATH)/clang",
    $C_LINKER_FLAGS : [
        "m64", "-sysroot=$(COMPILERSYSROOT)", "fuse-ld=lld",
        "L$(UNREAL_ENGINE_ROOT)/Engine/Source/ThirdParty/Unix/LibCxx/lib/Unix/x86_64-unknown-linux-gnu"
    ],
    $CXX_COMPILER : "$(COMPILER_PATH)/clang++",
    $CXX_COMPILER_FLAGS : [
        "m64", "Wall", "Wno-deprecated-builtins", "Wno-return-type-c-linkage",
        "isystem$(UNREAL_ENGINE_ROOT)/Engine/Source/ThirdParty/Unix/LibCxx/include/c++/v1",
        "-sysroot=$(COMPILERSYSROOT)", "stdlib=libc++", "fno-rtti"
    ],
    $CXX_LINKER : "$(COMPILER_PATH)/clang++",
    $CXX_LINKER_FLAGS : [
        "m64", "-sysroot=$(COMPILERSYSROOT)", "fuse-ld=lld", "stdlib=libc++",
        "L$(UNREAL_ENGINE_ROOT)/Engine/Source/ThirdParty/Unix/LibCxx/lib/Unix/x86_64-unknown-linux-gnu"
    ],
    $SYSLIBS : ["ldl", "lm", "lpthread", "lrt", "rdynamic"],
    $DEFINES : ["DRTI_UNIX", "DRTI_LINUX", "DRTI_64BIT"],
    $INCLUDES : [],
    $SUPPORTS_JAVA : true,
    $MAKEFILE_TEMPLATE: "makefileC.vm",
    "TR_VAR" : "#UNREAL_ENGINE_ROOT = Path to the Unreal Engine installation",
    "CSR_VAR" : "COMPILERSYSROOT = $(UNREAL_ENGINE_ROOT)/Engine/Extras/ThirdPartyNotUE/SDKs/HostLinux/Linux_x64/v21_clang-15.0.1-centos7/x86_64-unknown-linux-gnu",
    "COMP_PATH_VAR" : "COMPILER_PATH = $(COMPILERSYSROOT)/bin",
    $CPP11_COMPILER_FLAGS : ["std=c++11"],
    $SUPPORTS_CPP11: true
})

#arch("x64Linux","gcc7.4.1", {
    $OS : $OS.UNIX,
    $PLATFORM : $PLATFORM.x64,
    $C_COMPILER : "gcc",
    $C_COMPILER_FLAGS : ["m64", "pthread", "Wall"],
    $C_LINKER : "gcc",
    $C_LINKER_FLAGS : ["m64", "pthread"],
    $CXX_COMPILER : "g++",
    $CXX_COMPILER_FLAGS : ["m64", "pthread", "Wall"],
    $CXX_LINKER : "g++",
    $CXX_LINKER_FLAGS : ["m64", "pthread"],
    $SYSLIBS : ["ldl", "lm", "lrt", "no-pie", "rdynamic"],
    $DEFINES : ["DRTI_UNIX", "DRTI_LINUX", "DRTI_64BIT"],
    $INCLUDES : [],
    $SUPPORTS_JAVA : true,
    $CPP11_COMPILER_FLAGS : ["std=c++11"],
    $SUPPORTS_CPP11: true,
    $HIDDEN: true
})
#arch("x64Linux4","gcc7.3.0FACE_GP", {
    $OS : $OS.UNIX,
    $PLATFORM : $PLATFORM.x64,
    $C_COMPILER : "$(COMPILER_PATH)$(GCC_PREFIX)gcc",
    $C_COMPILER_FLAGS : ["m64", "Wall $(ADDITIONAL_COMPILER_FLAGS)"],
    $C_LINKER : "$(COMPILER_PATH)$(GCC_PREFIX)gcc",
    $C_LINKER_FLAGS : ["m64 $(ADDITIONAL_LINKER_FLAGS)"],
    $CXX_COMPILER : "$(COMPILER_PATH)$(GCC_PREFIX)g++",
    $CXX_COMPILER_FLAGS : ["m64", "Wall $(ADDITIONAL_COMPILER_FLAGS)"],
    $CXX_LINKER : "$(COMPILER_PATH)$(GCC_PREFIX)g++",
    $CXX_LINKER_FLAGS : ["m64 $(ADDITIONAL_LINKER_FLAGS)"],
    $SYSLIBS : ["ldl", "lm", "lpthread", "lrt", "no-pie", "rdynamic"],
    $DEFINES : ["DRTI_UNIX", "DRTI_LINUX", "DRTI_64BIT", "DFACE_COMPLIANCE_LEVEL_GENERAL=4", "DENABLE_FACE_COMPLIANCE=FACE_COMPLIANCE_LEVEL_GENERAL", "D_FORTIFY_SOURCE=0"],
    $INCLUDES : [],
    $SUPPORTS_JAVA : true,
    $MAKEFILE_TEMPLATE: "makefileC.vm",
    "TR_VAR" : "#TOOLSROOT = # Set the location of the toolchain",
    "CSR_VAR" : "#COMPILERSYSROOT = $(TOOLSROOT)/build/tmp/sysroots/genericx86-64",
    "COMP_PATH_VAR" : "#COMPILER_PATH = $(TOOLSROOT)/build/tmp/sysroots/x86_64-linux/usr/bin/x86_64-wrs-linux",
    $CPP11_COMPILER_FLAGS : ["std=c++14"],
    $SUPPORTS_CPP11: true
})

#******************** WINDOWS ********************#
#arch("i86Win32","VS2010", {
    $OS : $OS.WIN,
    $PLATFORM : $PLATFORM.i86,
    $VS_VERSION : "VS2010",
    $VS_NUMBER : "2010",
    $SUPPORTS_JAVA : false,
    $PROJECT_FILE_EXT: ".vcxproj",
    $C_PUBSUB_PROJECT_TEMPLATE :"vcxproj.vm",
    $C_PUBSUB_FILTER_PROJECT_TEMPLATE :"vcxprojFilters.vm",
    $PUBSUB_SOLUTION_TEMPLATE : "projectVSSolution.vm",
    $DEFINES : ["WIN32"],
    "SOL_FORMAT_VERSION" : "11.00",
    "DEBUG_INFORMATION_FORMAT" : "EditAndContinue",
    "TARGET_MACHINE" : "MachineX86",
    "PLATFORM_TOOLSET": "",
	"TARGET_PLATFORM_VERSION" : "",
    "FRAMEWORK_PROFILE": "<TargetFrameworkProfile>Client</TargetFrameworkProfile>",
    "PROJECT_TOOLSVERSION" : "4.0",
    $HIDDEN : true
})

#arch("x64Win64","VS2010", {
    $OS : $OS.WIN,
    $PLATFORM : $PLATFORM.x64,
    $VS_VERSION : "VS2010",
    $VS_NUMBER : "2010",
    $SUPPORTS_JAVA : true,
    $PROJECT_FILE_EXT: ".vcxproj",
    $C_PUBSUB_PROJECT_TEMPLATE :"vcxproj.vm",
    $C_PUBSUB_FILTER_PROJECT_TEMPLATE :"vcxprojFilters.vm",
    $PUBSUB_SOLUTION_TEMPLATE : "projectVSSolution.vm",
    $DEFINES : ["WIN32"],
    "SOL_FORMAT_VERSION" : "11.00",
    "DEBUG_INFORMATION_FORMAT" : "ProgramDatabase",
    "TARGET_MACHINE" : "MachineX64",
    "PLATFORM_TOOLSET": "",
	"TARGET_PLATFORM_VERSION" : "",
    "FRAMEWORK_PROFILE": "<TargetFrameworkProfile>Client</TargetFrameworkProfile>",
    "PROJECT_TOOLSVERSION" : "4.0",
    $HIDDEN : true
})

#arch("i86Win32","VS2012", {
    $OS : $OS.WIN,
    $PLATFORM : $PLATFORM.i86,
    $VS_VERSION : "VS2012",
    $VS_NUMBER : "2012",
    $SUPPORTS_JAVA : false,
    $PROJECT_FILE_EXT: ".vcxproj",
    $C_PUBSUB_PROJECT_TEMPLATE :"vcxproj.vm",
    $C_PUBSUB_FILTER_PROJECT_TEMPLATE :"vcxprojFilters.vm",
    $PUBSUB_SOLUTION_TEMPLATE : "projectVSSolution.vm",
    $DEFINES : ["WIN32"],
    "SOL_FORMAT_VERSION" : "12.00",
    "DEBUG_INFORMATION_FORMAT" : "EditAndContinue",
    "TARGET_MACHINE" : "MachineX86",
    "PLATFORM_TOOLSET": "<PlatformToolset>v110</PlatformToolset>",
	"TARGET_PLATFORM_VERSION" : "",
    "FRAMEWORK_PROFILE": "",
    "PROJECT_TOOLSVERSION" : "4.0",
    $SUPPORTS_CPP11: true,
    $HIDDEN: true
})

#arch("x64Win64","VS2012", {
    $OS : $OS.WIN,
    $PLATFORM : $PLATFORM.x64,
    $VS_VERSION : "VS2012",
    $VS_NUMBER : "2012",
    $SUPPORTS_JAVA : true,
    $PROJECT_FILE_EXT: ".vcxproj",
    $C_PUBSUB_PROJECT_TEMPLATE :"vcxproj.vm",
    $C_PUBSUB_FILTER_PROJECT_TEMPLATE :"vcxprojFilters.vm",
    $PUBSUB_SOLUTION_TEMPLATE : "projectVSSolution.vm",
    $DEFINES : ["WIN32"],
    "SOL_FORMAT_VERSION" : "12.00",
    "DEBUG_INFORMATION_FORMAT" : "ProgramDatabase",
    "TARGET_MACHINE" : "MachineX64",
    "PLATFORM_TOOLSET": "<PlatformToolset>v110</PlatformToolset>",
	"TARGET_PLATFORM_VERSION" : "",
    "FRAMEWORK_PROFILE": "",
    "PROJECT_TOOLSVERSION" : "4.0",
    $SUPPORTS_CPP11: true,
    $HIDDEN: true
})

#arch("i86Win32","VS2013", {
    $OS : $OS.WIN,
    $PLATFORM : $PLATFORM.i86,
    $VS_VERSION : "VS2013",
    $VS_NUMBER : "2013",
    $SUPPORTS_JAVA : false,
    $PROJECT_FILE_EXT: ".vcxproj",
    $C_PUBSUB_PROJECT_TEMPLATE :"vcxproj.vm",
    $C_PUBSUB_FILTER_PROJECT_TEMPLATE :"vcxprojFilters.vm",
    $PUBSUB_SOLUTION_TEMPLATE : "projectVSSolution.vm",
    $DEFINES : ["WIN32"],
    "SOL_FORMAT_VERSION" : "12.00",
    "DEBUG_INFORMATION_FORMAT" : "EditAndContinue",
    "TARGET_MACHINE" : "MachineX86",
    "PLATFORM_TOOLSET": "<PlatformToolset>v120</PlatformToolset>",
	"TARGET_PLATFORM_VERSION" : "",
    "FRAMEWORK_PROFILE": "",
    "PROJECT_TOOLSVERSION" : "12.0",
    $SUPPORTS_CPP11: true,
    $HIDDEN: true
})

#arch("x64Win64","VS2013", {
    $OS : $OS.WIN,
    $PLATFORM : $PLATFORM.x64,
    $VS_VERSION : "VS2013",
    $VS_NUMBER : "2013",
    $SUPPORTS_JAVA : true,
    $PROJECT_FILE_EXT: ".vcxproj",
    $C_PUBSUB_PROJECT_TEMPLATE :"vcxproj.vm",
    $C_PUBSUB_FILTER_PROJECT_TEMPLATE :"vcxprojFilters.vm",
    $PUBSUB_SOLUTION_TEMPLATE : "projectVSSolution.vm",
    $DEFINES : ["WIN32"],
    "SOL_FORMAT_VERSION" : "12.00",
    "DEBUG_INFORMATION_FORMAT" : "ProgramDatabase",
    "TARGET_MACHINE" : "MachineX64",
    "PLATFORM_TOOLSET": "<PlatformToolset>v120</PlatformToolset>",
	"TARGET_PLATFORM_VERSION" : "",
    "FRAMEWORK_PROFILE": "",
    "PROJECT_TOOLSVERSION" : "12.0",
    $SUPPORTS_CPP11: true,
    $HIDDEN: true
})

#arch("net8","", {
    $OS : $OS.WIN,
    $PLATFORM : $PLATFORM.x64,
    $DOTNET_VERSION : 8,
    $PROJECT_FILE_EXT: ".csproj",
    $CS_TYPE_PROJECT_TEMPLATE : "csproj.vm",
    $CS_NUGET_CONF_TEMPLATE : "nuget.vm",
    $SUPPORTS_JAVA : false,
    $SUPPORTS_CPP11: false,
    "PLATFORM_TOOLSET": "net8"
})

#arch("net7","", {
    $OS : $OS.WIN,
    $PLATFORM : $PLATFORM.x64,
    $DOTNET_VERSION : 7,
    $PROJECT_FILE_EXT: ".csproj",
    $CS_TYPE_PROJECT_TEMPLATE : "csproj.vm",
    $CS_NUGET_CONF_TEMPLATE : "nuget.vm",
    $SUPPORTS_JAVA : false,
    $SUPPORTS_CPP11: false,
    "PLATFORM_TOOLSET": "net7"
})

#arch("net6","", {
    $OS : $OS.WIN,
    $PLATFORM : $PLATFORM.x64,
    $DOTNET_VERSION : 6,
    $PROJECT_FILE_EXT: ".csproj",
    $CS_TYPE_PROJECT_TEMPLATE : "csproj.vm",
    $CS_NUGET_CONF_TEMPLATE : "nuget.vm",
    $SUPPORTS_JAVA : false,
    $SUPPORTS_CPP11: false,
    "PLATFORM_TOOLSET": "net6"
})

#arch("net5","", {
    $OS : $OS.WIN,
    $PLATFORM : $PLATFORM.x64,
    $DOTNET_VERSION : 5,
    $PROJECT_FILE_EXT: ".csproj",
    $CS_TYPE_PROJECT_TEMPLATE : "csproj.vm",
    $CS_NUGET_CONF_TEMPLATE : "nuget.vm",
    $SUPPORTS_JAVA : false,
    $SUPPORTS_CPP11: false,
    "PLATFORM_TOOLSET": "net5.0"
})

#arch("netcoreapp3.1","", {
    $OS : $OS.WIN,
    $PLATFORM : $PLATFORM.x64,
    $DOTNET_VERSION : 3,
    $PROJECT_FILE_EXT: ".csproj",
    $CS_TYPE_PROJECT_TEMPLATE : "csproj.vm",
    $CS_NUGET_CONF_TEMPLATE : "nuget.vm",
    $SUPPORTS_JAVA : false,
    $SUPPORTS_CPP11: false,
    "PLATFORM_TOOLSET": "netcoreapp3.1"
})

#arch("netcoreapp2.1","", {
    $OS : $OS.WIN,
    $PLATFORM : $PLATFORM.x64,
    $DOTNET_VERSION : 2,
    $PROJECT_FILE_EXT: ".csproj",
    $CS_TYPE_PROJECT_TEMPLATE : "csproj.vm",
    $CS_NUGET_CONF_TEMPLATE : "nuget.vm",
    $SUPPORTS_JAVA : false,
    $SUPPORTS_CPP11: false,
    "PLATFORM_TOOLSET": "netcoreapp2.1"
})

#arch("i86Win32","VS2015", {
    $OS : $OS.WIN,
    $PLATFORM : $PLATFORM.i86,
    $VS_VERSION : "VS2015",
    $VS_NUMBER : "14",
    $SUPPORTS_JAVA : true,
    $PROJECT_FILE_EXT: ".vcxproj",
    $C_PUBSUB_PROJECT_TEMPLATE :"vcxproj.vm",
    $C_PUBSUB_FILTER_PROJECT_TEMPLATE :"vcxprojFilters.vm",
    $PUBSUB_SOLUTION_TEMPLATE : "projectVSSolution.vm",
    $DEFINES : ["WIN32"],
    "SOL_FORMAT_VERSION" : "12.00",
    "DEBUG_INFORMATION_FORMAT" : "EditAndContinue",
    "TARGET_MACHINE" : "MachineX86",
    "PLATFORM_TOOLSET": "<PlatformToolset>v140</PlatformToolset>",
	"TARGET_PLATFORM_VERSION" : "",
    "FRAMEWORK_PROFILE": "",
    "PROJECT_TOOLSVERSION" : "14.0",
    $SUPPORTS_CPP11: true,
    $OPENSSL_LIBRARIES: ["$(NDDSHOME)\third_party\openssl-$opensslVersion\i86Win32VS2015\static_release\lib\libssl.lib", "$(NDDSHOME)\third_party\openssl-$opensslVersion\i86Win32VS2015\static_release\lib\libcrypto.lib", "crypt32.lib"],
    $OPENSSL3_LIBRARIES: ["$(NDDSHOME)\third_party\openssl-$openssl3Version\i86Win32VS2015\static_release\lib\libssl.lib", "$(NDDSHOME)\third_party\openssl-$openssl3Version\i86Win32VS2015\static_release\lib\libcrypto.lib", "crypt32.lib"]
})

#arch("x64Win64","VS2015", {
    $OS : $OS.WIN,
    $PLATFORM : $PLATFORM.x64,
    $VS_VERSION : "VS2015",
    $VS_NUMBER : "14",
    $SUPPORTS_JAVA : true,
    $PROJECT_FILE_EXT: ".vcxproj",
    $C_PUBSUB_PROJECT_TEMPLATE :"vcxproj.vm",
    $C_PUBSUB_FILTER_PROJECT_TEMPLATE :"vcxprojFilters.vm",
    $PUBSUB_SOLUTION_TEMPLATE : "projectVSSolution.vm",
    $DEFINES : ["WIN32"],
    "SOL_FORMAT_VERSION" : "12.00",
    "DEBUG_INFORMATION_FORMAT" : "ProgramDatabase",
    "TARGET_MACHINE" : "MachineX64",
    "PLATFORM_TOOLSET": "<PlatformToolset>v140</PlatformToolset>",
	"TARGET_PLATFORM_VERSION" : "",
    "FRAMEWORK_PROFILE": "",
    "PROJECT_TOOLSVERSION" : "14.0",
    $SUPPORTS_CPP11: true,
    $OPENSSL_LIBRARIES: ["$(NDDSHOME)\third_party\openssl-$opensslVersion\x64Win64VS2015\static_release\lib\libssl.lib", "$(NDDSHOME)\third_party\openssl-$opensslVersion\x64Win64VS2015\static_release\lib\libcrypto.lib", "crypt32.lib"],
    $OPENSSL3_LIBRARIES: ["$(NDDSHOME)\third_party\openssl-$openssl3Version\x64Win64VS2015\static_release\lib\libssl.lib", "$(NDDSHOME)\third_party\openssl-$openssl3Version\x64Win64VS2015\static_release\lib\libcrypto.lib", "crypt32.lib"]
})

#arch("i86Win32","VS2017", {
    $OS : $OS.WIN,
    $PLATFORM : $PLATFORM.i86,
    $VS_VERSION : "VS2017",
    $VS_NUMBER : "15",
    $SUPPORTS_JAVA : true,
    $PROJECT_FILE_EXT: ".vcxproj",
    $C_PUBSUB_PROJECT_TEMPLATE :"vcxproj.vm",
    $C_PUBSUB_FILTER_PROJECT_TEMPLATE :"vcxprojFilters.vm",
    $PUBSUB_SOLUTION_TEMPLATE : "projectVSSolution.vm",
    $DEFINES : ["WIN32"],
    "SOL_FORMAT_VERSION" : "12.00",
    "DEBUG_INFORMATION_FORMAT" : "EditAndContinue",
    "TARGET_MACHINE" : "MachineX86",
    "PLATFORM_TOOLSET": "<PlatformToolset>v141</PlatformToolset>",
	"TARGET_PLATFORM_VERSION" : "10.0.17134.0",
    "FRAMEWORK_PROFILE": "",
    "PROJECT_TOOLSVERSION" : "15.0",
    $SUPPORTS_CPP11: true,
    $OPENSSL_LIBRARIES: ["$(NDDSHOME)\third_party\openssl-$opensslVersion\i86Win32VS2017\static_release\lib\libssl.lib", "$(NDDSHOME)\third_party\openssl-$opensslVersion\i86Win32VS2017\static_release\lib\libcrypto.lib", "crypt32.lib"],
    $OPENSSL3_LIBRARIES: ["$(NDDSHOME)\third_party\openssl-$openssl3Version\i86Win32VS2017\static_release\lib\libssl.lib", "$(NDDSHOME)\third_party\openssl-$openssl3Version\i86Win32VS2017\static_release\lib\libcrypto.lib", "crypt32.lib"]
})

#arch("i86INtime6.3","VS2017", {
    $OS : $OS.WIN,
    $PLATFORM : $PLATFORM.intime,
    $VS_VERSION : "VS2017",
    $VS_NUMBER : "15",
    $SUPPORTS_JAVA : false,
    $PROJECT_FILE_EXT: ".vcxproj",
    $C_PUBSUB_PROJECT_TEMPLATE :"intime_vcxproj.vm",
    $C_PUBSUB_FILTER_PROJECT_TEMPLATE :"vcxprojFilters.vm",
    $PUBSUB_SOLUTION_TEMPLATE : "projectVSSolution.vm",
    $DEFINES : ["__C99__", "__INTIME__", "RTI_INTIME", "__INTIME_CPP17", "_HAS_NAMESPACE ", "_SILENCE_ALL_CXX17_DEPRECATION_WARNINGS", "_CONSOLE"],
    "SOL_FORMAT_VERSION" : "12.00",
    "DEBUG_INFORMATION_FORMAT" : "Enabled",
    "TARGET_MACHINE" : "MachineX86",
    "PLATFORM_TOOLSET": "<PlatformToolset>v141</PlatformToolset>",
    "TARGET_PLATFORM_VERSION" : "10.0.17134.0",
    "FRAMEWORK_PROFILE": "",
    "PROJECT_TOOLSVERSION" : "15.0",
    $SUPPORTS_CPP11: true,
    $HIDDEN: true
})

#arch("x64Win64","VS2017", {
    $OS : $OS.WIN,
    $PLATFORM : $PLATFORM.x64,
    $VS_VERSION : "VS2017",
    $VS_NUMBER : "15",
    $SUPPORTS_JAVA : true,
    $PROJECT_FILE_EXT: ".vcxproj",
    $C_PUBSUB_PROJECT_TEMPLATE :"vcxproj.vm",
    $C_PUBSUB_FILTER_PROJECT_TEMPLATE :"vcxprojFilters.vm",
    $PUBSUB_SOLUTION_TEMPLATE : "projectVSSolution.vm",
    $DEFINES : ["WIN32"],
    "SOL_FORMAT_VERSION" : "12.00",
    "DEBUG_INFORMATION_FORMAT" : "ProgramDatabase",
    "TARGET_MACHINE" : "MachineX64",
    "PLATFORM_TOOLSET": "<PlatformToolset>v141</PlatformToolset>",
	"TARGET_PLATFORM_VERSION" : "10.0.17134.0",
    "FRAMEWORK_PROFILE": "",
    "PROJECT_TOOLSVERSION" : "15.0",
    $SUPPORTS_CPP11: true,
    $OPENSSL_LIBRARIES: ["$(NDDSHOME)\third_party\openssl-$opensslVersion\x64Win64VS2017\static_release\lib\libssl.lib", "$(NDDSHOME)\third_party\openssl-$opensslVersion\x64Win64VS2017\static_release\lib\libcrypto.lib", "crypt32.lib"],
    $OPENSSL3_LIBRARIES: ["$(NDDSHOME)\third_party\openssl-$openssl3Version\x64Win64VS2017\static_release\lib\libssl.lib", "$(NDDSHOME)\third_party\openssl-$openssl3Version\x64Win64VS2017\static_release\lib\libcrypto.lib", "crypt32.lib"]
})

## We support VS2019 with VS2017 libraries. The parameters changed were
## VS_VERSION, VS_NUMBER, PLATFORM_TOOLSET, TARGET_PLATFORM_VERSION
## and PROJECT_TOOLSVERSION
#arch("i86Win32","VS2019", {
    $OS : $OS.WIN,
    $PLATFORM : $PLATFORM.i86,
    $VS_VERSION : "VS2019",
    $BASE_VERSION : "VS2017",
    $VS_NUMBER : "16",
    $SUPPORTS_JAVA : true,
    $PROJECT_FILE_EXT: ".vcxproj",
    $C_PUBSUB_PROJECT_TEMPLATE :"vcxproj.vm",
    $C_PUBSUB_FILTER_PROJECT_TEMPLATE :"vcxprojFilters.vm",
    $PUBSUB_SOLUTION_TEMPLATE : "projectVSSolution.vm",
    $DEFINES : ["WIN32"],
    "SOL_FORMAT_VERSION" : "12.00",
    "DEBUG_INFORMATION_FORMAT" : "EditAndContinue",
    "TARGET_MACHINE" : "MachineX86",
    "PLATFORM_TOOLSET": "<PlatformToolset>v142</PlatformToolset>",
	"TARGET_PLATFORM_VERSION" : "10.0",
    "FRAMEWORK_PROFILE": "",
    "PROJECT_TOOLSVERSION" : "16.0",
    $SUPPORTS_CPP11: true,
    $OPENSSL_LIBRARIES: ["$(NDDSHOME)\third_party\openssl-$opensslVersion\i86Win32VS2017\static_release\lib\libssl.lib", "$(NDDSHOME)\third_party\openssl-$opensslVersion\i86Win32VS2017\static_release\lib\libcrypto.lib", "crypt32.lib"],
    $OPENSSL3_LIBRARIES: ["$(NDDSHOME)\third_party\openssl-$openssl3Version\i86Win32VS2017\static_release\lib\libssl.lib", "$(NDDSHOME)\third_party\openssl-$openssl3Version\i86Win32VS2017\static_release\lib\libcrypto.lib", "crypt32.lib"]
})

#arch("i86INtime6.3","VS2019", {
    $OS : $OS.WIN,
    $PLATFORM : $PLATFORM.intime,
    $VS_VERSION : "VS2019",
    $BASE_VERSION : "VS2017",
    $VS_NUMBER : "16",
    $SUPPORTS_JAVA : false,
    $PROJECT_FILE_EXT: ".vcxproj",
    $C_PUBSUB_PROJECT_TEMPLATE :"intime_vcxproj.vm",
    $C_PUBSUB_FILTER_PROJECT_TEMPLATE :"vcxprojFilters.vm",
    $PUBSUB_SOLUTION_TEMPLATE : "projectVSSolution.vm",
    $DEFINES : ["__C99__", "__INTIME__", "RTI_INTIME", "__INTIME_CPP17", "_HAS_NAMESPACE ", "_SILENCE_ALL_CXX17_DEPRECATION_WARNINGS", "_CONSOLE"],
    "SOL_FORMAT_VERSION" : "12.00",
    "DEBUG_INFORMATION_FORMAT" : "Enabled",
    "TARGET_MACHINE" : "MachineX86",
    "PLATFORM_TOOLSET": "<PlatformToolset>v142</PlatformToolset>",
    "TARGET_PLATFORM_VERSION" : "10.0",
    "FRAMEWORK_PROFILE": "",
    "PROJECT_TOOLSVERSION" : "16.0",
    $SUPPORTS_CPP11: true,
    $HIDDEN: true
})

#arch("x64Win64","VS2019", {
    $OS : $OS.WIN,
    $PLATFORM : $PLATFORM.x64,
    $VS_VERSION : "VS2019",
    $BASE_VERSION : "VS2017",
    $VS_NUMBER : "16",
    $SUPPORTS_JAVA : true,
    $PROJECT_FILE_EXT: ".vcxproj",
    $C_PUBSUB_PROJECT_TEMPLATE :"vcxproj.vm",
    $C_PUBSUB_FILTER_PROJECT_TEMPLATE :"vcxprojFilters.vm",
    $PUBSUB_SOLUTION_TEMPLATE : "projectVSSolution.vm",
    $DEFINES : ["WIN32"],
    "SOL_FORMAT_VERSION" : "12.00",
    "DEBUG_INFORMATION_FORMAT" : "ProgramDatabase",
    "TARGET_MACHINE" : "MachineX64",
    "PLATFORM_TOOLSET": "<PlatformToolset>v142</PlatformToolset>",
	"TARGET_PLATFORM_VERSION" : "10.0",
    "FRAMEWORK_PROFILE": "",
    "PROJECT_TOOLSVERSION" : "16.0",
    $SUPPORTS_CPP11: true,
    $OPENSSL_LIBRARIES: ["$(NDDSHOME)\third_party\openssl-$opensslVersion\x64Win64VS2017\static_release\lib\libssl.lib", "$(NDDSHOME)\third_party\openssl-$opensslVersion\x64Win64VS2017\static_release\lib\libcrypto.lib", "crypt32.lib"],
    $OPENSSL3_LIBRARIES: ["$(NDDSHOME)\third_party\openssl-$openssl3Version\x64Win64VS2017\static_release\lib\libssl.lib", "$(NDDSHOME)\third_party\openssl-$openssl3Version\x64Win64VS2017\static_release\lib\libcrypto.lib", "crypt32.lib"]
})

#arch("x64Win64","VS2022", {
    $OS : $OS.WIN,
    $PLATFORM : $PLATFORM.x64,
    $VS_VERSION : "VS2022",
    $BASE_VERSION : "VS2017",
    $VS_NUMBER : "16",
    $SUPPORTS_JAVA : true,
    $PROJECT_FILE_EXT: ".vcxproj",
    $C_PUBSUB_PROJECT_TEMPLATE :"vcxproj.vm",
    $C_PUBSUB_FILTER_PROJECT_TEMPLATE :"vcxprojFilters.vm",
    $PUBSUB_SOLUTION_TEMPLATE : "projectVSSolution.vm",
    $DEFINES : ["WIN32"],
    "SOL_FORMAT_VERSION" : "12.00",
    "DEBUG_INFORMATION_FORMAT" : "ProgramDatabase",
    "TARGET_MACHINE" : "MachineX64",
    "PLATFORM_TOOLSET": "<PlatformToolset>v143</PlatformToolset>",
	"TARGET_PLATFORM_VERSION" : "10.0",
    "FRAMEWORK_PROFILE": "",
    "PROJECT_TOOLSVERSION" : "16.0",
    $SUPPORTS_CPP11: true,
    $OPENSSL_LIBRARIES: ["$(NDDSHOME)\third_party\openssl-$opensslVersion\x64Win64VS2017\static_release\lib\libssl.lib", "$(NDDSHOME)\third_party\openssl-$opensslVersion\x64Win64VS2017\static_release\lib\libcrypto.lib", "crypt32.lib"],
    $OPENSSL3_LIBRARIES: ["$(NDDSHOME)\third_party\openssl-$openssl3Version\x64Win64VS2017\static_release\lib\libssl.lib", "$(NDDSHOME)\third_party\openssl-$openssl3Version\x64Win64VS2017\static_release\lib\libcrypto.lib", "crypt32.lib"]
})

#arch("arm64Win64","VS2022", {
    $OS : $OS.WIN,
    $PLATFORM : $PLATFORM.arm64,
    $VS_VERSION : "VS2022",
    $VS_NUMBER : "17",
    $SUPPORTS_JAVA : true,
    $PROJECT_FILE_EXT: ".vcxproj",
    $C_PUBSUB_PROJECT_TEMPLATE :"vcxproj.vm",
    $C_PUBSUB_FILTER_PROJECT_TEMPLATE :"vcxprojFilters.vm",
    $PUBSUB_SOLUTION_TEMPLATE : "projectVSSolution.vm",
    $DEFINES : ["WIN32"],
    "SOL_FORMAT_VERSION" : "12.00",
    "DEBUG_INFORMATION_FORMAT" : "ProgramDatabase",
    "TARGET_MACHINE" : "machineARM64",
    "PLATFORM_TOOLSET": "<PlatformToolset>v143</PlatformToolset>",
	"TARGET_PLATFORM_VERSION" : "10.0",
    "FRAMEWORK_PROFILE": "",
    "PROJECT_TOOLSVERSION" : "17.0",
    $SUPPORTS_CPP11: true,
    $OPENSSL_LIBRARIES: ["$(NDDSHOME)\third_party\openssl-$opensslVersion\arm64Win64VS2022\static_release\lib\libssl.lib", "$(NDDSHOME)\third_party\openssl-$opensslVersion\arm64Win64VS2022\static_release\lib\libcrypto.lib", "crypt32.lib"],
    $OPENSSL3_LIBRARIES: ["$(NDDSHOME)\third_party\openssl-$openssl3Version\arm64Win64VS2022\static_release\lib\libssl.lib", "$(NDDSHOME)\third_party\openssl-$openssl3Version\arm64Win64VS2022\static_release\lib\libcrypto.lib", "crypt32.lib"]
})

#******************** DARWIN ********************#
#arch("x64Darwin15","clang7.0", {
    $OS : $OS.DARWIN,
    $PLATFORM : $PLATFORM.x64,
    $C_COMPILER : "clang",
    $C_COMPILER_FLAGS : ['m64'],
    $C_LINKER : "clang",
    $C_LINKER_FLAGS : ['m64'],
    $CXX_COMPILER : "clang++",
    $CXX_COMPILER_FLAGS : ['m64', 'Wno-return-type-c-linkage'],
    $CXX_LINKER : "clang++",
    $CXX_LINKER_FLAGS : ['m64'],
    $SYSLIBS : ['ldl', 'lm', 'lpthread', 'rdynamic'],
    $DEFINES : ['DRTI_UNIX', 'DRTI_DARWIN', 'DRTI_64BIT'],
    $SUPPORTS_JAVA : true,
    $CPP11_COMPILER_FLAGS : ["std=c++0x"],
    $SUPPORTS_CPP11: true,
    $HIDDEN : true
})

#arch("x64Darwin16","clang8.0", {
    $OS : $OS.DARWIN,
	$PLATFORM : $PLATFORM.x64,
	$C_COMPILER : "clang",
	$C_COMPILER_FLAGS : ['m64'],
	$C_LINKER : "clang",
	$C_LINKER_FLAGS : ['m64'],
	$CXX_COMPILER : "clang++",
	$CXX_COMPILER_FLAGS : ['m64', 'Wno-return-type-c-linkage'],
	$CXX_LINKER : "clang++",
	$CXX_LINKER_FLAGS : ['m64'],
	$SYSLIBS : ['ldl', 'lm', 'lpthread', 'rdynamic'],
	$DEFINES : ['DRTI_UNIX', 'DRTI_DARWIN', 'DRTI_64BIT'],
	$SUPPORTS_JAVA : true,
	$CPP11_COMPILER_FLAGS : ["std=c++0x"],
	$SUPPORTS_CPP11: true,
	"COPY_DYNAMIC_LIBS" : "true",
        $HIDDEN : true
})

#arch("x64Darwin17","clang9.0", {
    $OS : $OS.DARWIN,
	$PLATFORM : $PLATFORM.x64,
	$C_COMPILER : "clang",
	$C_COMPILER_FLAGS : ['m64'],
	$C_LINKER : "clang",
	$C_LINKER_FLAGS : ['m64'],
	$CXX_COMPILER : "clang++",
	$CXX_COMPILER_FLAGS : ['m64', 'Wno-return-type-c-linkage'],
	$CXX_LINKER : "clang++",
	$CXX_LINKER_FLAGS : ['m64'],
	$SYSLIBS : ['lm', 'lpthread', 'ldl', 'rdynamic'],
	$DEFINES : ['DRTI_UNIX', 'DRTI_DARWIN', 'DRTI_64BIT'],
	$SUPPORTS_JAVA : true,
	$CPP11_COMPILER_FLAGS : ["std=c++0x"],
	$SUPPORTS_CPP11: true,
	"COPY_DYNAMIC_LIBS" : "true",
	$HIDDEN : true
})

#arch("x64Darwin20","clang12.0", {
    $OS : $OS.DARWIN,
	$PLATFORM : $PLATFORM.x64,
	$C_COMPILER : "clang",
	$C_COMPILER_FLAGS : ['m64'],
	$C_LINKER : "clang",
	$C_LINKER_FLAGS : ['m64'],
	$CXX_COMPILER : "clang++",
	$CXX_COMPILER_FLAGS : ['m64', 'Wno-return-type-c-linkage'],
	$CXX_LINKER : "clang++",
	$CXX_LINKER_FLAGS : ['m64'],
	$SYSLIBS : ['lm', 'lpthread', 'ldl', 'rdynamic'],
	$DEFINES : ['DRTI_UNIX', 'DRTI_DARWIN', 'DRTI_64BIT'],
	$SUPPORTS_JAVA : true,
	$CPP11_COMPILER_FLAGS : ["std=c++11"],
	$SUPPORTS_CPP11: true,
	"COPY_DYNAMIC_LIBS" : "true"
})

#arch("arm64Darwin20","clang12.0", {
    $OS : $OS.DARWIN,
    $PLATFORM : $PLATFORM.armv8,
    $C_COMPILER : "clang",
    $C_COMPILER_FLAGS : [],
    $C_LINKER : "clang",
    $C_LINKER_FLAGS : [],
    $CXX_COMPILER : "clang++",
    $CXX_COMPILER_FLAGS : [],
    $CXX_LINKER : "clang++",
    $CXX_LINKER_FLAGS : [],
    $SYSLIBS : [],
    $DEFINES : ['DRTI_UNIX', 'DRTI_DARWIN'],
    $SUPPORTS_JAVA : true,
    $CPP11_COMPILER_FLAGS : ["std=c++11"],
    $SUPPORTS_CPP11: true,
    "COPY_DYNAMIC_LIBS" : "true"
})

#******************** QNX ********************#
#arch("i86QNX6.4.1","qcc_gpp", {
	$OS : $OS.QNX,
	$PLATFORM : $PLATFORM.i86,
	$C_COMPILER : "qcc",
	$C_COMPILER_FLAGS : ["V4.3.3,gcc_ntox86","Y_gpp","lang-c"],
	$C_LINKER : "qcc",
	$C_LINKER_FLAGS : ["V4.3.3,gcc_ntox86","Y_gpp","lang-c"],
	$CXX_COMPILER : "qcc",
	$CXX_COMPILER_FLAGS : ["V4.3.3,gcc_ntox86","Y_gpp","lang-c++"],
	$CXX_LINKER : "qcc",
	$CXX_LINKER_FLAGS : ["V4.3.3,gcc_ntox86","Y_gpp","lang-c++"],
	$SYSLIBS : ['lm', 'lsocket'],
	$DEFINES : ['DRTI_QNX'],
	$INCLUDES : [],
    $HIDDEN: true
})

#arch("i86QNX6.5","qcc_gpp4.4.2", {
	$OS : $OS.QNX,
	$PLATFORM : $PLATFORM.i86,
	$C_COMPILER : "qcc",
	$C_COMPILER_FLAGS : ["V4.4.2,gcc_ntox86","Y_gpp","lang-c"],
	$C_LINKER : "qcc",
	$C_LINKER_FLAGS : ["V4.4.2,gcc_ntox86","Y_gpp","lang-c"],
	$CXX_COMPILER : "qcc",
	$CXX_COMPILER_FLAGS : ["V4.4.2,gcc_ntox86","Y_gpp","lang-c++"],
	$CXX_LINKER : "qcc",
	$CXX_LINKER_FLAGS : ["V4.4.2,gcc_ntox86","Y_gpp","lang-c++"],
	$SYSLIBS : ['lm', 'lsocket'],
	$DEFINES : ['DRTI_QNX'],
	$INCLUDES : [],
    $HIDDEN: true
})

#arch("armv7aQNX6.5.0SP1","qcc_cpp4.4.2", {
	$OS : $OS.QNX,
	$PLATFORM : $PLATFORM.armv7a,
	$C_COMPILER : "qcc",
	$C_COMPILER_FLAGS : ["V4.4.2,gcc_ntoarmv7le_cpp","lang-c"],
	$C_LINKER : "qcc",
	$C_LINKER_FLAGS : ["V4.4.2,gcc_ntoarmv7le_cpp","lang-c"],
	$CXX_COMPILER : "qcc",
	$CXX_COMPILER_FLAGS : ["V4.4.2,gcc_ntoarmv7le_cpp","lang-c++"],
	$CXX_LINKER : "qcc",
	$CXX_LINKER_FLAGS : ["V4.4.2,gcc_ntoarmv7le_cpp","lang-c++"],
	$SYSLIBS : ['lm', 'lsocket'],
	$DEFINES : ['DRTI_QNX'],
	$INCLUDES : [],
    $HIDDEN:true
})

#arch("ppce500v2QNX6.5.0","qcc_cpp4.4.2", {
	$OS : $OS.QNX,
	$PLATFORM : $PLATFORM.ppcbe,
	$C_COMPILER : "qcc",
	$C_COMPILER_FLAGS : ["Vgcc/4.4.2,gcc_ntoppcbespe","lang-c","mcpu=8540","me500v2","mno-isel","mspe","mhard-float"],
	$C_LINKER : "qcc",
	$C_LINKER_FLAGS : ["Vgcc/4.4.2,gcc_ntoppcbespe","lang-c"],
	$CXX_COMPILER : "qcc",
	$CXX_COMPILER_FLAGS : ["Vgcc/4.4.2,gcc_ntoppcbespe","lang-c++","mcpu=8540","me500v2","mno-isel","mspe","mhard-float"],
	$CXX_LINKER : "qcc",
	$CXX_LINKER_FLAGS : ["Vgcc/4.4.2,gcc_ntoppcbespe","lang-c++"],
	$SYSLIBS : ['lm', 'lsocket'],
	$DEFINES : ['DRTI_QNX'],
	$INCLUDES : [],
    $HIDDEN: true
})

#arch("i86QNX6.6","qcc_cpp4.7.3", {
    $OS : $OS.QNX,
    $PLATFORM : $PLATFORM.i86,
    $C_COMPILER : "qcc",
    $C_COMPILER_FLAGS : ["Vgcc/4.7.3,gcc_ntox86","Y_cpp","lang-c"],
    $C_LINKER : "qcc",
    $C_LINKER_FLAGS : ["Vgcc/4.7.3,gcc_ntox86","Y_cpp","lang-c"],
    $CXX_COMPILER : "qcc",
    $CXX_COMPILER_FLAGS : ["Vgcc/4.7.3,gcc_ntox86","Y_cpp","lang-c++"],
    $CXX_LINKER : "qcc",
    $CXX_LINKER_FLAGS : ["Vgcc/4.7.3,gcc_ntox86","Y_cpp","lang-c++"],
    $SYSLIBS : ['lm', 'lsocket'],
    $DEFINES : ['DRTI_QNX'],
    $INCLUDES : [],
    $SUPPORTS_CPP11: true,
    $HIDDEN: true
})

#arch("armv7aQNX6.6.0","qcc_cpp4.7.3", {
        $OS : $OS.QNX,
        $PLATFORM : $PLATFORM.armv7a,
        $C_COMPILER : "qcc",
        $C_COMPILER_FLAGS : ["Vgcc/4.7.3,gcc_ntoarmv7le","Y_cpp","lang-c"],
        $C_LINKER : "qcc",
        $C_LINKER_FLAGS : ["Vgcc/4.7.3,gcc_ntoarmv7le","Y_cpp","lang-c"],
        $CXX_COMPILER : "qcc",
        $CXX_COMPILER_FLAGS : ["Vgcc/4.7.3,gcc_ntoarmv7le","Y_cpp","lang-c++"],
        $CXX_LINKER : "qcc",
        $CXX_LINKER_FLAGS : ["Vgcc/4.7.3,gcc_ntoarmv7le","Y_cpp","lang-c++"],
        $SYSLIBS : ['lm', 'lsocket'],
        $DEFINES : ['DRTI_QNX'],
        $INCLUDES : [],
        $SUPPORTS_CPP11: true,
        $HIDDEN: true
})

#arch("armv7aQNX7","qcc_cxx", {
        $OS : $OS.QNX,
        $C_COMPILER : "qcc",
        $C_COMPILER_FLAGS : ["Vgcc_ntoarmv7le","Y_cxx","lang-c"],
        $C_LINKER : "qcc",
        $C_LINKER_FLAGS : ["Vgcc_ntoarmv7le","Y_cxx","lang-c"],
        $CXX_COMPILER : "qcc",
        $CXX_COMPILER_FLAGS : ["Vgcc_ntoarmv7le","Y_cxx","lang-c++"],
        $CXX_LINKER : "qcc",
        $CXX_LINKER_FLAGS : ["Vgcc_ntoarmv7le","Y_cxx","lang-c++"],
        $SYSLIBS : ['lm', 'lsocket'],
        $DEFINES : ['DRTI_QNX'],
        $INCLUDES : [],
        $SUPPORTS_CPP11: true,
        $HIDDEN : true
})

#arch("armv7QNX7.0.0","qcc_cxx5.4.0", {
        $OS : $OS.QNX,
        $C_COMPILER : "qcc",
        $C_COMPILER_FLAGS : ["Vgcc/5.4.0,gcc_ntoarmv7le","Y_cxx","lang-c"],
        $C_LINKER : "qcc",
        $C_LINKER_FLAGS : ["Vgcc/5.4.0,gcc_ntoarmv7le","Y_cxx","lang-c"],
        $CXX_COMPILER : "qcc",
        $CXX_COMPILER_FLAGS : ["Vgcc/5.4.0,gcc_ntoarmv7le","Y_cxx","lang-c++"],
        $CXX_LINKER : "qcc",
        $CXX_LINKER_FLAGS : ["Vgcc/5.4.0,gcc_ntoarmv7le","Y_cxx","lang-c++"],
        $SYSLIBS : ['lm', 'lsocket'],
        $DEFINES : ['DRTI_QNX', 'DRTI_QNX7'],
        $INCLUDES : [],
        $SUPPORTS_CPP11: true
})

#arch("armv7QNX7.0.0","qcc_gpp5.4.0", {
        $OS : $OS.QNX,
        $C_COMPILER : "qcc",
        $C_COMPILER_FLAGS : ["Vgcc/5.4.0,gcc_ntoarmv7le","Y_gpp","lang-c"],
        $C_LINKER : "qcc",
        $C_LINKER_FLAGS : ["Vgcc/5.4.0,gcc_ntoarmv7le","Y_gpp","lang-c"],
        $CXX_COMPILER : "qcc",
        $CXX_COMPILER_FLAGS : ["Vgcc/5.4.0,gcc_ntoarmv7le","Y_gpp","lang-c++"],
        $CXX_LINKER : "qcc",
        $CXX_LINKER_FLAGS : ["Vgcc/5.4.0,gcc_ntoarmv7le","Y_gpp","lang-c++"],
        $SYSLIBS : ['lm', 'lsocket'],
        $DEFINES : ['DRTI_QNX', 'DRTI_QNX7'],
        $INCLUDES : [],
 $SUPPORTS_CPP11: true,
 $HIDDEN : true
})

#arch("armv8QNX7.0.0","qcc_cxx5.4.0", {
        $OS : $OS.QNX,
        $C_COMPILER : "qcc",
        $C_COMPILER_FLAGS : ["Vgcc/5.4.0,gcc_ntoaarch64le","Y_cxx","lang-c"],
        $C_LINKER : "qcc",
        $C_LINKER_FLAGS : ["Vgcc/5.4.0,gcc_ntoaarch64le","Y_cxx","lang-c"],
        $CXX_COMPILER : "qcc",
        $CXX_COMPILER_FLAGS : ["Vgcc/5.4.0,gcc_ntoaarch64le","Y_cxx","lang-c++"],
        $CXX_LINKER : "qcc",
        $CXX_LINKER_FLAGS : ["Vgcc/5.4.0,gcc_ntoaarch64le","Y_cxx","lang-c++"],
        $SYSLIBS : ['lm', 'lsocket'],
        $DEFINES : ['DRTI_QNX', 'DRTI_QNX7'],
        $INCLUDES : [],
        $SUPPORTS_CPP11: true,
        $WOLFSSL_LIBRARIES: ["$(NDDSHOME)/third_party/wolfssl-$wolfsslVersion/armv8QNX7.0.0qcc_cxx5.4.0/release/lib/libwolfssl.a"]
})

#arch("armv8QNX7.0.0","qcc_gpp5.4.0", {
        $OS : $OS.QNX,
        $C_COMPILER : "qcc",
        $C_COMPILER_FLAGS : ["Vgcc/5.4.0,gcc_ntoaarch64le","Y_gpp","lang-c"],
        $C_LINKER : "qcc",
        $C_LINKER_FLAGS : ["Vgcc/5.4.0,gcc_ntoaarch64le","Y_gpp","lang-c"],
        $CXX_COMPILER : "qcc",
        $CXX_COMPILER_FLAGS : ["Vgcc/5.4.0,gcc_ntoaarch64le","Y_gpp","lang-c++"],
        $CXX_LINKER : "qcc",
        $CXX_LINKER_FLAGS : ["Vgcc/5.4.0,gcc_ntoaarch64le","Y_gpp","lang-c++"],
        $SYSLIBS : ['lm', 'lsocket'],
        $DEFINES : ['DRTI_QNX', 'DRTI_QNX7'],
        $INCLUDES : [],
        $SUPPORTS_CPP11: true,
        $HIDDEN : true
})

#arch("armv7QNX7.1","qcc_cxx8.3.0", {
        $OS : $OS.QNX,
        $C_COMPILER : "qcc",
        $C_COMPILER_FLAGS : ["Vgcc/8.3.0,gcc_ntoarmv7le","Y_cxx"],
        $C_LINKER : "qcc",
        $C_LINKER_FLAGS : ["Vgcc/8.3.0,gcc_ntoarmv7le","Y_cxx"],
        $CXX_COMPILER : "qcc",
        $CXX_COMPILER_FLAGS : ["Vgcc/8.3.0,gcc_ntoarmv7le","Y_cxx","lang-c++"],
        $CXX_LINKER : "qcc",
        $CXX_LINKER_FLAGS : ["Vgcc/8.3.0,gcc_ntoarmv7le","Y_cxx","lang-c++"],
        $SYSLIBS : ['lm', 'lsocket'],
        $DEFINES : ['DRTI_QNX'],
        $INCLUDES : [],
        $SUPPORTS_CPP11: true,
        $WOLFSSL_LIBRARIES: ["$(NDDSHOME)/third_party/wolfssl-$wolfsslVersion/armv7QNX7qcc_cxx8.3.0/release/lib/libwolfssl.a"],
        $HIDDEN : true
})

#arch("armv7QNX7.1","qcc_gpp8.3.0", {
        $OS : $OS.QNX,
        $C_COMPILER : "qcc",
        $C_COMPILER_FLAGS : ["Vgcc/8.3.0,gcc_ntoarmv7le","Y_gpp"],
        $C_LINKER : "qcc",
        $C_LINKER_FLAGS : ["Vgcc/8.3.0,gcc_ntoarmv7le","Y_gpp"],
        $CXX_COMPILER : "qcc",
        $CXX_COMPILER_FLAGS : ["Vgcc/8.3.0,gcc_ntoarmv7le","Y_gpp","lang-c++"],
        $CXX_LINKER : "qcc",
        $CXX_LINKER_FLAGS : ["Vgcc/8.3.0,gcc_ntoarmv7le","Y_gpp","lang-c++"],
        $SYSLIBS : ['lm', 'lsocket'],
        $DEFINES : ['DRTI_QNX'],
        $INCLUDES : [],
        $SUPPORTS_CPP11: true,
        $HIDDEN: true
})

#arch("armv8QNX7.1","qcc_cxx8.3.0", {
        $OS : $OS.QNX,
        $C_COMPILER : "qcc",
        $C_COMPILER_FLAGS : ["Vgcc/8.3.0,gcc_ntoaarch64le","Y_cxx"],
        $C_LINKER : "qcc",
        $C_LINKER_FLAGS : ["Vgcc/8.3.0,gcc_ntoaarch64le","Y_cxx"],
        $CXX_COMPILER : "qcc",
        $CXX_COMPILER_FLAGS : ["Vgcc/8.3.0,gcc_ntoaarch64le","Y_cxx","lang-c++"],
        $CXX_LINKER : "qcc",
        $CXX_LINKER_FLAGS : ["Vgcc/8.3.0,gcc_ntoaarch64le","Y_cxx","lang-c++"],
        $SYSLIBS : ['lm', 'lsocket'],
        $DEFINES : ['DRTI_QNX'],
        $INCLUDES : [],
        $SUPPORTS_CPP11: true
})

#arch("armv8QOS2.2","qcc_cxx8.3.0", {
        $OS : $OS.QNX,
        $C_COMPILER : "qcc",
        $C_COMPILER_FLAGS : ["Vgcc/8.3.0,gcc_ntoaarch64le","Y_cxx"],
        $C_LINKER : "qcc",
        $C_LINKER_FLAGS : ["Vgcc/8.3.0,gcc_ntoaarch64le","Y_cxx"],
        $CXX_COMPILER : "qcc",
        $CXX_COMPILER_FLAGS : ["Vgcc/8.3.0,gcc_ntoaarch64le","Y_cxx","lang-c++"],
        $CXX_LINKER : "qcc",
        $CXX_LINKER_FLAGS : ["Vgcc/8.3.0,gcc_ntoaarch64le","Y_cxx","lang-c++"],
        $SYSLIBS : ['lm', 'lsocket'],
        $DEFINES : ['DRTI_QNX'],
        $INCLUDES : [],
        $SUPPORTS_CPP11: true,
        $WOLFSSL_LIBRARIES: ["$(NDDSHOME)/third_party/wolfssl-$wolfsslVersion/armv8QOS2.2qcc_cxx8.3.0/release/lib/libwolfssl.a"]
})

#arch("armv8QNX7.1","qcc_gpp8.3.0", {
        $OS : $OS.QNX,
        $C_COMPILER : "qcc",
        $C_COMPILER_FLAGS : ["Vgcc/8.3.0,gcc_ntoaarch64le","Y_gpp"],
        $C_LINKER : "qcc",
        $C_LINKER_FLAGS : ["Vgcc/8.3.0,gcc_ntoaarch64le","Y_gpp"],
        $CXX_COMPILER : "qcc",
        $CXX_COMPILER_FLAGS : ["Vgcc/8.3.0,gcc_ntoaarch64le","Y_gpp","lang-c++"],
        $CXX_LINKER : "qcc",
        $CXX_LINKER_FLAGS : ["Vgcc/8.3.0,gcc_ntoaarch64le","Y_gpp","lang-c++"],
        $SYSLIBS : ['lm', 'lsocket'],
        $DEFINES : ['DRTI_QNX'],
        $INCLUDES : [],
        $SUPPORTS_CPP11: true,
        $WOLFSSL_LIBRARIES: ["$(NDDSHOME)/third_party/wolfssl-$wolfsslVersion/armv8QNX7.1qcc_gpp8.3.0/release/lib/libwolfssl.a"]
})

#arch("x64QNX7.1","qcc_cxx8.3.0", {
        $OS : $OS.QNX,
        $C_COMPILER : "qcc",
        $C_COMPILER_FLAGS : ["Vgcc/8.3.0,gcc_ntox86_64","Y_cxx"],
        $C_LINKER : "qcc",
        $C_LINKER_FLAGS : ["Vgcc/8.3.0,gcc_ntox86_64","Y_cxx"],
        $CXX_COMPILER : "qcc",
        $CXX_COMPILER_FLAGS : ["Vgcc/8.3.0,gcc_ntox86_64","Y_cxx","lang-c++"],
        $CXX_LINKER : "qcc",
        $CXX_LINKER_FLAGS : ["Vgcc/8.3.0,gcc_ntox86_64","Y_cxx","lang-c++"],
        $SYSLIBS : ['lm', 'lsocket'],
        $DEFINES : ['DRTI_QNX'],
        $INCLUDES : [],
        $SUPPORTS_CPP11: true
})

#arch("x64QNX7.1","qcc_gpp8.3.0", {
        $OS : $OS.QNX,
        $C_COMPILER : "qcc",
        $C_COMPILER_FLAGS : ["Vgcc/8.3.0,gcc_ntox86_64","Y_gpp"],
        $C_LINKER : "qcc",
        $C_LINKER_FLAGS : ["Vgcc/8.3.0,gcc_ntox86_64","Y_gpp"],
        $CXX_COMPILER : "qcc",
        $CXX_COMPILER_FLAGS : ["Vgcc/8.3.0,gcc_ntox86_64","Y_gpp","lang-c++"],
        $CXX_LINKER : "qcc",
        $CXX_LINKER_FLAGS : ["Vgcc/8.3.0,gcc_ntox86_64","Y_gpp","lang-c++"],
        $SYSLIBS : ['lm', 'lsocket'],
        $DEFINES : ['DRTI_QNX'],
        $INCLUDES : [],
        $SUPPORTS_CPP11: true,
        $HIDDEN : true
})

#arch("i86QNX7.0.0","qcc_gpp5.4.0", {
        $OS : $OS.QNX,
        $C_COMPILER : "qcc",
        $C_COMPILER_FLAGS : ["Vgcc/5.4.0,gcc_ntox86","Y_gpp","lang-c", "m32", "march=i586", "mtune=generic"],
        $C_LINKER : "qcc",
        $C_LINKER_FLAGS : ["Vgcc/5.4.0,gcc_ntox86","Y_gpp","lang-c"],
        $CXX_COMPILER : "qcc",
        $CXX_COMPILER_FLAGS : ["Vgcc/5.4.0,gcc_ntox86","Y_gpp","lang-c++", "m32", "march=i586", "mtune=generic"],
        $CXX_LINKER : "qcc",
        $CXX_LINKER_FLAGS : ["Vgcc/5.4.0,gcc_ntox86","Y_gpp","lang-c++", "latomic"],
        $SYSLIBS : ['lm', 'lsocket'],
        $DEFINES : ['DRTI_QNX', 'DRTI_QNX7'],
        $INCLUDES : [],
	$SUPPORTS_CPP11: true,
    $HIDDEN: true
})

#arch("x64QNX7.0.0","qcc_cxx5.4.0", {
        $OS : $OS.QNX,
        $PLATFORM : $PLATFORM.x64,
        $C_COMPILER : "qcc",
        $C_COMPILER_FLAGS : ["Vgcc/5.4.0,gcc_ntox86_64","Y_cxx","lang-c"],
        $C_LINKER : "qcc",
        $C_LINKER_FLAGS : ["Vgcc/5.4.0,gcc_ntox86_64","Y_cxx","lang-c"],
        $CXX_COMPILER : "qcc",
        $CXX_COMPILER_FLAGS : ["Vgcc/5.4.0,gcc_ntox86_64","Y_cxx","lang-c++"],
        $CXX_LINKER : "qcc",
        $CXX_LINKER_FLAGS : ["Vgcc/5.4.0,gcc_ntox86_64","Y_cxx","lang-c++"],
        $SYSLIBS : ['lm', 'lsocket'],
        $DEFINES : ['DRTI_QNX', 'DRTI_QNX7'],
        $INCLUDES : [],
        $SUPPORTS_CPP11: true,
        $HIDDEN: true
})

#arch("x64QNX7.0.0","qcc_gpp5.4.0", {
        $OS : $OS.QNX,
        $PLATFORM : $PLATFORM.x64,
        $C_COMPILER : "qcc",
        $C_COMPILER_FLAGS : ["Vgcc/5.4.0,gcc_ntox86_64","Y_gpp","lang-c"],
        $C_LINKER : "qcc",
        $C_LINKER_FLAGS : ["Vgcc/5.4.0,gcc_ntox86_64","Y_gpp","lang-c"],
        $CXX_COMPILER : "qcc",
        $CXX_COMPILER_FLAGS : ["Vgcc/5.4.0,gcc_ntox86_64","Y_gpp","lang-c++"],
        $CXX_LINKER : "qcc",
        $CXX_LINKER_FLAGS : ["Vgcc/5.4.0,gcc_ntox86_64","Y_gpp","lang-c++"],
        $SYSLIBS : ['lm', 'lsocket'],
        $DEFINES : ['DRTI_QNX', 'DRTI_QNX7'],
        $INCLUDES : [],
	$SUPPORTS_CPP11: true
})


#******************** VXWORKS ********************#

#arch("ppc604Vx6.9.4","gcc4.3.3", {
	$OS : $OS.VXWORKS,
	$IS_RTP : false,
	$C_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccppc",
	$C_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ldppc",
	$C_LINKER_FLAGS : ['r'],
	$CXX_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccppc",
	$CXX_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ldppc",
	$CXX_LINKER_FLAGS : ['r'],
	$SYSLIBS : [],
	$DEFINES : ['DRTI_VXWORKS', 'mcpu=604', 'fno-builtin', 'mlongcall', 'DTOOL=gnu', 'DCPU=PPC32'],
	$INCLUDES : ['$(WIND_BASE)/target/h', '$(WIND_BASE)/target/h/wrn/coreip'],
    $MAKEFILE_TEMPLATE: "makefileCvxworks.vm",
    "NM_VAR"  : "NM =  $(WIND_BASE)/host/binutils/$(WIND_HOST_TYPE)/bin/nmppc",
    "MUNCH_VAR" : "MUNCH =$(WIND_HOME)/workbench-3.3/foundation/$(WIND_HOST_TYPE)/bin/wtxtcl.ex $(WIND_BASE)/host/resource/hutils/tcl/munch.tcl -c ppc",
    "MUNCHFLAGS_VAR" : "MUNCHFLAGS = -T $(WIND_BASE)/target/h/tool/gnu/ldscripts/link.OUT",
    $HIDDEN: true
})


#arch("ppc604Vx6.9.4","gcc4.3.3_rtp", {
	$OS : $OS.VXWORKS,
	$IS_RTP : true,
	$C_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccppc",
	$C_COMPILER_FLAGS : ['mrtp'],
	$C_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccppc",
	$C_LINKER_FLAGS : ['mrtp'],
	$CXX_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/c++ppc",
	$CXX_COMPILER_FLAGS : ['mrtp'],
	$CXX_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/c++ppc",
	$CXX_LINKER_FLAGS : ['mrtp'],
	$SYSLIBS : ['L$(WIND_BASE)/target/lib/usr/lib/ppc/PPC32/common', 'lstdc++'],
	$DEFINES : ['DRTI_VXWORKS', 'mcpu=604', 'fno-builtin', 'mlongcall', 'DTOOL=gnu', 'DCPU=PPC32'],
	$INCLUDES : ['$(WIND_BASE)/target/usr/h', '$(WIND_BASE)/target/usr/h/wrn/coreip'],
    $MAKEFILE_TEMPLATE: "makefileCvxworks.vm",
    $HIDDEN: true
})


#arch("ppce6500Vx6.9.4.6","diab5.9.1", {
	$OS : $OS.VXWORKS,
	$IS_RTP : false,
	$C_COMPILER : "$(WIND_HOME)/diab/5.9.1.0/LINUX386/bin/dcc",
	$C_LINKER : "$(WIND_HOME)/diab/5.9.1.0/LINUX386/bin/dld",
	$C_LINKER_FLAGS : ['r', 'tPPCE6500FV:vxworks69'],
	$CXX_COMPILER : "$(WIND_HOME)/diab/5.9.1.0/LINUX386/bin/dplus",
	$CXX_LINKER : "$(WIND_HOME)/diab/5.9.1.0/LINUX386/bin/dld",
	$CXX_LINKER_FLAGS : ['r', 'tPPCE6500FV:vxworks69'],
	$SYSLIBS : [],
	$DEFINES : ['DRTI_VXWORKS', 'DCPU=_VX_PPC85XX', 'DTOOL=diab', 'DTOOL_FAMILY=diab', 'D_WRS_KERNEL', 'DCPU_VARIANT=_e6500', 'Xkeywords=0x0fffffde', 'tPPCE6500FV:vxworks69', 'DVSB_CONFIG_FILE="$(WIND_BASE)/target/lib/h/config/vsbConfig.h"'],
	$INCLUDES : ['$(WIND_BASE)/target/h', '$(WIND_BASE)/target/h/wrn/coreip'],
    $MAKEFILE_TEMPLATE: "makefileCvxworks.vm",
    "NM_VAR"  : "NM =  $(WIND_BASE)/host/binutils/$(WIND_HOST_TYPE)/bin/nmppc",
    "MUNCH_VAR" : "MUNCH=$(WIND_FOUNDATION_PATH)/$(WIND_HOST_TYPE)/bin/wtxtcl.ex $(WIND_BASE)/host/resource/hutils/tcl/munch.tcl -c ppc",
    "MUNCHFLAGS_VAR" : "MUNCHFLAGS = ",
    "LINKER_DEBUG_FLAGS": "",
    $HIDDEN: true
})


#arch("ppce6500Vx6.9.4.6","diab5.9.1_rtp", {
	$OS : $OS.VXWORKS,
	$IS_RTP : true,
	$C_COMPILER : "$(WIND_HOME)/diab/5.9.1.0/LINUX386/bin/dcc",
	$C_COMPILER_FLAGS : ['mrtp'],
	$C_LINKER : "$(WIND_HOME)/diab/5.9.1.0/LINUX386/bin/dcc",
	$C_LINKER_FLAGS : ['tPPCEH:rtp', 'WDVSB_DIR=$(WIND_BASE)/target/lib', 'DCPU=_VX_PPC32', 'D_VX_TOOL_FAMILY=diab', 'D_VX_TOOL=diab'],
	$CXX_COMPILER : "$(WIND_HOME)/diab/5.9.1.0/LINUX386/bin/dplus",
	$CXX_COMPILER_FLAGS : ['mrtp'],
	$CXX_LINKER : "$(WIND_HOME)/diab/5.9.1.0/LINUX386/bin/dplus",
	$CXX_LINKER_FLAGS : ['tPPCEH:rtp', 'WDVSB_DIR=$(WIND_BASE)/target/lib'],
	$SYSLIBS : ['L$(WIND_BASE)/target/lib/usr/lib/ppc/PPC32/common', 'lstlstd'],
	$DEFINES : ['DRTI_VXWORKS', 'tPPCEH:rtp', 'DCPU=_VX_PPC32', 'D_VX_TOOL_FAMILY=diab', 'D_VX_TOOL=diab', 'WDVSB_DIR=$(WIND_BASE)/target/lib', 'Xstsw-slow', 'Xstmw-slow', 'DRTI_VXWORKS', 'DRTI_RTP'],
	$INCLUDES : ['$(WIND_BASE)/target/usr/h', '$(WIND_BASE)/target/usr/h/wrn/coreip'],
    $MAKEFILE_TEMPLATE: "makefileCvxworks.vm",
    $HIDDEN: true
})


#arch("ppce500v2Vx6.9","gcc4.3.3", {
	$OS : $OS.VXWORKS,
	$IS_RTP : false,
	$C_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccppc",
	$C_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ldppc",
	$C_LINKER_FLAGS : ['r'],
	$CXX_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccppc",
	$CXX_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ldppc",
	$CXX_LINKER_FLAGS : ['r'],
	$SYSLIBS : [],
	$DEFINES : ['DRTI_VXWORKS', 'fno-builtin', 'mlongcall', 'DTOOL=gnu', 'DCPU=PPC32', 'te500v2', 'mcpu=8548', 'mfloat-gprs=double', 'mspe=yes', 'mabi=spe'],
	$INCLUDES : ['$(WIND_BASE)/target/h', '$(WIND_BASE)/target/h/wrn/coreip'],
    $MAKEFILE_TEMPLATE: "makefileCvxworks.vm",
    "NM_VAR"  : "NM =  $(WIND_BASE)/host/binutils/$(WIND_HOST_TYPE)/bin/nmppc",
    "MUNCH_VAR" : "MUNCH =$(WIND_FOUNDATION_PATH)/$(WIND_HOST_TYPE)/bin/wtxtcl.ex $(WIND_BASE)/host/resource/hutils/tcl/munch.tcl -c ppc",
    "MUNCHFLAGS_VAR" : "MUNCHFLAGS = -T $(WIND_BASE)/target/h/tool/gnu/ldscripts/link.OUT",
    $HIDDEN: true
})


#arch("ppce500v2Vx6.9","gcc4.3.3_rtp", {
	$OS : $OS.VXWORKS,
	$IS_RTP : true,
	$C_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccppc",
	$C_COMPILER_FLAGS : ['mrtp'],
	$C_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccppc",
	$C_LINKER_FLAGS : ['mrtp'],
	$CXX_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/c++ppc",
	$CXX_COMPILER_FLAGS : ['mrtp'],
	$CXX_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/c++ppc",
	$CXX_LINKER_FLAGS : ['mrtp'],
	$SYSLIBS : ['L$(WIND_BASE)/target/lib/usr/lib/ppc/PPC32/e500v2common'],
	$DEFINES : ['DRTI_VXWORKS', 'fno-builtin', 'mlongcall', 'DTOOL=gnu', 'DCPU=PPC32', 'te500v2', 'mcpu=8548', 'mfloat-gprs=double', 'mspe=yes', 'mabi=spe'],
	$INCLUDES : ['$(WIND_BASE)/target/usr/h', '$(WIND_BASE)/target/usr/h/wrn/coreip'],
    $MAKEFILE_TEMPLATE: "makefileCvxworks.vm",
    $HIDDEN: true
})

#arch("ppce500v2Vx6.9.4","gcc4.3.3", {
	$OS : $OS.VXWORKS,
	$IS_RTP : false,
	$C_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccppc",
	$C_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ldppc",
	$C_LINKER_FLAGS : ['r'],
	$CXX_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccppc",
    $CXX_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ldppc",
	$CXX_LINKER_FLAGS : ['r'],
	$SYSLIBS : [],
	$DEFINES : ['DRTI_VXWORKS', 'fno-builtin', 'mlongcall', 'DTOOL=e500v2gnu', 'DTOOL_FAMILY=gnu', 'DCPU=PPC32', 'te500v2', 'mcpu=8548', 'mfloat-gprs=double', 'mspe=yes', 'mabi=spe'],
	$INCLUDES : ['$(WIND_BASE)/target/h', '$(WIND_BASE)/target/h/wrn/coreip'],
    $MAKEFILE_TEMPLATE: "makefileCvxworks.vm",
    "NM_VAR"  : "NM =  $(WIND_BASE)/host/binutils/$(WIND_HOST_TYPE)/bin/nmppc",
    "MUNCH_VAR" : "MUNCH =$(WIND_FOUNDATION_PATH)/$(WIND_HOST_TYPE)/bin/wtxtcl.ex $(WIND_BASE)/host/resource/hutils/tcl/munch.tcl -c ppc",
    "MUNCHFLAGS_VAR" : "MUNCHFLAGS = -T $(WIND_BASE)/target/h/tool/gnu/ldscripts/link.OUT",
    $HIDDEN: true
})

#arch("ppce500v2Vx6.9.4","gcc4.3.3_rtp", {
	$OS : $OS.VXWORKS,
	$IS_RTP : true,
	$C_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccppc",
	$C_COMPILER_FLAGS : ['mrtp'],
	$C_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccppc",
	$C_LINKER_FLAGS : ['mrtp'],
	$CXX_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/c++ppc",
	$CXX_COMPILER_FLAGS : ['mrtp'],
	$CXX_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/c++ppc",
	$CXX_LINKER_FLAGS : ['mrtp'],
	$SYSLIBS : ['L$(WIND_BASE)/target/lib/usr/lib/ppc/PPC32/e500v2common'],
	$DEFINES : ['DRTI_VXWORKS', 'fno-builtin', 'mlongcall', 'DTOOL=e500v2gnu', 'DTOOL_FAMILY=gnu', 'DCPU=PPC32', 'te500v2', 'mcpu=8548', 'mfloat-gprs=double', 'mspe=yes', 'mabi=spe'],
	$INCLUDES : ['$(WIND_BASE)/target/usr/h', '$(WIND_BASE)/target/usr/h/wrn/coreip'],
    $MAKEFILE_TEMPLATE: "makefileCvxworks.vm",
    $HIDDEN: true
})

#arch("armv7aVx6.9.4","gcc4.3.3", {
	$OS : $OS.VXWORKS,
	$IS_RTP : false,
	$C_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccarm",
	$C_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ldarm",
	$C_LINKER_FLAGS : ['r'],
	$CXX_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccarm",
    $CXX_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ldarm",
	$CXX_LINKER_FLAGS : ['r'],
	$SYSLIBS : ['L$(WIND_HOME)/gnu/4.3.3-vxworks-6.9/lib/gcc/arm-wrs-vxworks/4.3.3'],
	$DEFINES : ['DRTI_VXWORKS', 't7', 'mfpu=vfp', 'mfloat-abi=softfp', 'ansi', 'fno-zero-initialized-in-bss', 'fno-builtin', 'fvolatile', 'mlong-calls', 'mapcs-frame', 'DCPU=_VX_ARMARCH7', 'DTOOL_FAMILY=gnu', 'DTOOL=gnu', 'D_WRS_KERNEL', 'DARMEL', 'DARM_USE_VFP'],
	$INCLUDES : ['$(WIND_BASE)/target/h', '$(WIND_BASE)/target/h/wrn/coreip'],
	$MAKEFILE_TEMPLATE: "makefileCvxworks.vm",
    "NM_VAR"  : "NM = $(WIND_BASE)/host/binutils/$(WIND_HOST_TYPE)/bin/nmarm",
    "MUNCH_VAR" : "MUNCH = $(WIND_BASE)/host/$(WIND_HOST_TYPE)/bin/munch",
    "MUNCHFLAGS_VAR" : "MUNCHFLAGS = -T $(WIND_BASE)/target/h/tool/gnu/ldscripts/link.OUT",
    $HIDDEN: true
})

#arch("armv7aVx6.9.4","gcc4.3.3_rtp", {
	$OS : $OS.VXWORKS,
	$IS_RTP : true,
	$C_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccarm",
	$C_COMPILER_FLAGS : ['mrtp'],
	$C_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccarm",
	$C_LINKER_FLAGS : ['mrtp'],
	$CXX_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/c++arm",
	$CXX_COMPILER_FLAGS : ['mrtp'],
	$CXX_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/c++arm",
	$CXX_LINKER_FLAGS : ['mrtp'],
	$SYSLIBS : ['L$(WIND_HOME)/gnu/4.3.3-vxworks-6.9/lib/gcc/arm-wrs-vxworks/4.3.3/mrtp', 'L$(WIND_BASE)/target/lib/usr/lib/arm/ARMARCH7/common'],
	$DEFINES : ['DRTI_VXWORKS', 't7', 'mfpu=vfp', 'mfloat-abi=softfp', 'mrtp', 'fno-strict-aliasing', 'fno-zero-initialized-in-bss', 'fno-builtin', 'fvolatile', 'mlong-calls', 'mapcs-frame', 'D_VX_CPU=_VX_ARMARCH7', 'D_VX_DTOOL=gnu', 'D_VX_TOOL_FAMILY=gnu', 'DARMEL', 'DARM_USE_VFP'],
	$INCLUDES : ['$(WIND_BASE)/target/usr/h', '$(WIND_BASE)/target/usr/h/wrn/coreip'],
    $MAKEFILE_TEMPLATE: "makefileCvxworks.vm",
    $HIDDEN: true
})

#arch("armv7aVx6.9","gcc4.3.3", {
    $OS : $OS.VXWORKS,
    $IS_RTP : false,
    $C_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccarm",
    $C_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ldarm",
    $C_LINKER_FLAGS : ['r'],
    $CXX_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccarm",
    $CXX_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ldarm",
    $CXX_LINKER_FLAGS : ['r'],
    $SYSLIBS : ['L$(WIND_HOME)/gnu/4.3.3-vxworks-6.9/lib/gcc/arm-wrs-vxworks/4.3.3'],
    $DEFINES : ['DRTI_VXWORKS', 'fno-builtin', 'mlong-calls', 'DTOOL=gnu', 'DTOOL_FAMILY=gnu', 'DCPU=ARMARCH7', 't7', 'mfpu=vfp', 'mfloat-abi=softfp', 'ansi', 'fno-zero-initialized-in-bss', 'fvolatile', 'mapcs-frame'],
    $INCLUDES : ['$(WIND_BASE)/target/h', '$(WIND_BASE)/target/h/wrn/coreip'],
    $MAKEFILE_TEMPLATE: "makefileCvxworks.vm",
    "NM_VAR"  : "NM = $(WIND_BASE)/host/binutils/$(WIND_HOST_TYPE)/bin/nmarm",
    "MUNCH_VAR" : "MUNCH = $(WIND_FOUNDATION_PATH)/$(WIND_HOST_TYPE)/bin/wtxtcl.ex $(WIND_BASE)/host/resource/hutils/tcl/munch.tcl -c arm",
    "MUNCHFLAGS_VAR" : "MUNCHFLAGS = -T $(WIND_BASE)/target/h/tool/gnu/ldscripts/link.OUT",
    $HIDDEN: true
})


#arch("armv7aVx6.9","gcc4.3.3_rtp", {
        $OS : $OS.VXWORKS,
        $IS_RTP : true,
        $C_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccarm",
        $C_COMPILER_FLAGS : ['mrtp'],
        $C_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccarm",
        $C_LINKER_FLAGS : ['mrtp'],
        $CXX_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/c++arm",
        $CXX_COMPILER_FLAGS : ['mrtp'],
        $CXX_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/c++arm",
        $CXX_LINKER_FLAGS : ['mrtp'],
        $SYSLIBS : ['L$(WIND_HOME)/gnu/4.3.3-vxworks-6.9/lib/gcc/arm-wrs-vxworks/4.3.3/mrtp', 'L$(WIND_BASE)/target/lib/usr/lib/arm/ARMARCH7/common'],
        $DEFINES : ['t7', 'mfpu=vfp', 'mfloat-abi=softfp', 'ansi', 'fno-zero-initialized-in-bss', 'fno-builtin', 'fvolatile', 'mlong-calls', 'mapcs-frame', 'DTOOL_FAMILY=gnu', 'DTOOL=gnu', 'DCPU=ARMARCH7', 'DRTI_VXWORKS'],
        $INCLUDES : ['$(WIND_BASE)/target/usr/h', '$(WIND_BASE)/target/usr/h/wrn/coreip'],
    $MAKEFILE_TEMPLATE: "makefileCvxworks.vm",
    $HIDDEN: true
})

#arch("mips32r2sfbeVx6.9","gcc4.3.3", {
	$OS : $OS.VXWORKS,
	$IS_RTP : false,
	$C_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccmips",
	$C_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ldmips",
	$C_LINKER_FLAGS : ['r'],
	$CXX_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccmips",
	$CXX_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ldmips",
	$CXX_LINKER_FLAGS : ['r'],
	$SYSLIBS : [],
	$DEFINES : ['DRTI_VXWORKS', 'G 0', 'mno-branch-likely', 'mips32r2', 'mgp32', 'mfp32', 'EB', 'msoft-float', 'DTOOL=sfgnu', 'mlong-calls'],
	$INCLUDES : ['$(WIND_BASE)/target/h', '$(WIND_BASE)/target/h/wrn/coreip'],
    $MAKEFILE_TEMPLATE: "makefileCvxworks.vm",
    "NM_VAR"  : "NM = $(WIND_BASE)/host/binutils/$(WIND_HOST_TYPE)/bin/nmmips",
    "MUNCH_VAR" : "MUNCH = $(WIND_FOUNDATION_PATH)/$(WIND_HOST_TYPE)/bin/wtxtcl.ex $(WIND_BASE)/host/resource/hutils/tcl/munch.tcl -c mips",
    "MUNCHFLAGS_VAR" : "MUNCHFLAGS = -T $(WIND_BASE)/target/h/tool/gnu/ldscripts/link.OUT",
    $HIDDEN: true
})


#arch("mips32r2sfbeVx6.9","gcc4.3.3_rtp", {
	$OS : $OS.VXWORKS,
	$IS_RTP : true,
	$C_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccmips",
	$C_COMPILER_FLAGS : ['mrtp'],
	$C_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccmips",
	$C_LINKER_FLAGS : ['mrtp'],
	$CXX_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/c++mips",
	$CXX_COMPILER_FLAGS : ['mrtp'],
	$CXX_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/c++mips",
	$CXX_LINKER_FLAGS : ['mrtp'],
	$SYSLIBS : ['L$(WIND_BASE)/target/lib/usr/lib/mips/MIPSI32R2/sfcommon', 'lstdc++'],
	$DEFINES : ['DRTI_VXWORKS', 'G 0', 'mno-branch-likely', 'mips32r2', 'mgp32', 'mfp32', 'EB', 'msoft-float', 'DTOOL=sfgnu', 'mlong-calls'],
	$INCLUDES : ['$(WIND_BASE)/target/usr/h', '$(WIND_BASE)/target/usr/h/wrn/coreip'],
    $MAKEFILE_TEMPLATE: "makefileCvxworks.vm",
    $HIDDEN: true
})

#arch("pentium64Vx6.9","gcc4.3.3", {
	$OS : $OS.VXWORKS,
	$IS_RTP : false,
	$C_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccpentium",
        $C_COMPILER_FLAGS : ["m64"],
	$C_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ldpentium",
	$C_LINKER_FLAGS : ['m elf_x86_64_vxworks', 'r'],
	$CXX_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccpentium",
        $CXX_COMPILER_FLAGS : ["m64"],
	$CXX_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ldpentium",
	$CXX_LINKER_FLAGS : ['m elf_x86_64_vxworks', 'r'],
	$SYSLIBS : [],
	$DEFINES : ['DRTI_VXWORKS', 'march=x86-64', 'fno-builtin', 'mcmodel=large', 'mno-red-zone', 'DTOOL_FAMILY=gnu', 'DTOOL=gnu', 'DRTI_64BIT', 'D_WRS_KERNEL'],
    $INCLUDES : ['$(WIND_BASE)/target/h', '$(WIND_BASE)/target/h/wrn/coreip'],
    $MAKEFILE_TEMPLATE: "makefileCvxworks.vm",
    "NM_VAR"  : "NM = $(WIND_BASE)/host/binutils/$(WIND_HOST_TYPE)/bin/nmpentium",
    "MUNCH_VAR" : "MUNCH = $(WIND_FOUNDATION_PATH)/$(WIND_HOST_TYPE)/bin/wtxtcl.ex $(WIND_BASE)/host/resource/hutils/tcl/munch.tcl -c pentium",
    "MUNCHFLAGS_VAR" : "MUNCHFLAGS = -T $(WIND_BASE)/target/h/tool/gnu/ldscripts/link.OUT",
    $HIDDEN: true
})


#arch("pentium64Vx6.9","gcc4.3.3_rtp", {
	$OS : $OS.VXWORKS,
	$IS_RTP : true,
	$C_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccpentium",
	$C_COMPILER_FLAGS : ['mrtp'],
	$C_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccpentium",
	$C_LINKER_FLAGS : ['mrtp', 'm64'],
	$CXX_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/c++pentium",
	$CXX_COMPILER_FLAGS : ['mrtp'],
	$CXX_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/c++pentium",
	$CXX_LINKER_FLAGS : ['mrtp', 'm64'],
	$SYSLIBS : ['L$(WIND_BASE)/target/lib_lp64_smp/usr/lib/pentium/NEHALEM/common', 'lstdc++'],
	$DEFINES : ['m64', 'march=x86-64', 'mcmodel=small', 'DRTI_VXWORKS', 'fno-builtin', 'DTOOL_FAMILY=gnu', 'DTOOL=gnu', 'DRTI_64BIT', 'mrtp'],
    $INCLUDES : ['$(WIND_BASE)/target/usr/h', '$(WIND_BASE)/target/usr/h/wrn/coreip'],
    $MAKEFILE_TEMPLATE: "makefileCvxworks.vm",
    $HIDDEN: true
})

#arch("pentium64Vx7.0","gcc4.8.1", {
	$OS : $OS.VXWORKS,
	$IS_RTP : false,
	$C_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccpentium",
	$C_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ldpentium",
	$C_LINKER_FLAGS : ['r', 'm elf_x86_64_vxworks'],
	$CXX_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccpentium",
	$CXX_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccpentium",
	$CXX_LINKER_FLAGS : ['r', 'nostdlib', 'Wl,-X', 'Wl,-m', 'Wl,elf_x86_64_vxworks'],
	$SYSLIBS : [],
	$DEFINES : ['DRTI_VXWORKS', 'DRTI_64BIT', 'm64', 'march=atom', 'fno-builtin', 'DTOOL=gnu', 'DCPU=_VX_NEHALEM', 'DTOOL_FAMILY=gnu', 'D_WRS_KERNEL', 'nostdlib', 'D_VSB_CONFIG_FILE=\"$(vsbConfigFile)\"'],
    $INCLUDES : ['$(VSB_DIR)/share/h', '$(VSB_DIR)/krnl/h/public', '$(VSB_DIR)/krnl/h/system'],
    $MAKEFILE_TEMPLATE: "makefileCvxworks.vm",
	"VSB_DIR_VAR" : "# VSB_DIR = Specify your VSB directory here",
	"vsbConfigFile_VAR" : "vsbConfigFile = $(VSB_DIR)/h/config/vsbConfig.h",
    "NM_VAR"  : "NM = $(WIND_BASE)/host/binutils/$(WIND_HOST_TYPE)/bin/nmpentium",
    "MUNCH_VAR" : "MUNCH = $(WIND_FOUNDATION_PATH)/$(WIND_HOST_TYPE)/bin/tclsh $(WIND_BASE)/host/resource/hutils/tcl/munch.tcl -c pentium",
    "MUNCHFLAGS_VAR" : "MUNCHFLAGS = -T $(WIND_BASE)/build/tool/gnu_4_8_1/krnl/ldscripts/link.OUT",
    $HIDDEN: true
})

#arch("pentium64Vx7.0","gcc4.8.1_rtp", {
	$OS : $OS.VXWORKS,
	$IS_RTP : true,
	$C_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccpentium",
	$C_COMPILER_FLAGS : ['mrtp', 'march=atom', 'mpopcnt', 'm64', 'mcmodel=small', 'fno-builtin', 'fno-omit-frame-pointer', 'ansi', 'fno-strict-aliasing' , 'std=c99', 'isystem$(VSB_DIR)/usr/h/public', 'isystem$(VSB_DIR)/usr/h'],
	$C_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccpentium",
	$C_LINKER_FLAGS : ['mrtp', 'm64', 'Wl,--defsym,__wrs_rtp_base=0x200000'],
	$CXX_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/c++pentium",
	$CXX_COMPILER_FLAGS : ['mrtp', 'march=atom', 'mpopcnt', 'm64', 'mcmodel=small', 'fno-builtin', 'fno-omit-frame-pointer', 'ansi', 'fno-strict-aliasing', 'isystem$(VSB_DIR)/usr/h/public', 'isystem$(VSB_DIR)/usr/h'],
	$CXX_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/c++pentium",
	$CXX_LINKER_FLAGS : ['mrtp', 'm64', 'Wl,--defsym,__wrs_rtp_base=0x200000'],
	$SYSLIBS : ['L$(VSB_DIR)/usr/lib/common'],
	$DEFINES : ['DRTI_VXWORKS', 'DRTI_64BIT', 'D_C99', 'D_HAS_C9X', 'D_VX_CPU=_VX_NEHALEM', 'D_VX_TOOL_FAMILY=gnu', 'D_VX_TOOL=gnu', 'D_VSB_CONFIG_FILE=\"$(vsbConfigFile)\"'],
    $INCLUDES : ['$(VSB_DIR)/share/h'],
    $MAKEFILE_TEMPLATE: "makefileCvxworks.vm",
	"VSB_DIR_VAR" : "# VSB_DIR = Specify your VSB directory here",
	"vsbConfigFile_VAR" : "vsbConfigFile = $(VSB_DIR)/h/config/vsbConfig.h",
    $CPP11_COMPILER_FLAGS : ['mrtp', 'march=atom', 'mpopcnt', 'm64', 'mcmodel=small', 'fno-builtin', 'fno-omit-frame-pointer', 'ansi', 'fno-strict-aliasing', 'std=c++11', 'isystem$(VSB_DIR)/usr/h/public/c++11'],
    $SUPPORTS_CPP11 : true,
    "CPP11_SYSLIBS" : "-Wl,--start-group -Wl,-lsupc++ -Wl,-lstdc++11 -Wl,--end-group",
    "CPP_SYSLIBS" : "-Wl,--start-group -Wl,-lstdc++ -Wl,--end-group",
    $HIDDEN: true
})

#arch("pentiumVx7.0SR0540","gcc4.8.1.10", {
	$OS : $OS.VXWORKS,
	$IS_RTP : false,
	$C_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccpentium",
	$C_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ldpentium",
	$C_LINKER_FLAGS : ['r'],
	$CXX_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccpentium",
	$CXX_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccpentium",
	$CXX_LINKER_FLAGS : ['r', 'nostdlib', 'Wl,-X'],
	$SYSLIBS : [],
	$DEFINES : ['DRTI_VXWORKS', 'march=pentium4', 'fno-omit-frame-pointer', 'fno-builtin', 'DTOOL=gnu', 'DCPU=_VX_PENTIUM4', 'DTOOL_FAMILY=gnu', 'D_WRS_KERNEL', 'D_WRS_CONFIG_SMP', 'nostdlib', 'D_VSB_CONFIG_FILE=\"$(vsbConfigFile)\"'],
    $INCLUDES : ['$(VSB_DIR)/share/h', '$(VSB_DIR)/krnl/h/public', '$(VSB_DIR)/krnl/h/system'],
    $MAKEFILE_TEMPLATE: "makefileCvxworks.vm",
	"VSB_DIR_VAR" : "# VSB_DIR = Specify your VSB directory here",
	"vsbConfigFile_VAR" : "vsbConfigFile = $(VSB_DIR)/h/config/vsbConfig.h",
    "NM_VAR"  : "NM = $(WIND_BASE)/host/binutils/$(WIND_HOST_TYPE)/bin/nmpentium",
    "MUNCH_VAR" : "MUNCH = $(WIND_FOUNDATION_PATH)/$(WIND_HOST_TYPE)/bin/tclsh $(WIND_BASE)/build/mk/tcl/munch.tcl -c pentium",
    "MUNCHFLAGS_VAR" : "MUNCHFLAGS = -T $(WIND_BASE)/build/tool/gnu_4_8_1/krnl/ldscripts/link.OUT",
    $HIDDEN: true
})

#arch("ppc32Vx7SR0540","gcc4.8.1.10_rtp", {
	$OS : $OS.VXWORKS,
	$IS_RTP : true,
	$C_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccppc",
	$C_COMPILER_FLAGS : ['B$(WIND_HOME)/compilers/gnu-4.8.1.10/x86-linux2/libexec/gcc/powerpc-wrs-vxworks/4.8.1', 'mrtp', 'gdwarf-3', 'fno-builtin', 'fstrength-reduce', 'mstrict-align', 'mregnames', 'mhard-float', 'fno-implicit-fp', 'D_WRS_HARDWARE_FP', 'mrtp', 'fno-strict-aliasing', 'std=c99', 'fasm', 'fno-implicit-fp', 'Wall', 'MD', 'MP', 'isystem$(VSB_DIR)/usr/h/public', 'isystem$(VSB_DIR)/usr/h'],
	$C_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccppc",
	$C_LINKER_FLAGS : ['fno-builtin', 'fstrength-reduce', 'mstrict-align', 'mregnames', 'mhard-float', 'D_WRS_HARDWARE_FP', 'ansi', 'mrtp', 'fno-strict-aliasing', 'D_C99', 'D_HAS_C9X', 'std=c99', 'fasm', 'Wall ', 'MD', 'MP', 'Wl,--defsym,__wrs_rtp_base=0x80000000', 'Wl,-T$(WIND_BASE)/build/tool/gnu_4_8_1_8/usr/ldscript.vxe.ppc', 'Wl,-u,__tls__'],
	$CXX_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/c++ppc",
	$CXX_COMPILER_FLAGS : ['fno-builtin', 'fstrength-reduce', 'mstrict-align', 'mregnames', 'mhard-float', 'fno-implicit-fp', 'D_WRS_HARDWARE_FP', 'ansi', 'mrtp', 'fno-strict-aliasing', 'D_C99', 'D_HAS_C9X', 'fno-implicit-fp', 'Wall', 'MD', 'MP', 'isystem$(VSB_DIR)/usr/h/public', 'isystem$(VSB_DIR)/usr/h'],
	$CXX_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/c++ppc",
	$CXX_LINKER_FLAGS : ['fno-builtin', 'fstrength-reduce', 'mstrict-align', 'mregnames', 'mhard-float', 'D_WRS_HARDWARE_FP', 'ansi', 'mrtp', 'fno-strict-aliasing', 'D_C99', 'D_HAS_C9X', 'std=c++03', 'fasm', 'Wall ', 'MD', 'MP', 'D_VX_CPU=_VX_PPCE500MC', 'D_VX_TOOL_FAMILY=gnu', 'D_VX_TOOL=gnu', 'D_VSB_CONFIG_FILE=\"$(vsbConfigFile)', 'Wl,--defsym,__wrs_rtp_base=0x80000000', 'Wl,-T$(WIND_BASE)/build/tool/gnu_4_8_1_8/usr/ldscript.vxe.ppc', 'Wl,-u,__tls__'],
	$SYSLIBS : ['L$(VSB_DIR)/usr/lib/common'],
	$DEFINES : ['DRTI_VXWORKS', 'D_C99', 'D_HAS_C9X', 'D_VX_CPU=_VX_PPCE500MC', 'D_VX_TOOL_FAMILY=gnu', 'D_VX_TOOL=gnu', 'D_VSB_CONFIG_FILE=\"$(vsbConfigFile)\"'],
    $INCLUDES : ['$(VSB_DIR)/share/h'],
    $MAKEFILE_TEMPLATE: "makefileCvxworks.vm",
	"VSB_DIR_VAR" : "# VSB_DIR = Specify your VSB directory here",
	"vsbConfigFile_VAR" : "vsbConfigFile = $(VSB_DIR)/h/config/vsbConfig.h",
    $SUPPORTS_CPP11 : false,
    "CPP_SYSLIBS" : "-Wl,--start-group -Wl,-lstdc++ -Wl,--end-group",
    $HIDDEN : true
})

#arch("ppc32Vx7SR0541","gcc4.8.1.11_rtp", {
	$OS : $OS.VXWORKS,
	$IS_RTP : true,
	$C_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccppc",
	$C_COMPILER_FLAGS : ['mrtp', 'gdwarf-3', 'fno-builtin', 'fstrength-reduce', 'mstrict-align', 'mregnames', 'mhard-float', 'fno-implicit-fp', 'D_WRS_HARDWARE_FP', 'fno-strict-aliasing', 'std=c99', 'fasm', 'fno-implicit-fp', 'Wall', 'MD', 'MP', 'isystem$(VSB_DIR)/usr/h/public', 'isystem$(VSB_DIR)/usr/h'],
	$C_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccppc",
	$C_LINKER_FLAGS : ['fno-builtin', 'fstrength-reduce', 'mstrict-align', 'mregnames', 'mhard-float', 'D_WRS_HARDWARE_FP', 'ansi', 'mrtp', 'fno-strict-aliasing', 'D_C99', 'D_HAS_C9X', 'std=c99', 'fasm', 'Wall ', 'MD', 'MP', 'Wl,--defsym,__wrs_rtp_base=0x80000000', 'Wl,-T$(WIND_BASE)/build/tool/gnu_4_8_1_8/usr/ldscript.vxe.ppc', 'Wl,-u,__tls__'],
	$CXX_COMPILER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/c++ppc",
	$CXX_COMPILER_FLAGS : ['fno-builtin', 'fstrength-reduce', 'mstrict-align', 'mregnames', 'mhard-float', 'fno-implicit-fp', 'D_WRS_HARDWARE_FP', 'ansi', 'mrtp', 'fno-strict-aliasing', 'D_C99', 'D_HAS_C9X', 'fno-implicit-fp', 'Wall', 'MD', 'MP', 'isystem$(VSB_DIR)/usr/h/public', 'isystem$(VSB_DIR)/usr/h'],
	$CXX_LINKER : "$(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/c++ppc",
	$CXX_LINKER_FLAGS : ['fno-builtin', 'fstrength-reduce', 'mstrict-align', 'mregnames', 'mhard-float', 'D_WRS_HARDWARE_FP', 'ansi', 'mrtp', 'fno-strict-aliasing', 'D_C99', 'D_HAS_C9X', 'std=c++03', 'fasm', 'Wall ', 'MD', 'MP', 'D_VX_CPU=_VX_PPCE500MC', 'D_VX_TOOL_FAMILY=gnu', 'D_VX_TOOL=gnu', 'D_VSB_CONFIG_FILE=\"$(vsbConfigFile)', 'Wl,--defsym,__wrs_rtp_base=0x80000000', 'Wl,-T$(WIND_BASE)/build/tool/gnu_4_8_1_8/usr/ldscript.vxe.ppc', 'Wl,-u,__tls__'],
	$SYSLIBS : ['L$(VSB_DIR)/usr/lib/common'],
	$DEFINES : ['DRTI_VXWORKS', 'D_C99', 'D_HAS_C9X', 'D_VX_CPU=_VX_PPCE500MC', 'D_VX_TOOL_FAMILY=gnu', 'D_VX_TOOL=gnu', 'D_VSB_CONFIG_FILE=\"$(vsbConfigFile)\"'],
    $INCLUDES : ['$(VSB_DIR)/share/h'],
    $MAKEFILE_TEMPLATE: "makefileCvxworks.vm",
	"VSB_DIR_VAR" : "# VSB_DIR = Specify your VSB directory here",
	"vsbConfigFile_VAR" : "vsbConfigFile = $(VSB_DIR)/h/config/vsbConfig.h",
    $SUPPORTS_CPP11 : false,
    "CPP_SYSLIBS" : "-Wl,--start-group -Wl,-lstdc++ -Wl,--end-group",
    $HIDDEN: true
})

#arch("x64Vx7SR0630","llvm8.0.0.2", {
	$OS : $OS.VXWORKS,
	$IS_RTP : false,
	$C_COMPILER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/clang",
    $C_COMPILER_FLAGS : [ "-target=x86_64", "m64", "std=c11",
        "mcmodel=kernel", "mno-red-zone", "nostdlib","fno-omit-frame-pointer",
        "march=core2", "nostdlibinc", "nostdinc++","mno-implicit-float",
        "ftls-model=local-exec", "fno-builtin", "fno-strict-aliasing"],
	$C_LINKER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/ldpentium",
	$C_LINKER_FLAGS : ['r'],
	$CXX_COMPILER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/clang",
    $CXX_COMPILER_FLAGS : [ "-target=x86_64", "m64", "mcmodel=kernel",
        "mno-red-zone", "nostdlib","fno-omit-frame-pointer", "std=c++14",
        "march=core2", "nostdlibinc", "nostdinc++","mno-implicit-float",
        "ftls-model=local-exec", "fno-builtin", "fno-strict-aliasing",
        "Wno-return-type-c-linkage"],
	$CXX_LINKER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/ldpentium",
	$CXX_LINKER_FLAGS :  [ "r"],
	$SYSLIBS : [],
	$DEFINES : ['DRTI_CLANG','DRTI_VXWORKS', 'DRTI_64BIT',"D__vxworks", "D__VXWORKS__",
        "D__ELF__", "D_HAVE_TOOL_XTORS", "D_USE_INIT_ARRAY", "DCPU=_VX_CORE",
        "DTOOL_FAMILY=llvm", "DTOOL=llvm", "D_WRS_KERNEL", "D_WRS_VX_SMP",
        "D_WRS_CONFIG_SMP", 'D_VSB_CONFIG_FILE=\"$(VSB_DIR)/h/config/vsbConfig.h\"'],
    $INCLUDES : ['$(VSB_DIR)/share/h', '$(VSB_DIR)/krnl/h/public', '$(VSB_DIR)/krnl/h/system'],
    $MAKEFILE_TEMPLATE: "makefileCvxworks.vm",
	"VSB_DIR_VAR" : "# VSB_DIR = Specify your VSB directory here",
    "NM_VAR"  : "NM = $(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/nmpentium",
    "MUNCH_VAR" : "MUNCH = $(WIND_FOUNDATION_PATH)/$(WIND_HOST_TYPE)/bin/tclsh $(WIND_BASE)/build/mk/tcl/munch.tcl -c pentium -tags $(VSB_DIR)/krnl/tags/dkm.tags",
    "MUNCHFLAGS_VAR" : "MUNCHFLAGS = -m elf_x86_64 -X -r --eh-frame-hdr --force-group-allocation -T $(VSB_DIR)/krnl/ldscripts/dkm.ld"
})

#arch("x64Vx7SR0630","llvm8.0.0.2_rtp", {
	$OS : $OS.VXWORKS,
	$IS_RTP : true,
	$C_COMPILER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/clang",
	$C_COMPILER_FLAGS : [ '-target=x86_64', 'm64', 'mcmodel=small', 'std=c11',
        'fno-omit-frame-pointer', 'march=core2', 'fno-strict-aliasing',
        'fno-builtin', 'nostdlibinc', 'nostdinc++', 'fasm',
        'isystem$(VSB_DIR)/usr/h/public', 'isystem$(VSB_DIR)/usr/h'],
	$C_LINKER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/ldpentium",
	$C_LINKER_FLAGS : ['m elf_x86_64', '-defsym __wrs_rtp_base=0x200000',
        'u __wr_need_frame_add', 'u __tls__',
        'T$(VSB_DIR)/usr/ldscripts/rtp.ld $(VSB_DIR)/usr/lib/common/crt0.o'],
	$CXX_COMPILER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/clang",
	$CXX_COMPILER_FLAGS : [ '-target=x86_64', 'm64', 'mcmodel=small',
        'fno-omit-frame-pointer', 'march=core2', 'fno-strict-aliasing',
        'fno-builtin', 'nostdlibinc', 'nostdinc++', 'fasm', 'std=c++14',
        'isystem$(VSB_DIR)/usr/h/public', 'isystem$(VSB_DIR)/usr/h',
        'Wno-return-type-c-linkage'],
	$CXX_LINKER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/ldpentium",
	$CXX_LINKER_FLAGS : ['m elf_x86_64', '-defsym __wrs_rtp_base=0x200000',
        'u __wr_need_frame_add', 'u __tls__',
        'T$(VSB_DIR)/usr/ldscripts/rtp.ld $(VSB_DIR)/usr/lib/common/crt0.o'],
	$SYSLIBS : ['L$(VSB_DIR)/usr/lib/common', '-start-group', '-as-needed',
        'lssl', 'lcrypto', 'lc', 'lc_internal', 'lllvm', 'lcplusplus', 
        'lllvmcplus', 'ldl', 'lnet', '-end-group'],
	$DEFINES : ['DRTI_CLANG','DRTI_VXWORKS', 'DRTI_64BIT', 'D__vxworks', 'D__VXWORKS__',
        'D__RTP__', 'D__ELF__', 'D_USE_INIT_ARRAY', 'DCPU=_VX_CORE',
        'DTOOL_FAMILY=llvm', 'DTOOL=llvm', 'D_VSB_CONFIG_FILE=\"$(vsbConfigFile)\"'
    ],
    $INCLUDES : ['$(VSB_DIR)/share/h'],
    $MAKEFILE_TEMPLATE: "makefileCvxworks.vm",
	"VSB_DIR_VAR" : "# VSB_DIR = Specify your VSB directory here",
	"vsbConfigFile_VAR" : "vsbConfigFile = $(VSB_DIR)/h/config/vsbConfig.h",
    $CPP11_COMPILER_FLAGS : [],
    $SUPPORTS_CPP11 : true,
    "CPP11_SYSLIBS" : "",
    "CPP_SYSLIBS" : ""
})

#arch("armv8Vx7SR0660","llvm10.0.1.cortex-a53", {
    $OS : $OS.VXWORKS,
    $IS_RTP : false,
    $C_COMPILER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/clang",
    $C_COMPILER_FLAGS : [ "-target=arm64", "ffixed-x18", "std=c11",
        "nostdlibinc", "nostdinc++", "nostdlib" ,"ftls-model=local-exec", "fno-builtin",
        "fno-strict-aliasing", "mllvm", "two-entry-phi-node-folding-threshold=2",
	    "mno-implicit-float"],
    $C_LINKER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/ldarm64",
    $C_LINKER_FLAGS : ['X','r',"EL","eh-frame-hdr"],
    $CXX_COMPILER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/clang",
    $CXX_COMPILER_FLAGS : [ "-target=arm64", "ffixed-x18",
        "nostdlibinc", "nostdinc++", "nostdlib", "ftls-model=local-exec", "fno-builtin",
	    "fno-strict-aliasing", "mllvm", "two-entry-phi-node-folding-threshold=2", "mno-implicit-float",
        "Wno-return-type-c-linkage"],
    $CXX_LINKER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/ldarm64",
    $CXX_LINKER_FLAGS :  ['X','r',"EL","eh-frame-hdr"],
    $SYSLIBS : [],
    $DEFINES : ['DRTI_CLANG','DRTI_VXWORKS', 'DRTI_64BIT',"D__vxworks", "D__VXWORKS__",
        "D__ELF__", "D_HAVE_TOOL_XTORS", "D_USE_INIT_ARRAY", "DCPU=_VX_CORTEX_A53",
        "DTOOL_FAMILY=llvm", "DTOOL=llvm", "D_WRS_KERNEL", "D_WRS_VX_SMP", "DARMEL",
        "D_WRS_CONFIG_SMP", 'D_VSB_CONFIG_FILE=\"$(VSB_DIR)/h/config/vsbConfig.h\"'],
    $INCLUDES : ['$(VSB_DIR)/share/h', '$(VSB_DIR)/krnl/h/public', '$(VSB_DIR)/krnl/h/system'],
    $MAKEFILE_TEMPLATE: "makefileCvxworks.vm",
        "VSB_DIR_VAR" : "# VSB_DIR = Specify your VSB directory here",
    "NM_VAR"  : "NM = $(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/nmarm64",
    "MUNCH_VAR" : "MUNCH = $(WIND_FOUNDATION_PATH)/$(WIND_VX7_HOST_TYPE)/bin/tclsh $(WIND_BASE)/build/mk/tcl/munch.tcl -c arm64 -tags $(VSB_DIR)/krnl/tags/dkm.tags",
    "MUNCHFLAGS_VAR" : "MUNCHFLAGS = -X -r -EL --eh-frame-hdr --force-group-allocation -T $(VSB_DIR)/krnl/ldscripts/dkm.ld",
    $CPP11_COMPILER_FLAGS : ['std=c++14'],
    $SUPPORTS_CPP11 : true,
    "CPP11_SYSLIBS" : "",
    "CPP_SYSLIBS" : "",
    $HIDDEN: true
})

#arch("armv8Vx7SR0660","llvm10.0.1.cortex-a53_rtp", {
    $OS : $OS.VXWORKS,
    $IS_RTP : true,
    $C_COMPILER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/clang",
    $C_COMPILER_FLAGS : [ '-target=arm64', 'ffixed-x18', 'std=c11',
        'fno-strict-aliasing', 'fno-builtin', 'nostdlibinc', 'nostdinc++',
        'mllvm', 'two-entry-phi-node-folding-threshold=2',
        'isystem$(VSB_DIR)/usr/h/public', 'isystem$(VSB_DIR)/usr/h'],
    $C_LINKER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/ldarm64",
    $C_LINKER_FLAGS : ['m aarch64elf', '-defsym __wrs_rtp_base=0x80000000',
        'u __wr_need_frame_add', 'u __tls__',
        'T$(VSB_DIR)/usr/ldscripts/rtp.ld -EL $(VSB_DIR)/usr/lib/common/crt0.o'],
    $CXX_COMPILER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/clang",
    $CXX_COMPILER_FLAGS : [ '-target=arm64','ffixed-x18', 'ansi',
        'fno-strict-aliasing', 'fno-builtin', 'nostdlibinc', 'nostdinc++', 'fasm',
        'isystem$(VSB_DIR)/usr/h/public', 'isystem$(VSB_DIR)/usr/h', 'mllvm',
        'two-entry-phi-node-folding-threshold=2','std=c++14'],
    $CXX_LINKER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/ldarm64",
    $CXX_LINKER_FLAGS : ['m aarch64elf', '-defsym __wrs_rtp_base=0x80000000',
        'u __wr_need_frame_add', 'u __tls__',
        'T$(VSB_DIR)/usr/ldscripts/rtp.ld -EL $(VSB_DIR)/usr/lib/common/crt0.o'],
    $SYSLIBS : ['L$(VSB_DIR)/usr/lib/common', '-start-group', '-as-needed',
        'lssl', 'lcrypto', 'lc', 'lc_internal', 'lllvm', 'lcplusplus', 
        'lllvmcplus', 'ldl', 'lnet', '-end-group'],
    $DEFINES : ['DRTI_CLANG','DRTI_VXWORKS', 'DRTI_64BIT', 'D__vxworks', 'D__VXWORKS__',
        'D__RTP__', 'D__ELF__', 'D_USE_INIT_ARRAY', 'DCPU=_VX_CORTEX_A53', "DARMEL",
        'DTOOL_FAMILY=llvm', 'DTOOL=llvm', 'D_VSB_CONFIG_FILE=\"$(vsbConfigFile)\"'
    ],
    $INCLUDES : ['$(VSB_DIR)/share/h'],
    $MAKEFILE_TEMPLATE: "makefileCvxworks.vm",
    "VSB_DIR_VAR" : "# VSB_DIR = Specify your VSB directory here",
    "vsbConfigFile_VAR" : "vsbConfigFile = $(VSB_DIR)/h/config/vsbConfig.h",
    $CPP11_COMPILER_FLAGS : ['std=c++14'],
    $SUPPORTS_CPP11 : true,
    "CPP11_SYSLIBS" : "",
    "CPP_SYSLIBS" : "",
    $HIDDEN: true
})

#arch("x64Vx21.11","llvm12.0.1.1", {
    $OS : $OS.VXWORKS,
    $IS_RTP : false,
    $C_COMPILER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/clang",
    $C_COMPILER_FLAGS : [ "-target=x86_64-wrs-vxworks", "std=c11", "m64",
        "march=core2", "mcmodel=kernel", "mno-red-zone", "mno-implicit-float",
        "fno-builtin", "fno-omit-frame-pointer", "fno-strict-aliasing",
        "ftls-model=local-exec", "nostdlibinc", "nostdinc++"],
    $C_LINKER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/ldpentium",
    $C_LINKER_FLAGS : [ "m elf_x86_64", "X", "r", "-eh-frame-hdr",
        "-force-group-allocation"],
    $CXX_COMPILER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/clang++",
    $CXX_COMPILER_FLAGS : [ "-target=x86_64-wrs-vxworks", "std=c++11", "m64",
        "march=core2", "mcmodel=kernel", "mno-red-zone", "mno-implicit-float",
        "fno-builtin", "fno-omit-frame-pointer", "fno-strict-aliasing",
        "ftls-model=local-exec", "nostdlibinc", "nostdinc++"],
    $CXX_LINKER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/ldpentium",
    $CXX_LINKER_FLAGS : [ "m elf_x86_64", "X", "r", "-eh-frame-hdr",
        "-force-group-allocation"],
    $SYSLIBS : [],
    $DEFINES : ["DRTI_VXWORKS", "DRTI_CLANG", "DRTI_64BIT",
        "D__vxworks", "D__VXWORKS__", "D__ELF__", "D_HAVE_TOOL_XTORS",
        "D_USE_INIT_ARRAY", "DCPU=_VX_CORE", "D_VX_CPU=_VX_CORE",
        "DTOOL_FAMILY=llvm", "DTOOL=llvm", "D_WRS_KERNEL", "D_WRS_VX_SMP",
        "D_WRS_CONFIG_SMP", 'D_VSB_CONFIG_FILE=\"$(VSB_DIR)/h/config/vsbConfig.h\"'],
    $INCLUDES : ["$(VSB_DIR)/share/h", "$(VSB_DIR)/krnl/h/public", "$(VSB_DIR)/krnl/h/system"],
    $MAKEFILE_TEMPLATE: "makefileCvxworks.vm",
    "VSB_DIR_VAR" : "# VSB_DIR = Specify your VSB directory here",
    $CPP11_COMPILER_FLAGS : [],
    $SUPPORTS_CPP11 : true,
    "NM_VAR"  : "NM = $(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/nmpentium",
    "MUNCH_VAR" : "MUNCH = $(WIND_FOUNDATION_PATH)/$(WIND_VX7_HOST_TYPE)/bin/tclsh $(WIND_BUILD)/mk/tcl/munch.tcl -c pentium -tags $(VSB_DIR)/krnl/tags/dkm.tags",
    "MUNCHFLAGS_VAR" : "MUNCHFLAGS = -T $(VSB_DIR)/krnl/ldscripts/dkm.ld",
    $HIDDEN: true
})

#arch("x64Vx21.11","llvm12.0.1.1_rtp", {
    $OS : $OS.VXWORKS,
    $IS_RTP : true,
    $C_COMPILER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/clang",
    $C_COMPILER_FLAGS : [ "-target=x86_64-wrs-vxworks", "std=c11", "m64",
        "march=core2", "mcmodel=small", "fasm", "fno-builtin",
        "fno-omit-frame-pointer", "fno-strict-aliasing",
        "nostdlibinc", "nostdinc++",
        "isystem$(VSB_DIR)/usr/h/public", "isystem$(VSB_DIR)/usr/h"],
    $C_LINKER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/ldpentium",
    $C_LINKER_FLAGS : [ "m elf_x86_64", "z noseparate-code",
        "-defsym __wrs_rtp_base=0x200000", "u __tls__", "u __wr_need_frame_add",
        "T $(VSB_DIR)/usr/ldscripts/rtp.ld $(VSB_DIR)/usr/lib/common/crt0.o"],
    $CXX_COMPILER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/clang",
    $CXX_COMPILER_FLAGS : [ "-target=x86_64-wrs-vxworks", "std=c++11", "m64",
        "march=core2", "mcmodel=small", "fasm", "fno-builtin",
        "fno-omit-frame-pointer", "fno-strict-aliasing",
        "nostdlibinc", "nostdinc++",
        "isystem$(VSB_DIR)/usr/h/public", "isystem$(VSB_DIR)/usr/h",
        "Wno-return-type-c-linkage"],
    $CXX_LINKER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/ldpentium",
    $CXX_LINKER_FLAGS : ["m elf_x86_64", "z noseparate-code",
        "-defsym __wrs_rtp_base=0x200000", "u __tls__", "u __wr_need_frame_add",
        "T $(VSB_DIR)/usr/ldscripts/rtp.ld $(VSB_DIR)/usr/lib/common/crt0.o"],
    $SYSLIBS : ["L$(VSB_DIR)/usr/lib/common", "-start-group", "-as-needed",
        "lc", "lc_internal", "lllvm", "lcplusplus", "lllvmcplus", "ldl",
        "lnet", "-end-group"],
    $DEFINES : ["DRTI_VXWORKS", "DRTI_CLANG", "DRTI_64BIT",
        "D__vxworks", "D__VXWORKS__", "D__RTP__", "D__ELF__",
        "D_USE_INIT_ARRAY", "DCPU=_VX_CORE", "D_VX_CPU=_VX_CORE",
        "DTOOL_FAMILY=llvm", "DTOOL=llvm", 'D_VSB_CONFIG_FILE=\"$(vsbConfigFile)\"'
    ],
    $INCLUDES : ["$(VSB_DIR)/share/h"],
    $MAKEFILE_TEMPLATE: "makefileCvxworks.vm",
    "VSB_DIR_VAR" : "# VSB_DIR = Specify your VSB directory here",
    "vsbConfigFile_VAR" : "vsbConfigFile = $(VSB_DIR)/h/config/vsbConfig.h",
    $CPP11_COMPILER_FLAGS : [],
    $SUPPORTS_CPP11 : true,
    "CPP11_SYSLIBS" : "",
    "CPP_SYSLIBS" : "",
    $HIDDEN: true
})

#arch("ppc32Vx22.03","gcc8.3.0_rtp", {
    $OS : $OS.VXWORKS,
    $IS_RTP : true,
    $C_COMPILER : "$(WIND_GNU_PATH)/$(WIND_GNU_HOST_TYPE)/bin/ccppc",
    $C_COMPILER_FLAGS : [ "mabi=no-altivec", "mno-altivec",
        "mstrict-align", "msecure-plt", "fno-builtin", "fno-strict-aliasing",
        "isystem $(VSB_DIR)/usr/h/public"],
    $C_LINKER : "$(WIND_GNU_PATH)/$(WIND_GNU_HOST_TYPE)/bin/ldppc",
    $C_LINKER_FLAGS : ["m elf32ppc", "z noseparate-code", "u __tls__",
        "u __wr_need_frame_add", "-defsym __wrs_rtp_base=0x80000000",
        "T $(VSB_DIR)/usr/ldscripts/rtp.ld $(VSB_DIR)/usr/lib/common/crt0.o",
        "-secure-plt"],
    $CXX_COMPILER : "$(WIND_GNU_PATH)/$(WIND_GNU_HOST_TYPE)/bin/c++ppc",
    $CXX_COMPILER_FLAGS : [ "mabi=no-altivec", "mno-altivec",
        "mstrict-align", "msecure-plt", "fno-builtin", "fno-strict-aliasing",
        "isystem $(VSB_DIR)/usr/h/public"],
    $CXX_LINKER : "$(WIND_GNU_PATH)/$(WIND_GNU_HOST_TYPE)/bin/ldppc",
    $CXX_LINKER_FLAGS : ["m elf32ppc", "z noseparate-code", "u __tls__",
        "u __wr_need_frame_add", "-defsym __wrs_rtp_base=0x80000000",
        "T $(VSB_DIR)/usr/ldscripts/rtp.ld $(VSB_DIR)/usr/lib/common/crt0.o",
        "-secure-plt"],
    $SYSLIBS : ["L $(VSB_DIR)/usr/lib/common", "-as-needed", "-start-group",
        "lcplusplus", "lgnucplus", "lnet", "lc", "lc_internal", "ldl", "lgnu",
        "-end-group"],
    $DEFINES : ["DRTI_VXWORKS", "D__ELF__", "D__RTP__", "D__VXWORKS__",
        "D__ppc", "D__ppc__", "D__vxworks", "D_USE_INIT_ARRAY",
        'D_VSB_CONFIG_FILE=\"$(vsbConfigFile)\"', "D_VX_CPU=_VX_PPCE500MC",
        "DCPU=PPC32", "DPPC", "DTOOL=gnu", "DTOOL_FAMILY=gnu"],
    $INCLUDES : ["$(VSB_DIR)/share/h"],
    $MAKEFILE_TEMPLATE: "makefileCvxworks.vm",
    "VSB_DIR_VAR" : "# VSB_DIR = Specify your VSB directory here",
    "vsbConfigFile_VAR" : "vsbConfigFile = $(VSB_DIR)/h/config/vsbConfig.h",
    $CPP11_COMPILER_FLAGS : [],
    $SUPPORTS_CPP11 : true,
    "CPP11_SYSLIBS" : "",
    "CPP_SYSLIBS" : ""
})

#arch("x64Vx22.09","llvm13.0.1.3", {
    $OS : $OS.VXWORKS,
    $IS_RTP : false,
    $C_COMPILER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/clang",
    $C_COMPILER_FLAGS : [ "-target=x86_64-wrs-vxworks", "std=c11", "m64",
        "march=core2", "mcmodel=kernel", "mno-red-zone", "mno-implicit-float",
        "fno-builtin", "fno-omit-frame-pointer", "fno-strict-aliasing",
        "ftls-model=local-exec", "nostdlibinc", "nostdinc++"],
    $C_LINKER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/ldpentium",
    $C_LINKER_FLAGS : [ "m elf_x86_64", "X", "r", "-eh-frame-hdr",
        "-force-group-allocation"],
    $CXX_COMPILER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/clang++",
    $CXX_COMPILER_FLAGS : [ "-target=x86_64-wrs-vxworks", "m64",
        "march=core2", "mcmodel=kernel", "mno-red-zone", "mno-implicit-float",
        "fno-builtin", "fno-omit-frame-pointer", "fno-strict-aliasing",
        "ftls-model=local-exec", "nostdlibinc", "nostdinc++"],
    $CXX_LINKER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/ldpentium",
    $CXX_LINKER_FLAGS : [ "m elf_x86_64", "X", "r", "-eh-frame-hdr",
        "-force-group-allocation"],
    $SYSLIBS : [],
    $DEFINES : ["DRTI_VXWORKS", "DRTI_CLANG", "DRTI_64BIT",
        "D__vxworks", "D__VXWORKS__", "D__ELF__", "D_HAVE_TOOL_XTORS",
        "D_USE_INIT_ARRAY", "DCPU=_VX_CORE", "D_VX_CPU=_VX_CORE",
        "DTOOL_FAMILY=llvm", "DTOOL=llvm", "D_WRS_KERNEL", "D_WRS_VX_SMP",
        "D_WRS_CONFIG_SMP", 'D_VSB_CONFIG_FILE=\"$(VSB_DIR)/h/config/vsbConfig.h\"'],
    $INCLUDES : ["$(VSB_DIR)/share/h", "$(VSB_DIR)/krnl/h/public", "$(VSB_DIR)/krnl/h/system"],
    $MAKEFILE_TEMPLATE: "makefileCvxworks.vm",
    "VSB_DIR_VAR" : "# VSB_DIR = Specify your VSB directory here",
    $CPP11_COMPILER_FLAGS : ["std=c++14"],
    $SUPPORTS_CPP11 : true,
    "NM_VAR"  : "NM = $(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/nmpentium",
    "MUNCH_VAR" : "MUNCH = $(WIND_FOUNDATION_PATH)/$(WIND_VX7_HOST_TYPE)/bin/tclsh $(WIND_BUILD)/mk/tcl/munch.tcl -c pentium -tags $(VSB_DIR)/krnl/tags/dkm.tags",
    "MUNCHFLAGS_VAR" : "MUNCHFLAGS = -T $(VSB_DIR)/krnl/ldscripts/dkm.ld",
    $HIDDEN : true
})

#arch("x64Vx22.09","llvm13.0.1.3_rtp", {
    $OS : $OS.VXWORKS,
    $IS_RTP : true,
    $C_COMPILER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/clang",
    $C_COMPILER_FLAGS : [ "-target=x86_64-wrs-vxworks", "std=c11", "m64",
        "march=core2", "mcmodel=small", "fasm", "fno-builtin",
        "fno-omit-frame-pointer", "fno-strict-aliasing",
        "nostdlibinc", "nostdinc++",
        "isystem$(VSB_DIR)/usr/h/public", "isystem$(VSB_DIR)/usr/h"],
    $C_LINKER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/ldpentium",
    $C_LINKER_FLAGS : [ "m elf_x86_64", "z noseparate-code",
        "-defsym __wrs_rtp_base=0x200000", "u __tls__", "u __wr_need_frame_add",
        "T $(VSB_DIR)/usr/ldscripts/rtp.ld $(VSB_DIR)/usr/lib/common/crt0.o"],
    $CXX_COMPILER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/clang",
    $CXX_COMPILER_FLAGS : [ "-target=x86_64-wrs-vxworks", "m64",
        "march=core2", "mcmodel=small", "fasm", "fno-builtin",
        "fno-omit-frame-pointer", "fno-strict-aliasing",
        "nostdlibinc", "nostdinc++",
        "isystem$(VSB_DIR)/usr/h/public", "isystem$(VSB_DIR)/usr/h",
        "Wno-return-type-c-linkage"],
    $CXX_LINKER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/ldpentium",
    $CXX_LINKER_FLAGS : ["m elf_x86_64", "z noseparate-code",
        "-defsym __wrs_rtp_base=0x200000", "u __tls__", "u __wr_need_frame_add",
        "T $(VSB_DIR)/usr/ldscripts/rtp.ld $(VSB_DIR)/usr/lib/common/crt0.o"],
    $SYSLIBS : ["L$(VSB_DIR)/usr/lib/common", "-start-group", "-as-needed",
        "lssl", "lcrypto", "lc", "lc_internal", "lllvm", "lcplusplus", 
        "lllvmcplus", "ldl", "lnet", "-end-group"],
    $DEFINES : ["DRTI_VXWORKS", "DRTI_CLANG", "DRTI_64BIT",
        "D__vxworks", "D__VXWORKS__", "D__RTP__", "D__ELF__",
        "D_USE_INIT_ARRAY", "DCPU=_VX_CORE", "D_VX_CPU=_VX_CORE",
        "DTOOL_FAMILY=llvm", "DTOOL=llvm", 'D_VSB_CONFIG_FILE=\"$(vsbConfigFile)\"'],
    $INCLUDES : ["$(VSB_DIR)/share/h"],
    $MAKEFILE_TEMPLATE: "makefileCvxworks.vm",
    "VSB_DIR_VAR" : "# VSB_DIR = Specify your VSB directory here",
    "vsbConfigFile_VAR" : "vsbConfigFile = $(VSB_DIR)/h/config/vsbConfig.h",
    $CPP11_COMPILER_FLAGS : ["std=c++14"],
    $SUPPORTS_CPP11 : true,
    "CPP11_SYSLIBS" : "",
    "CPP_SYSLIBS" : "",
    $HIDDEN : true
})

#arch("x64Vx23.09","llvm16.0", {
    $OS : $OS.VXWORKS,
    $IS_RTP : false,
    $C_COMPILER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/clang",
    $C_COMPILER_FLAGS : [ "-target=x86_64-wrs-vxworks", "std=c11", "m64",
        "march=core2", "mcmodel=kernel", "mno-red-zone", "mno-implicit-float",
        "fno-builtin", "fno-omit-frame-pointer", "fno-strict-aliasing",
        "ftls-model=local-exec", "nostdlibinc", "nostdinc++"],
    $C_LINKER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/ldpentium",
    $C_LINKER_FLAGS : [ "m elf_x86_64", "X", "r", "-eh-frame-hdr",
        "-force-group-allocation"],
    $CXX_COMPILER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/clang++",
    $CXX_COMPILER_FLAGS : [ "-target=x86_64-wrs-vxworks", "m64",
        "march=core2", "mcmodel=kernel", "mno-red-zone", "mno-implicit-float",
        "fno-builtin", "fno-omit-frame-pointer", "fno-strict-aliasing",
        "ftls-model=local-exec", "nostdlibinc", "nostdinc++"],
    $CXX_LINKER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/ldpentium",
    $CXX_LINKER_FLAGS : [ "m elf_x86_64", "X", "r", "-eh-frame-hdr",
        "-force-group-allocation"],
    $SYSLIBS : [],
    $DEFINES : ["DRTI_VXWORKS", "DRTI_CLANG", "DRTI_64BIT",
        "D__vxworks", "D__VXWORKS__", "D__ELF__", "D_HAVE_TOOL_XTORS",
        "D_USE_INIT_ARRAY", "DCPU=_VX_CORE", "D_VX_CPU=_VX_CORE",
        "DTOOL_FAMILY=llvm", "DTOOL=llvm", "D_WRS_KERNEL", "D_WRS_VX_SMP",
        "D_WRS_CONFIG_SMP", 'D_VSB_CONFIG_FILE=\"$(VSB_DIR)/h/config/vsbConfig.h\"'],
    $INCLUDES : ["$(VSB_DIR)/share/h", "$(VSB_DIR)/krnl/h/public", "$(VSB_DIR)/krnl/h/system"],
    $MAKEFILE_TEMPLATE: "makefileCvxworks.vm",
    "VSB_DIR_VAR" : "# VSB_DIR = Specify your VSB directory here",
    $CPP11_COMPILER_FLAGS : ["std=c++14"],
    $SUPPORTS_CPP11 : true,
    "NM_VAR"  : "NM = $(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/nmpentium",
    "MUNCH_VAR" : "MUNCH = $(WIND_FOUNDATION_PATH)/$(WIND_VX7_HOST_TYPE)/bin/tclsh $(WIND_BUILD)/mk/tcl/munch.tcl -c pentium -tags $(VSB_DIR)/krnl/tags/dkm.tags",
    "MUNCHFLAGS_VAR" : "MUNCHFLAGS = -T $(VSB_DIR)/krnl/ldscripts/dkm.ld"
})

#arch("x64Vx23.09","llvm16.0_rtp", {
    $OS : $OS.VXWORKS,
    $IS_RTP : true,
    $C_COMPILER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/clang",
    $C_COMPILER_FLAGS : [ "-target=x86_64-wrs-vxworks", "std=c11", "m64",
        "march=core2", "mcmodel=small", "fasm", "fno-builtin",
        "fno-omit-frame-pointer", "fno-strict-aliasing",
        "nostdlibinc", "nostdinc++",
        "isystem$(VSB_DIR)/usr/h/public", "isystem$(VSB_DIR)/usr/h"],
    $C_LINKER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/ldpentium",
    $C_LINKER_FLAGS : [ "m elf_x86_64", "z noseparate-code", "z noexecstack",
        "-defsym __wrs_rtp_base=0x200000", "u __tls__", "u __wr_need_frame_add",
        "T $(VSB_DIR)/usr/ldscripts/rtp.ld $(VSB_DIR)/usr/lib/common/crt0.o"],
    $CXX_COMPILER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/clang",
    $CXX_COMPILER_FLAGS : [ "-target=x86_64-wrs-vxworks", "m64",
        "march=core2", "mcmodel=small", "fasm", "fno-builtin",
        "fno-omit-frame-pointer", "fno-strict-aliasing",
        "nostdlibinc", "nostdinc++",
        "isystem$(VSB_DIR)/usr/h/public", "isystem$(VSB_DIR)/usr/h",
        "Wno-return-type-c-linkage"],
    $CXX_LINKER : "$(WIND_LLVM_PATH)/$(WIND_LLVM_HOST_TYPE)/bin/ldpentium",
    $CXX_LINKER_FLAGS : ["m elf_x86_64", "z noseparate-code", "z noexecstack",
        "-defsym __wrs_rtp_base=0x200000", "u __tls__", "u __wr_need_frame_add",
        "T $(VSB_DIR)/usr/ldscripts/rtp.ld $(VSB_DIR)/usr/lib/common/crt0.o"],
    $SYSLIBS : ["L$(VSB_DIR)/usr/lib/common", "-start-group", "-as-needed",
        "lssl", "lcrypto", "lc", "lc_internal", "lllvm", "lcplusplus", 
        "lllvmcplus", "ldl", "lnet", "-end-group"],
    $DEFINES : ["DRTI_VXWORKS", "DRTI_CLANG", "DRTI_64BIT",
        "D__vxworks", "D__VXWORKS__", "D__RTP__", "D__ELF__",
        "D_USE_INIT_ARRAY", "DCPU=_VX_CORE", "D_VX_CPU=_VX_CORE",
        "DTOOL_FAMILY=llvm", "DTOOL=llvm", 'D_VSB_CONFIG_FILE=\"$(vsbConfigFile)\"'],
    $INCLUDES : ["$(VSB_DIR)/share/h"],
    $MAKEFILE_TEMPLATE: "makefileCvxworks.vm",
    "VSB_DIR_VAR" : "# VSB_DIR = Specify your VSB directory here",
    "vsbConfigFile_VAR" : "vsbConfigFile = $(VSB_DIR)/h/config/vsbConfig.h",
    $CPP11_COMPILER_FLAGS : ["std=c++14"],
    $SUPPORTS_CPP11 : true,
    "CPP11_SYSLIBS" : "",
    "CPP_SYSLIBS" : ""
})

#arch("sbc8641Vx653-2.3","gcc3.3.2", {
	$OS : $OS.VXWORKS,
	$IS_RTP : false,
	$NO_PROJECTFILES : true,
        $HIDDEN : true
})

#arch("ppce500v2Vx653-2.5","gcc4.3.3", {
        $OS : $OS.VXWORKS,
        $IS_RTP : false,
        $NO_PROJECTFILES : true,
        $HIDDEN : true
})

#******************** AIX ********************#
#arch("64p9AIX7.2","xlclang16.1", {
        $OS : $OS.AIX,
        $PLATFORM : $PLATFORM.x64,
        $C_COMPILER : "xlclang",
        $C_COMPILER_FLAGS : ['q64', 'g'],
        $C_LINKER : "xlclang",
        $C_LINKER_FLAGS : ['q64'],
        $CXX_COMPILER : "xlclang++",
        $CXX_COMPILER_FLAGS : ['q64', 'Wno-return-type-c-linkage'],
        $CXX_LINKER : "xlclang++",
        $CXX_LINKER_FLAGS : ['q64'],
        $SYSLIBS : ['lm', 'brtl'],
        $DEFINES : ['DRTI_UNIX', 'DRTI_AIX', 'DRTI_64BIT'],
        $INCLUDES : [],
        $SUPPORTS_JAVA : false
})


#******************** INTEGRITY ********************#


#arch("pentiumInty10.0.2.pcx86","", {
	$OS : $OS.INTEGRITY,
	$CPU_TYPE : "pentium",
	$MAJOR_VERSION : 10,
    $SHM_AREA_TEMPLATE : "shm_area.c.vm",
    $POSIX_SHM_MANAGER_GPJ_TEMPLATE : "posix_shm_manager.gpj.vm",
    $POSIX_SHM_MANAGER_INT_TEMPLATE : "posix_shm_manager.int.vm",
    $POSIX_SHM_MANAGER_LD_TEMPLATE : "v10.ld.vm",
    $POSIX_SHM_MANAGER_AS_GPJ_TEMPLATE : "posix_shm_manager_as1.gpj.vm",
    $PUBSUB_GPJ_TEMPLATE : "pubsub.gpj.vm",
    $PUBSUB_INT_TEMPLATE : "pubsub.int.vm",
    $PUBSUB_LD_TEMPLATE : "v10.ld.vm",
    $PUBSUB_AS_GPJ_TEMPLATE : "pubsub_as1.gpj.vm",
    $WORKSPACE_TEMPLATE : "workspace.v10.gpj.vm",
    "BSP": "pcx86",
    "C_intLIBS": ["libINTEGRITY.so","libc.so"],
    "Cxx_intLIBS": ["libscxx_e.so"],
    "primaryTarget" : "86_integrity.tgt",
    $C_COMPILER_FLAGS : [],
    $CXX_COMPILER_FLAGS : ["--exceptions"],
    $HIDDEN: true
})

#arch("p4080Inty11.devtree-fsl-e500mc.comp2013.5.4","", {
    $OS : $OS.INTEGRITY,
    $CPU_TYPE : "p4080",
    $MAJOR_VERSION : 11,
    $SHM_AREA_TEMPLATE : "shm_area.c.vm",
    $POSIX_SHM_MANAGER_GPJ_TEMPLATE : "posix_shm_manager.gpj.vm",
    $POSIX_SHM_MANAGER_INT_TEMPLATE : "posix_shm_manager.int.vm",
    $POSIX_SHM_MANAGER_LD_TEMPLATE : "v11_default.ld.vm",
    $POSIX_SHM_MANAGER_AS_GPJ_TEMPLATE : "posix_shm_manager_as1.gpj.vm",
    $PUBSUB_GPJ_TEMPLATE : "pubsub.gpj.vm",
    $PUBSUB_INT_TEMPLATE : "pubsub.int.vm",
    $PUBSUB_LD_TEMPLATE : "v11_default.ld.vm",
    $PUBSUB_AS_GPJ_TEMPLATE : "pubsub_as1.gpj.vm",
    $WORKSPACE_TEMPLATE : "workspace.v11.p4080.gpj.vm",
    "BSP": "devtree-fsl-e500mc",
    "C_intLIBS": [],
    "Cxx_intLIBS": [],
    "primaryTarget" : "ppc_integrity.tgt",
    $C_COMPILER_FLAGS : [],
    $CXX_COMPILER_FLAGS : ["--exceptions"],
    $HIDDEN: true
})

#arch("pentiumInty11.pcx86-smp","", {
	$OS : $OS.INTEGRITY,
	$CPU_TYPE : "pentium",
	$MAJOR_VERSION : 11,
    $SHM_AREA_TEMPLATE : "shm_area.c.vm",
    $POSIX_SHM_MANAGER_GPJ_TEMPLATE : "posix_shm_manager.gpj.vm",
    $POSIX_SHM_MANAGER_INT_TEMPLATE : "posix_shm_manager.int.vm",
    $POSIX_SHM_MANAGER_LD_TEMPLATE : "v11_default.ld.vm",
    $POSIX_SHM_MANAGER_AS_GPJ_TEMPLATE : "posix_shm_manager_as1.gpj.vm",
    $PUBSUB_GPJ_TEMPLATE : "pubsub.gpj.vm",
    $PUBSUB_INT_TEMPLATE : "pubsub.int.vm",
     $PUBSUB_LD_TEMPLATE : "v11_pentium.ld.vm",
    $PUBSUB_AS_GPJ_TEMPLATE : "pubsub_as1.gpj.vm",
    $WORKSPACE_TEMPLATE : "workspace.v11.pentium.gpj.vm",
    "BSP": "pcx86-smp",
    "C_intLIBS": [],
    "Cxx_intLIBS": [],
    "primaryTarget" : "86_integrity.tgt",
    $C_COMPILER_FLAGS : [],
    $CXX_COMPILER_FLAGS : ["--exceptions"],
    $HIDDEN: true
})

#arch("pentiumInty11.pcx64","", {
	$OS : $OS.INTEGRITY,
	$CPU_TYPE : "pentium",
	$MAJOR_VERSION : 11,
    $SHM_AREA_TEMPLATE : "shm_area.c.vm", 
    $POSIX_SHM_MANAGER_GPJ_TEMPLATE : "posix_shm_manager.gpj.vm",  
    $POSIX_SHM_MANAGER_INT_TEMPLATE : "posix_shm_manager.int.vm",
    $POSIX_SHM_MANAGER_LD_TEMPLATE : "v11_default.ld.vm",
    $POSIX_SHM_MANAGER_AS_GPJ_TEMPLATE : "posix_shm_manager_as1.gpj.vm",
    $PUBSUB_GPJ_TEMPLATE : "pubsub.gpj.vm",
    $PUBSUB_INT_TEMPLATE : "pubsub.int.vm",
    $PUBSUB_LD_TEMPLATE : "v11_pentium.ld.vm",
    $PUBSUB_AS_GPJ_TEMPLATE : "pubsub_as1.gpj.vm",
    $WORKSPACE_TEMPLATE : "workspace.v11.pentium.gpj.vm",
	$HIDDEN : false,
	"BSP": "pcx64",
	"C_intLIBS": [],
    "Cxx_intLIBS": [],
    "primaryTarget" : "86_integrity.tgt",
    $CXX_COMPILER_FLAGS : ["--exceptions", "--c++11"],
    $CPP11_COMPILER_FLAGS : ["--diag_suppress 1974,1518,236,76"], 
    $SUPPORTS_CPP11: true,
    $HIDDEN: true
})
