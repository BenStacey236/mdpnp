
${envMap.POUND_CHAR} (c) Copyright, Real-Time Innovations, 2022.  All rights reserved.
${envMap.POUND_CHAR} RTI grants Licensee a license to use, modify, compile, and create derivative
${envMap.POUND_CHAR} works of the software solely for use with RTI Connext DDS. Licensee may
${envMap.POUND_CHAR} redistribute copies of the software provided that all such copies are subject
${envMap.POUND_CHAR} to this license. The software is provided "as is", with no warranty of any
${envMap.POUND_CHAR} type, including any warranty for fitness for any purpose. RTI is under no
${envMap.POUND_CHAR} obligation to maintain or support the software. RTI shall not be liable for
${envMap.POUND_CHAR} any incidental or consequential damages arising out of the use or inability
${envMap.POUND_CHAR} to use the software.

import sys
import asyncio

import rti.connextdds as dds
import rti.asyncio

#*--*##if(!${constructMap.modulesName.isEmpty()})
from ${envMap.idlFileName} import ${constructMap.modulesName[0]}
#*--*##else
from ${envMap.idlFileName} import ${constructMap.nativeFQName}
#*--*##end

class ${constructMap.nativeCFQName}Publisher:

    class Listener(dds.NoOpDataWriterListener):
        def on_offered_deadline_missed(self, writer: dds.DataWriter, status: dds.OfferedDeadlineMissedStatus):
            print("Offered deadline missed")

        def on_offered_incompatible_qos(self, writer: dds.DataWriter, status: dds.OfferedIncompatibleQosStatus):
            print("Offered incompatible QoS")

        def on_publication_matched(self, writer: dds.DataWriter, status: dds.PublicationMatchedStatus):
            print("Publication matched")

        def on_liveliness_lost(self, writer: dds.DataWriter, status: dds.LivelinessLostStatus):
            print("Liveliness lost")

    def __init__(self, domain_id: int):
        ${envMap.POUND_CHAR} Start communicating in a domain. Usually there is one participant
        ${envMap.POUND_CHAR} per application. Load a QoS profile from USER_QOS_PROFILES.xml
        participant_qos = dds.QosProvider.default.participant_qos_from_profile(
            "${envMap.idlFileName}_Library::${envMap.idlFileName}_Profile")
        self.participant = dds.DomainParticipant(domain_id, participant_qos)

        ${envMap.POUND_CHAR} A Topic has a name and a datatype.
        topic = dds.Topic(self.participant, "${constructMap.topicName}", ${constructMap.nativeFQName})

        ${envMap.POUND_CHAR} Create a Publisher, loading QoS profile from USER_QOS_PROFILES.xml
        publisher_qos = dds.QosProvider.default.publisher_qos_from_profile(
            "${envMap.idlFileName}_Library::${envMap.idlFileName}_Profile")
        publisher = dds.Publisher(self.participant, publisher_qos)

        ${envMap.POUND_CHAR} Create a DataWriter, loading QoS profile from USER_QOS_PROFILES.xml,
        ${envMap.POUND_CHAR} and using a listener for events.
        writer_qos = dds.QosProvider.default.datawriter_qos_from_profile(
            "${envMap.idlFileName}_Library::${envMap.idlFileName}_Profile")
        listener = ${constructMap.nativeCFQName}Publisher.Listener()
        status_mask = dds.StatusMask.OFFERED_DEADLINE_MISSED \
            | dds.StatusMask.OFFERED_INCOMPATIBLE_QOS \
            | dds.StatusMask.PUBLICATION_MATCHED \
            | dds.StatusMask.LIVELINESS_LOST
        self.writer = dds.DataWriter(
            publisher,
            topic,
            writer_qos,
            listener,
            status_mask)


        self.samples_written = 0

    async def run(self, sample_count: int):
        sample = ${constructMap.nativeFQName}()
        while self.samples_written < sample_count:
            ${envMap.POUND_CHAR} Modify the data to be sent here
#*--*##foreach($member in $constructMap.memberFieldMapList)
#*----*##if($member.nativeTypeFQName.contains("int")
			&& !$member.arrayTotalSize 
			&& !$member.seqSize
			&& !$member.explicitDefaultValue
			&& !$member.resolvedTypeOptional
			&& !$member.isPointer) 
            sample.${member.name} = self.samples_written
#*----*##end
#*--*##end

            print(f"Writing ${constructMap.nativeFQName}, count {self.samples_written}")
            self.writer.write(sample)

            self.samples_written += 1
            await asyncio.sleep(.5)


if __name__ == "__main__":
    try:
        rti.asyncio.run(${constructMap.nativeCFQName}Publisher(0).run(sys.maxsize))
    except KeyboardInterrupt:
        pass
