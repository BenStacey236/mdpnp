##
##
## (c) Copyright, Real-Time Innovations, Inc. 2001.  All rights reserved.
## No duplications, whole or partial, manual or electronic, may be made
## without prior written permission.  Any such copies, or
## revisions thereof, must display this notice unaltered.
## This code contains trade secrets of Real-Time Innovations, Inc.
##
## modification history:
## ---------------------
## 2.3.x,17jun16,djs PLATFORMS-827 Add non-IDL functionality.
## 2.3,11aug15,eys PLATFORMS-664 Added Android 5 port using ndkr10e
## 2.3,13may15,gpc Added setting of NDDSHOME if undefined in environment
## 2.2,12aug14,vmg created
##========================================================================
#[[######################################################################]]#
#[[#]]# makefile_#buildArchitectureMakefileName()
#[[#]]#
#[[#]]# (c) Copyright, Real-Time Innovations, 2012.  All rights reserved.
#[[#]]# RTI grants Licensee a license to use, modify, compile, and create
#[[#]]# derivative works of the software solely for use with RTI Connext DDS.
#[[#]]# Licensee may redistribute copies of the software provided that all such
#[[#]]# copies are subject to this license. The software is provided "as is",
#[[#]]# with no warranty of any type, including any warranty for fitness for
#[[#]]# any purpose. RTI is under no obligation to maintain or support the
#[[#]]# software. RTI shall not be liable for any incidental or consequential
#[[#]]# damages arising out of the use or inability to use the software.
#[[#]]#
#[[#]]#
#[[#]]# This makefile was automatically generated by RTI Code Generator (rtiddsgen)
#[[#]]# version ${global.codegenVersion}.
#[[#]]#
#[[#]]#
#[[#]]# Note: This makefile is only meant to build our example applications and
#[[#]]#       may require alterations to build on your system.
#[[#]]#
#[[#]]# Make sure that javac and java are in your path.
#[[######################################################################]]#
#if(!$global.noDefaultNddshome)  
#[[#]]# If undefined in the environment default NDDSHOME to install dir
ifndef NDDSHOME
NDDSHOME := ${global.nddsHome}
endif
#end
TARGET_ARCH = ${global.architectureName}

ifndef DEBUG
#if(${global.libSuffix}=="d" || ${global.libSuffix}=="zd")
DEBUG=1
#else
DEBUG=0 
#end
endif

ifeq ($(DEBUG),1)
DEBUG_FLAGS += -g
DEBUG_SFX = d
else
DEBUG_FLAGS = 
DEBUG_SFX =
endif

JAVA_PATH = java
JAVAC_PATH = javac
JAR_PATH = jar

#if(${archMap.TARGET_ID}=="android-28")
#[[#]]# Android 9 uses by default tools version 28.0.3, which does not support Java 11.
#[[#]]# We specify source and target compatibility with Java 8.
JAVA8_FLAGS = -source 1.8 -target 1.8
#end

#[[#]]# replace TARGET_ID with the android platfrom that you want to use
#[[#]]# use "android list targets" to see the list of available targets
#if(${archMap.TARGET_ID}=="android-28")
## Android 9
TARGET_ID = ${archMap.TARGET_ID}
#elseif(${archMap.ANDROID_SDK_VERSION}=="31")
## Android 12
ifdef ANDROID_API
	TARGET_ID = android-#[[$]]#(ANDROID_API)
else
	TARGET_ID = android-${archMap.ANDROID_SDK_VERSION}
endif
#end
JAVA_SOURCES =#foreach($source in ${sourceFileList}) $source#end

CLASS_FILES  = #[[$]]#(JAVA_SOURCES:%.java=%.class)

JAR_FILE = ${exampleTypeClassPath}.jar

RTI_LIBS_JAR = #[[$]]#(NDDSHOME)/lib/java/nddsjava#[[$]]#(DEBUG_SFX).jar
RTI_ANDROID_JAR = #[[$]]#(ANDROID_SDK_ROOT)/platforms/#[[$]]#(TARGET_ID)/android.jar
RTI_CLASSPATH := #[[$]]#(RTI_LIBS_JAR):#[[$]]#(RTI_ANDROID_JAR)

ifeq (#[[$]]#(OS),Windows_NT)
CP_SEP = ;
else
CP_SEP = :
endif

%.class : %.java
	#[[$]]#(JAVAC_PATH) #if(${archMap.TARGET_ID}=="android-28") $(JAVA8_FLAGS) #end $(DEBUG_FLAGS) -classpath .#[[$]]#(CP_SEP)#[[$]]#(RTI_CLASSPATH) $<

${exampleType}.jar : #[[$]]#(CLASS_FILES)
	#[[$]]#(JAR_PATH) cfv #[[$]]#@ #[[$]]#(CLASS_FILES)
	#[[$]]#(JAR_PATH) ufv #[[$]]#@ ${exampleTypeClassPath}*.class
	#[[$]]#(JAR_PATH) ufv #[[$]]#@ ${exampleClassPath}Application*.class
 
all: #[[$]]#(CLASS_FILES) #[[$]]#(JAR_FILE)

#[[#]]#
#[[#]]# variables for android only
#[[#]]#

.SECONDARY:

PUB_PATH = objs/#[[$]]#(TARGET_ARCH)/publisher
SUB_PATH = objs/#[[$]]#(TARGET_ARCH)/subscriber

ANDROID_PACKAGE_PREFIX = ${typePackage}

ANDROID_PUSH_DEST = /data/data/${typePackage}

#[[#]]# if you have more than 1 device connected, you may need to define this
#[[#]]# use "adb devices" to check which devices are connected
#[[#]]#DEVICE = -s emulator-5554

ANDROID_ABI = ${archMap.ANDROID_ABI}

#if(${archMap.TARGET_ID}=="android-28")
ifeq (#[[$]]#(OS),Windows_NT)
ANDROID_CMD = android.bat
else
ANDROID_CMD = android
endif
#end

NDDSLIBS = libnddscore#[[$]]#(DEBUG_SFX).so libnddsc#[[$]]#(DEBUG_SFX).so libnddsjava#[[$]]#(DEBUG_SFX).so

#[[#]]#
#[[#]]# Convenient way to build a dex
#[[#]]#

#if(${archMap.TARGET_ID}=="android-28")
${exampleType}.dex : ${exampleType}.jar
	dx --dex --output=${exampleType}.dex ${exampleType}.jar #[[$]]#(RTI_LIBS_JAR)
#end

#[[#]]#
#[[#]]# commands to copy and run with dex in shell as root on the device
#[[#]]#

#[[#]]# copy all necessary files to shell
${exampleType}.pushdex :
	adb #[[$]]#(DEVICE) shell mkdir #[[$]]#(ANDROID_PUSH_DEST)
	adb #[[$]]#(DEVICE) push ${exampleType}.dex #[[$]]#(ANDROID_PUSH_DEST)/${exampleType}.dex
	#[[$]]#(foreach lib, #[[$]]#(NDDSLIBS), \
		adb #[[$]]#(DEVICE) push #[[$]]#(NDDSHOME)/lib/#[[$]]#(TARGET_ARCH)/#[[$]]#(lib) #[[$]]#(ANDROID_PUSH_DEST)/#[[$]]#(lib) ; )
#[[#]]# optionally you can also use USER_QOS_PROFILES.xml for our example
#[[#]]#	adb #[[$]]#(DEVICE) push USER_QOS_PROFILES.xml #[[$]]#(ANDROID_PUSH_DEST)/USER_QOS_PROFILES.xml

#[[#]]# example commands for running
#[[#]]# > adb #[[$]]#(DEVICE) shell
#[[#]]# > cd #[[$]]#(ANDROID_PUSH_DEST)
#[[#]]# > export LD_LIBRARY_PATH=#[[$]]#(ANDROID_PUSH_DEST)
#[[#]]# running publisher
#[[#]]# > dalvikvm -cp ${exampleType}.dex ${exampleTypeClassPackage}Publisher #[[$]]#(ARGS)
#[[#]]# running subscriber
#[[#]]# > dalvikvm -cp ${exampleType}.dex ${exampleTypeClassPackage}Subscriber #[[$]]#(ARGS)
#[[#]]# > exit

#[[#]]#
#[[#]]# Convenient way to create projects
#[[#]]#

#if(${archMap.TARGET_ID}=="android-28")
## Android 9
${exampleType}.projects : ${exampleType}Publisher/publisher \
		  	   ${exampleType}Subscriber/subscriber \
			   ${exampleType}Project.publisherlib \
			   ${exampleType}Project.subscriberlib ;

${exampleType}%/publisher ${exampleType}%/subscriber :
	#[[$]]#(ANDROID_CMD) update project -n ${exampleType}#[[$]]#* -t #[[$]]#(TARGET_ID) -p objs/#[[$]]#(TARGET_ARCH)/#[[$]]#(notdir #[[$]]#@)

${exampleType}Project.%lib :
	mkdir -p objs/#[[$]]#(TARGET_ARCH)/#[[$]]#*/libs
	cp #[[$]]#(RTI_LIBS_JAR) objs/#[[$]]#(TARGET_ARCH)/#[[$]]#*/libs/
	mkdir -p objs/#[[$]]#(TARGET_ARCH)/#[[$]]#*/libs/#[[$]]#(ANDROID_ABI)
	#[[$]]#(foreach lib, #[[$]]#(NDDSLIBS), cp #[[$]]#(NDDSHOME)/lib/#[[$]]#(TARGET_ARCH)/#[[$]]#(lib) objs/#[[$]]#(TARGET_ARCH)/#[[$]]#*/libs/#[[$]]#(ANDROID_ABI)/ ; )

#[[#]]#
#[[#]]# Convenient way to build apks
#[[#]]#

#[[#]]# this command will work only if cygwin is installed
${exampleType}.apks : ${exampleType}Project.publisherjar \
		       ${exampleType}Project.subscriberjar
	cd objs/#[[$]]#(TARGET_ARCH)/publisher; ant debug
	cd objs/#[[$]]#(TARGET_ARCH)/subscriber; ant debug

${exampleType}Project.%jar: objs/#[[$]]#(TARGET_ARCH)/%/libs/${exampleType}.jar ;

objs/#[[$]]#(TARGET_ARCH)/%/libs/${exampleType}.jar : ${exampleType}.jar
	cp #[[$]]#< #[[$]]#@

${exampleType}.installapks :
	adb #[[$]]#(DEVICE) install objs/#[[$]]#(TARGET_ARCH)/publisher/bin/${exampleType}Publisher-debug.apk
	adb #[[$]]#(DEVICE) install objs/#[[$]]#(TARGET_ARCH)/subscriber/bin/${exampleType}Subscriber-debug.apk

#else
## Android 12
${exampleType}.apks : ${exampleType}Project.publisherlib \
			   		      ${exampleType}Project.subscriberlib \
							  ${exampleType}Project.publisherjar \
							      ${exampleType}Project.subscriberjar;
	cd $(PUB_PATH) && #[[$]]#(GRADLE_HOME)/bin/gradle -Dhttps.protocols=TLSv1.2 dependencies
	cd $(PUB_PATH) && #[[$]]#(GRADLE_HOME)/bin/gradle -Dhttps.protocols=TLSv1.2 build
	cd $(SUB_PATH) && #[[$]]#(GRADLE_HOME)/bin/gradle -Dhttps.protocols=TLSv1.2 dependencies
	cd $(SUB_PATH) && #[[$]]#(GRADLE_HOME)/bin/gradle -Dhttps.protocols=TLSv1.2 build

${exampleType}Project.%lib :
	cp #[[$]]#(RTI_LIBS_JAR) objs/#[[$]]#(TARGET_ARCH)/#[[$]]#*/src/main/jniLibs/
	mkdir -p objs/#[[$]]#(TARGET_ARCH)/#[[$]]#*/src/main/jniLibs/#[[$]]#(ANDROID_ABI)
	#[[$]]#(foreach lib, #[[$]]#(NDDSLIBS), cp #[[$]]#(NDDSHOME)/lib/#[[$]]#(TARGET_ARCH)/#[[$]]#(lib) objs/#[[$]]#(TARGET_ARCH)/#[[$]]#*/src/main/jniLibs/#[[$]]#(ANDROID_ABI)/ ; )

#[[#]]#
#[[#]]# Convenient way to build apks
#[[#]]#

#[[#]]# this command will work only if cygwin is installed
${exampleType}.apks : ${exampleType}Project.publisherjar \
		       ${exampleType}Project.subscriberjar

${exampleType}Project.%jar: objs/#[[$]]#(TARGET_ARCH)/%/src/main/jniLibs/${exampleType}.jar ;

objs/#[[$]]#(TARGET_ARCH)/%/src/main/jniLibs/${exampleType}.jar : ${exampleType}.jar
	cp #[[$]]#< #[[$]]#@

#[[#]]#
#[[#]]# Installing apks to device
#[[#]]#

${exampleType}.installapks :
	adb #[[$]]#(DEVICE) install objs/#[[$]]#(TARGET_ARCH)/publisher/build/outputs/apk/debug/publisher-debug.apk
	adb #[[$]]#(DEVICE) install objs/#[[$]]#(TARGET_ARCH)/subscriber/build/outputs/apk/debug/subscriber-debug.apk
	
#[[#]]#
#[[#]]# Example to unistall apks on device
#[[#]]#

#end

${exampleType}.uninstallapks :
	adb #[[$]]#(DEVICE) uninstall #[[$]]#(ANDROID_PACKAGE_PREFIX).publisher
	adb #[[$]]#(DEVICE) uninstall #[[$]]#(ANDROID_PACKAGE_PREFIX).subscriber	

#[[#]]#
#[[#]]# Example to capture logs
#[[#]]#

logcat:
	adb $(DEVICE) logcat
	
logcat.clear:
	adb $(DEVICE) logcat -c
	      
