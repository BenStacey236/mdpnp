/*
 * (c) Copyright, Real-Time Innovations, 2012.  All rights reserved.
 * RTI grants Licensee a license to use, modify, compile, and create derivative
 * works of the software solely for use with RTI Connext DDS. Licensee may
 * redistribute copies of the software provided that all such copies are subject
 * to this license. The software is provided "as is", with no warranty of any
 * type, including any warranty for fitness for any purpose. RTI is under no
 * obligation to maintain or support the software. RTI shall not be liable for
 * any incidental or consequential damages arising out of the use or inability
 * to use the software.
 */

using System;
using System.Threading;
using System.Threading.Tasks;
using Rti.Dds.Core;
using Rti.Dds.Core.Status;
using Rti.Dds.Domain;
using Rti.Dds.Subscription;
using Rti.Dds.Topics;

#foreach($module in $constructMap.modulesName)
namespace $module
{
#end
/// <summary>
/// Example application that subscribes to ${constructMap.name}.
/// </summary>
public sealed class ${constructMap.name}Subscriber : I${constructMap.name}Application
{
    private readonly DomainParticipant participant;
    private readonly DataReader<${constructMap.name}> reader;

    private int samplesRead;

    /// <summary>
    /// Creates a DomainParticipant, Topic, Subscriber and DataReader<${constructMap.name}>.
    /// </summary>
    public ${constructMap.name}Subscriber(int domainId)
    {
        // Start communicating in a domain, usually one participant per application
        // Load QoS profile from USER_QOS_PROFILES.xml file
        DomainParticipantQos participantQos = QosProvider.Default.GetDomainParticipantQos("${envMap.idlFileName}_Library::${envMap.idlFileName}_Profile");
        participant = DomainParticipantFactory.Instance.CreateParticipant(domainId, participantQos);

        // A Topic has a name and a datatype.
        TopicQos topicQos = QosProvider.Default.GetTopicQos("${envMap.idlFileName}_Library::${envMap.idlFileName}_Profile");
        Topic<${constructMap.name}> topic = participant.CreateTopic<${constructMap.name}>("${constructMap.topicName}",topicQos);

        // Handle updates to the Topic status
        topic.InconsistentTopic += OnInconsistentTopic;

        // Create a subscriber, loading QoS profile from USER_QOS_PROFILES.xml.
        SubscriberQos subscriberQos = QosProvider.Default.GetSubscriberQos("${envMap.idlFileName}_Library::${envMap.idlFileName}_Profile");
        Subscriber subscriber = participant.CreateSubscriber(subscriberQos);

        // Create a DataReader, loading QoS profile from USER_QOS_PROFILES.xml.
        DataReaderQos readerQos = QosProvider.Default.GetDataReaderQos("${envMap.idlFileName}_Library::${envMap.idlFileName}_Profile");
        reader = subscriber.CreateDataReader(topic, readerQos);

        // Notify of all statuses through events, except for DataAvailable.
        // We read data asynchronously in Run().
        reader.RequestedDeadlineMissed += OnRequestedDeadlineMissed;
        reader.SampleRejected += OnSampleRejected;
        reader.SampleLost += OnSampleLost;
        reader.RequestedIncompatibleQos += OnRequestedIncompatibleQos;
        reader.SubscriptionMatched += OnSubscriptionMatched;
        reader.LivelinessChanged += OnLivelinessChanged;
    }

    /// <summary>
    /// Processes the data received by the DataReader.
    /// </summary>
    public async Task Run(int sampleCount, CancellationToken cancellationToken)
    {
        // TakeAsync provides an IAsyncEnumerable that returns new data
        // samples when they are available, awaiting as necessary. The
        // cancellation token allows stopping the loop.
        await foreach (var sample in reader
            .TakeAsync()
            .WithCancellation(cancellationToken))
        {
            if (sample.Info.ValidData)
            {
                samplesRead++;
                Console.WriteLine(sample.Data);

                if (samplesRead == sampleCount)
                {
                    break;
                }
            }
            else
            {
                Console.WriteLine($"Instance state changed to: {sample.Info.State.Instance}");
            }
        }
    }

    /// <summary>
    /// Disposes all DDS entities created by this application.
    /// </summary>
    public void Dispose() => participant.Dispose();

    private void OnInconsistentTopic(IAnyTopic topic, InconsistentTopicStatus status)
    {
        Console.WriteLine($"Inconsistent topic: {status}");
    }

    private void OnRequestedDeadlineMissed(AnyDataReader reader, RequestedDeadlineMissedStatus status)
    {
        Console.WriteLine($"Requested deadline missed: {status}");
    }

    private void OnSampleRejected(AnyDataReader reader, SampleRejectedStatus status)
    {
        Console.WriteLine($"Sample rejected: {status}");
    }

    private void OnSampleLost(AnyDataReader reader, SampleLostStatus status)
    {
        Console.WriteLine($"Sample lost: {status}");
    }

    private void OnRequestedIncompatibleQos(AnyDataReader reader, RequestedIncompatibleQosStatus status)
    {
        Console.WriteLine($"Requested incompatible QoS: {status}");
    }

    private void OnSubscriptionMatched(AnyDataReader reader, SubscriptionMatchedStatus status)
    {
        Console.WriteLine($"Subscription matched: {status}");
    }

    private void OnLivelinessChanged(AnyDataReader reader, LivelinessChangedStatus status)
    {
        Console.WriteLine($"Liveliness changed: {status}");
    }
}
#foreach($module in $constructMap.modulesName)
} // namespace $module
#end
