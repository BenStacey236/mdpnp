Welcome to your first Connext DDS example! 

This example was generated for architecture ${global.architectureName}, using the
data type ${exampleType} from ${global.idlFileName}.idl.
This example builds two applications, named ${global.idlFileName}${global.pubSuffix} and
${global.idlFileName}${global.subSuffix}.

#if($global.language.equals("C++98") || $global.language.equals("C++11"))
Simple Example
============
If you have generated this example using:
> rtiddsgen -example <arch> <idl>.idl
This is the simple example. This shows how to create a single DataWriter
and DataReader to send and receive data over Connext DDS.

Advanced Example
===============
If you have generated the advanced example using:
> rtiddsgen -example <arch> -exampleTemplate advanced <idl>.idl
The code is similar to the simple example, with a few key differences:
    - Both examples use WaitSets to block a thread until data is available.
      This is the safest way to get data, because it does not affect any
      middleware threads. In addition, the advanced example installs listeners
      on both the DataReader and DataWriter with callbacks that you can
      implement to accomplish a desired behavior. These listener callbacks
      are triggered for various events, such as discovering a matched
      DataWriter or DataReader. Listener callbacks are called back from
      a middleware thread, which you should not block.
    - The simple example sets is_default_qos=true in the XML file, and creates
      the DDS entities without specifying a profile. However, the advanced
      example sets is_default_qos=false, and specifies the QoS profile to use
      from the XML file when creating DDS entities. is_default_qos=false
      is recommended in a production application.

#end
#if($os.equals("lynx") || $os.equals("vxworks") ||$os.equals("qnx"))
To build and run this example for ${global.architectureName}, please see the
document RTI_ConnextDDS_CoreLibraries_GettingStarted_EmbeddedSystemsAddendum.pdf,
located in your Connext DDS installation directory, under:

${global.nddsHome}/doc/manuals/connext_dds_professional/getting_started_platforms/embedded_systems_addendum 
#elseif($os.equals("android"))
To build and run this example for ${global.architectureName}, please see the
document RTI_ConnextDDS_CoreLibraries_GettingStarted_AndroidSystemsAddendum.pdf, located
in your Connext DDS installation directory, under:

${global.nddsHome}/doc/manuals/connext_dds_professional/getting_started_platforms/android_systems_addendum

If you are using the Advanced generated example on Android, you will need to load
the USER_QOS_PROFILES.xml file containing the QoS settings. Follow the instructions
in section "Loading XML-Specified QoS Settings" in
RTI_ConnextDDS_CoreLibraries_GettingStarted_AndroidSystemsAddendum.pdf
#else
To Build this example:
======================
 
From your command shell, type:
#if($os.equals("aix"))
> gmake -f makefile_${global.idlFileName}_${global.architectureName}
#else
> make -f makefile_${global.idlFileName}_${global.architectureName}
#end
This command will build a release executable.
 
To build a debug version instead:
#if($os.equals("aix"))
> gmake -f makefile_${global.idlFileName}_${global.architectureName} DEBUG=1
#else
> make -f makefile_${global.idlFileName}_${global.architectureName} DEBUG=1
#end

To Modify the Data:
===================
To modify the data being sent, edit the ${global.idlFileName}${global.pubSuffix}${sourceFileExtension}
file where it says:
#if($global.language.equals("C") || $global.language.equals("C++98"))
/* Modify the instance to be written here */
#elseif($global.language.equals("C++11"))
// Modify the data to be written here
#end

To Run this Example:
====================
Make sure you are in the directory where the USER_QOS_PROFILES.xml file was
generated (the same directory this README file is in).
Run ${global.nddsHome}/resource/scripts/rtisetenv_${global.architectureName}.bash
to make sure the Connext libraries are in the path, especially if you opened
a new command prompt window.
Run the publishing or subscribing application by typing:
#if($global.language.equals("C++98") || $global.language.equals("C++11"))
> objs/${global.architectureName}/${global.idlFileName}${global.pubSuffix} -d <domain_id> -s <sample_count>
> objs/${global.architectureName}/${global.idlFileName}${global.subSuffix} -d <domain_id> -s <sample_count>
#else
> objs/${global.architectureName}/${global.idlFileName}${global.pubSuffix} <domain_id> <sample_count>
> objs/${global.architectureName}/${global.idlFileName}${global.subSuffix} <domain_id> <sample_count>
#end
#end