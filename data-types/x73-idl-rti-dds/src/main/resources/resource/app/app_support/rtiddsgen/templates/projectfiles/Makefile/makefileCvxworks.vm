##
##
## (c) Copyright, Real-Time Innovations, Inc. 2001.  All rights reserved.
## No duplications, whole or partial, manual or electronic, may be made
## without prior written permission.  Any such copies, or
## revisions thereof, must display this notice unaltered.
## This code contains trade secrets of Real-Time Innovations, Inc.
##
## modification history:
## ---------------------
## 2.3.x,17jun16,djs PLATFORMS-827 Add non-IDL functionality.
## 2.3,13may15,gpc Added setting of NDDSHOME if undefined in environment
##2.2,08apr15 ajm CODEGENII-437 Fixing VxWorks makefiles to support munching for the PSM
## 2.2,9jun14,vmg created
##========================================================================
#[[######################################################################]]#
#[[#]]# makefile_#buildArchitectureMakefileName()
#[[#]]#
#[[#]]# (c) Copyright, Real-Time Innovations, 2012.  All rights reserved.
#[[#]]# RTI grants Licensee a license to use, modify, compile, and create
#[[#]]# derivative works of the software solely for use with RTI Connext DDS.
#[[#]]# Licensee may redistribute copies of the software provided that all such
#[[#]]# copies are subject to this license. The software is provided "as is",
#[[#]]# with no warranty of any type, including any warranty for fitness for
#[[#]]# any purpose. RTI is under no obligation to maintain or support the
#[[#]]# software. RTI shall not be liable for any incidental or consequential
#[[#]]# damages arising out of the use or inability to use the software.
#[[#]]#
#[[#]]#
#[[#]]# This makefile was automatically generated by RTI Code Generator (rtiddsgen)
#[[#]]# version ${global.codegenVersion}.
#[[#]]#
#[[#]]#
#[[#]]# Note: This makefile is only meant to build our example applications and
#[[#]]#       may require alterations to build on your system.
#[[#]]#
#[[#]]# This makefile assumes that your build environment is already correctly
#[[#]]# configured. (For example, the correct version of your compiler and
#[[#]]# linker should be in your PATH.)
#[[######################################################################]]#

#if (${archMap.VSB_DIR_VAR})
${archMap.VSB_DIR_VAR}
#end
#if (${archMap.vsbConfigFile_VAR})
${archMap.vsbConfigFile_VAR}
#end

TARGET_ARCH = ${global.architectureName}

SOURCE_DIR = ${sourceDir}

ifndef COMPILER
COMPILER = ${compiler}
endif

COMPILER_FLAGS =#foreach($compilerFlag in ${compilerFlags}) -$compilerFlag#end

#if(!${archMap.IS_RTP})
#[[#]]# Munching requires C compilation
#if (${global.language.contains("C++")})
C_COMPILER = ${archMap.C_COMPILER}
C_COMPILER_FLAGS =#foreach($compilerFlag in ${archMap.C_COMPILER_FLAGS}) -$compilerFlag#end
#else
C_COMPILER = $(COMPILER)
C_COMPILER_FLAGS = $(COMPILER_FLAGS)
#end

#end

ifndef LINKER
LINKER = ${linker}
endif
LINKER_FLAGS =#foreach($linkerFlag in ${linkerFlags}) -$linkerFlag#end

SYSLIBS =#foreach($syslib in ${syslibs}) -$syslib#end

DEFINES =#foreach($define in ${defines}) -$define#end  #foreach($define in ${additionalDefines}) -$define#end

ifndef DEBUG
#if(${global.libSuffix}=="d" || ${global.libSuffix}=="zd")
DEBUG=1
#else
DEBUG=0 
#end
endif
ifeq ($(DEBUG),1)
COMPILER_FLAGS += -g -O0
#if (${archMap.LINKER_DEBUG_FLAGS})
LINKER_FLAGS += ${archMap.LINKER_DEBUG_FLAGS}
#else
LINKER_FLAGS += -g
#end
DEBUG_SFX = d
else
DEBUG_SFX = 
endif
 
ifndef SHAREDLIB
#if(${global.libSuffix}=="z" || ${global.libSuffix}=="zd")
SHAREDLIB=0
#else
SHAREDLIB=1
#end
endif

#if($exeFormat.equals("so"))
${archMap.NM_VAR}  
${archMap.MUNCH_VAR} 
${archMap.MUNCHFLAGS_VAR}
#end

#if($envPrefix)#[[#]]#export ENV_PREFIX = ${envPrefix}#end

INCLUDES = -I.#foreach($headersDirectory in ${headerDirectories}) -I$headersDirectory#end #if($includes.size()>0)\\#end

       #foreach($include in ${includes}) -I$include#end

ifeq ($(SHAREDLIB),1)
SHAREDLIB_SFX = 
#if(${archMap.IS_RTP})
#**
  If we are building with LLVM (clang compiler) we need to use different
  static/dynamic linker flags
*#
#if($compiler.toString().contains("clang"))
#if($global.architectureName.toString().contains("llvm8.") || $global.architectureName.toString().contains("llvm10."))
LINKER_FLAGS += -dum
#end
#else
#if($global.architectureName.toString().contains("Vx6") || $global.architectureName.toString().contains("Vx7"))
LINKER_FLAGS += -non-static
#end
#end ## compiler is clang **
LIBS = -L#[[$]]#(NDDSHOME)/lib/#[[$]]#(TARGET_ARCH) \
       #foreach($p in ${additionalLibraryPaths}) -L$p#end \
       #foreach($l in ${additionalRtiLibraries})-l${l}$(SHAREDLIB_SFX)$(DEBUG_SFX) #end \
       #foreach($coreLib in ${corelibs}) -l$coreLib$(SHAREDLIB_SFX)$(DEBUG_SFX)#end \
       #foreach($l in ${additionalLibraries}) -l${l}#end #[[$]]#(SYSLIBS) \
	   #if(${global.language.equals("C++11")} && ${archMap.CPP11_SYSLIBS}) ${archMap.CPP11_SYSLIBS} #else #if($global.language.equals("C++98") && ${archMap.CPP_SYSLIBS}) ${archMap.CPP_SYSLIBS} #end #end
#else
LIBS = #[[$]]#(SYSLIBS)
#end

else
SHAREDLIB_SFX = z
DEFINES += -DRTI_STATIC
#if($compiler.toString().contains("clang") || !($global.architectureName.toString().contains("Vx6") || $global.architectureName.toString().contains("Vx7")))
LINKER_FLAGS += -static
#end
LIBS = -L#[[$]]#(NDDSHOME)/lib/#[[$]]#(TARGET_ARCH) \
       #foreach($p in ${additionalLibraryPaths}) -L$p#end \
       #foreach($l in ${additionalRtiLibraries})-l${l}$(SHAREDLIB_SFX)$(DEBUG_SFX) #end \
       #foreach($coreLib in ${corelibs}) -l$coreLib$(SHAREDLIB_SFX)$(DEBUG_SFX)#end \
       #foreach($l in ${additionalLibraries}) -l${l} #end #[[$]]#(SYSLIBS) \
	   #if($global.language.equals("C++11") && ${archMap.CPP11_SYSLIBS}) ${archMap.CPP11_SYSLIBS} #else #if($global.language.equals("C++98") && ${archMap.CPP_SYSLIBS}) ${archMap.CPP_SYSLIBS} #end #end

endif

#if(${global.idlFileName})
CDRSOURCES    = ${global.idlFileName}.idl
#end
SOURCES =#foreach($sharedSource in ${sharedSources}) #[[$]]#(SOURCE_DIR)$sharedSource#end#foreach($s in ${additionalSourceFiles}) #[[$]]#(SOURCE_DIR)$s#end

COMMONSOURCES = $(notdir $(SOURCES))


#if(${global.idlFileName})
EXEC          = ${global.idlFileName}${global.subSuffix} ${global.idlFileName}${global.pubSuffix}
#else 
EXEC          = ${global.execNames}
#end
DIRECTORIES   = objs.dir objs/#[[$]]#(TARGET_ARCH).dir
COMMONOBJS    = #[[$]]#(COMMONSOURCES:%${sourceFileExtension}=objs/#[[$]]#(TARGET_ARCH)/%.o)

#[[#]]# We actually stick the objects in a sub directory to keep your directory clean.
#[[$]]#(TARGET_ARCH) : #[[$]]#(DIRECTORIES) #[[$]]#(COMMONOBJS) \
	#[[$]]#(EXEC:%=objs/#[[$]]#(TARGET_ARCH)/%.o) \
	#[[$]]#(EXEC:%=objs/#[[$]]#(TARGET_ARCH)/%.${exeFormat})

#if($exeFormat.equals("so"))
objs/#[[$]]#(TARGET_ARCH)/%.so : objs/#[[$]]#(TARGET_ARCH)/%.o
	$(LINKER)  $(LINKER_FLAGS) -o $(@:%.so=%.tmp.so) $(@:%.so=%.o) $(COMMONOBJS) $(LIBS)
	$(NM) $(@:%.so=%).tmp.so | $(MUNCH) > $(@:%.so=%.so)_ctordtor.c
	$(C_COMPILER) $(C_COMPILER_FLAGS) $(DEFINES) $(INCLUDES) -fdollars-in-identifiers -c $(@:%.so=%.so)_ctordtor.c \
	-o $(@:%.so=%.so)_ctordtor.o
	$(LINKER)  $(LINKER_FLAGS) -nostdlib $(MUNCHFLAGS) -o $@ $(@:%.so=%.tmp.so) $(@:%.so=%.so)_ctordtor.o

EXEC_PUBSUB   = ${global.idlFileName}_pubsub

pubsub: #[[$]]#(DIRECTORIES) objs/#[[$]]#(TARGET_ARCH)/#[[$]]#(EXEC_PUBSUB).so

objs/#[[$]]#(TARGET_ARCH)/#[[$]]#(EXEC_PUBSUB).so : #[[$]]#(EXEC:%=objs/#[[$]]#(TARGET_ARCH)/%.o) #[[$]]#(COMMONOBJS)
	$(LINKER)  $(LINKER_FLAGS) -o $(@:%.so=%.tmp.so) $? $(LIBS)
	$(NM) $(@:%.so=%).tmp.so | $(MUNCH) > $(@:%.so=%.so)_ctordtor.c
	$(C_COMPILER) $(C_COMPILER_FLAGS) $(DEFINES) $(INCLUDES) -fdollars-in-identifiers -c $(@:%.so=%.so)_ctordtor.c \
	-o $(@:%.so=%.so)_ctordtor.o
	$(LINKER)  $(LINKER_FLAGS) -nostdlib $(MUNCHFLAGS) -o $@ $(@:%.so=%.tmp.so) $(@:%.so=%.so)_ctordtor.o

#else
objs/#[[$]]#(TARGET_ARCH)/%.${exeFormat} : objs/#[[$]]#(TARGET_ARCH)/%.o
	#[[$]]#(LINKER) #[[$]]#(LINKER_FLAGS) -o #[[$]]#@ #[[$]]#(@:%.${exeFormat}=%.o) #[[$]]#(COMMONOBJS) #[[$]]#(LIBS)
#end

objs/#[[$]]#(TARGET_ARCH)/%.o : #[[$]]#(SOURCE_DIR)%${sourceFileExtension}  #foreach($h in ${additionalHeaderFiles}) #[[$]]#(SOURCE_DIR)$h#end #if(${global.idlFileName})#[[$]]#(SOURCE_DIR)${global.idlFileName}${headerFileExtension}#end 
#*-- This intro is needed as the previous line ends with the end --*#
	#[[$]]#(COMPILER) #[[$]]#(COMPILER_FLAGS) -o #[[$]]#@ #[[$]]#(DEFINES) #[[$]]#(INCLUDES) -c #[[$]]#<

#if(${global.idlFileName})
#[[#]]#
#[[#]]# Uncomment these lines if you want the support files regenerated when idl
#[[#]]# file is modified
#[[#]]#
#[[#]]#
#[[#]]# #foreach($sharedSource in ${sharedSources}) #[[$]]#(SOURCE_DIR)$sharedSource#end \
#[[#]]# #foreach($sharedHeader in ${sharedHeaders}) #[[$]]#(SOURCE_DIR)$sharedHeader#end : \
#[[#]]#		#[[$]]#(SOURCE_DIR)${global.idlFileName}.idl
#[[#]]#	#[[$]]#(NDDSHOME)/bin/rtiddsgen #[[$]]#(SOURCE_DIR)${global.idlFileName}.idl -replace -language ${global.language}
#end

#[[#]]# Here is how we create those subdirectories automatically.
%.dir : 
	@echo "Checking directory #[[$]]#*"
	@if [ ! -d #[[$]]#* ]; then \
		echo "Making directory #[[$]]#*"; \
		mkdir -p #[[$]]#* ; \
	fi;
