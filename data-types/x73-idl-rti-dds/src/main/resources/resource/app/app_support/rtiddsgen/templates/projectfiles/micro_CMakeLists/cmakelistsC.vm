##
##
## (c) Copyright, Real-Time Innovations, Inc. 2017.  All rights reserved.
## No duplications, whole or partial, manual or electronic, may be made
## without prior written permission.  Any such copies, or
## revisions thereof, must display this notice unaltered.
## This code contains trade secrets of Real-Time Innovations, Inc.
##
## modification history:
## ---------------------
## 2.4.10,22jun17,fmt feature/MICRO-1540 Generate Micro examples with rtiddsgen -example 
##========================================================================

CMAKE_MINIMUM_REQUIRED(VERSION 2.8.4)

ADD_DEFINITIONS(#foreach($define in ${additionalDefines}) -D${define}#end)

LINK_DIRECTORIES(#foreach($path in ${additionalLibraryPaths}) -L${path}#end)

INCLUDE_DIRECTORIES(#[[$]]#{CMAKE_CURRENT_SOURCE_DIR})

#if($global.language.equals("C++") || $global.language.equals("MicroC++"))
PROJECT(${global.idlFileName} CXX)
SET(SOURCE_EXTENSION cxx)
#else
PROJECT(${global.idlFileName} C)
SET(SOURCE_EXTENSION c)
#end

SET(RTIDDSGEN #[[$]]#ENV{RTIMEHOME}/rtiddsgen/scripts/rtiddsgen)
SET_PROPERTY(GLOBAL PROPERTY RULE_MESSAGES OFF)

SET(IDL_SOURCE_C ${global.idlFileName}.idl)

SET(IDL_GEN_ROOT #[[$]]#{CMAKE_CURRENT_SOURCE_DIR}/gen)

SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY #[[$]]#{CMAKE_CURRENT_SOURCE_DIR}/objs/#[[$]]#{RTIME_TARGET_NAME})
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY #[[$]]#{CMAKE_CURRENT_SOURCE_DIR}/objs/#[[$]]#{RTIME_TARGET_NAME})
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY #[[$]]#{CMAKE_CURRENT_SOURCE_DIR}/objs/#[[$]]#{RTIME_TARGET_NAME})

IF (NOT EXISTS gen)
    EXECUTE_PROCESS(COMMAND #[[$]]#{CMAKE_COMMAND} -E make_directory gen)
ENDIF()

SET(RTI_LIB_PREFIX rti_me)
SET(RTI_LIB_SUFFIX)

IF (NOT (DEFINED RTI_SHARED_LIB))
    IF (${CMAKE_BUILD_TYPE} MATCHES "[Rr]elease")
        SET(RTI_LIB_SUFFIX "z")
        SET(RTI_DEBUG_BUILD FALSE)
        ADD_DEFINITIONS(-DNDEBUG)
    ELSE()
        SET(RTI_LIB_SUFFIX "zd")
        SET(RTI_DEBUG_BUILD TRUE)
    ENDIF()
ELSE()
    IF (${CMAKE_BUILD_TYPE} MATCHES "[Rr]elease")
        SET(RTI_LIB_SUFFIX "")
        SET(RTI_DEBUG_BUILD FALSE)
        ADD_DEFINITIONS(-DNDEBUG)
    ELSE()
        SET(RTI_LIB_SUFFIX "d")
        SET(RTI_DEBUG_BUILD TRUE)
    ENDIF()
ENDIF()

#if($global.language.equals("C++") || $global.language.equals("MicroC++"))
SET(MICRO_C_LIBS rti_me_cpp#[[$]]#{RTI_LIB_SUFFIX} 
                 rti_me_rhsm#[[$]]#{RTI_LIB_SUFFIX} 
#else
SET(MICRO_C_LIBS rti_me_rhsm#[[$]]#{RTI_LIB_SUFFIX} 
#end
                 rti_me_whsm#[[$]]#{RTI_LIB_SUFFIX} 
                 rti_me_discdpse#[[$]]#{RTI_LIB_SUFFIX} 
                 rti_me_discdpde#[[$]]#{RTI_LIB_SUFFIX} 
                 rti_me${RTI_LIB_SUFFIX}
                 #foreach($library in ${additionalRtiLibraries})${library}{RTI_LIB_SUFFIX} #end
                 #foreach($library in ${additionalLibraries}) ${library}#end
                 )

MESSAGE("RTIME_TARGET_NAME = #[[$]]#{RTIME_TARGET_NAME}")
INCLUDE_DIRECTORIES(gen/ #[[$]]#ENV{RTIMEHOME}/include #[[$]]#ENV{RTIMEHOME}/include/rti_me)
LINK_DIRECTORIES(#[[$]]#ENV{RTIMEHOME}/lib/#[[$]]#{RTIME_TARGET_NAME})

FOREACH(idl ${IDL_SOURCE_C})
    GET_FILENAME_COMPONENT(filename ${idl} NAME)
    STRING(REGEX REPLACE "\\.idl" "" basename ${filename})
    LIST(APPEND IDL_GEN_C #[[$]]#{IDL_GEN_ROOT}/${basename}.#[[$]]#{SOURCE_EXTENSION}
                          #[[$]]#{IDL_GEN_ROOT}/${basename}Plugin.#[[$]]#{SOURCE_EXTENSION}
                          #[[$]]#{IDL_GEN_ROOT}/${basename}Support.#[[$]]#{SOURCE_EXTENSION})
                          
    LIST(APPEND IDL_GEN_H #[[$]]#{IDL_GEN_ROOT}/${basename}.h
                          #[[$]]#{IDL_GEN_ROOT}/${basename}Plugin.h  
                          #[[$]]#{IDL_GEN_ROOT}/${basename}Support.h)
                          
    ADD_CUSTOM_COMMAND(OUTPUT #[[$]]#{IDL_GEN_C} ${IDL_GEN_H} 
#if(${global.namespace})
                       COMMAND #[[$]]#{RTIDDSGEN} -verbosity 1 -namespace -language ${global.language} -micro 
#else
                       COMMAND #[[$]]#{RTIDDSGEN} -verbosity 1 -language ${global.language} -micro 
#end
                               -replace 
                               -d #[[$]]#{IDL_GEN_ROOT}/. #[[$]]#{CMAKE_CURRENT_SOURCE_DIR}/#[[$]]#{idl}
                       DEPENDS #[[$]]#{CMAKE_CURRENT_SOURCE_DIR}/#[[$]]#{idl}
                       COMMENT "Regeneration type support plugin from #[[$]]#{idl}"
    )    
    SET_SOURCE_FILES_PROPERTIES(#[[$]]#{IDL_GEN_C} #[[$]]#{IDL_GEN_H} PROPERTIES GENERATED 1)
ENDFOREACH()

ADD_EXECUTABLE(${global.idlFileName}_publisher
               #[[$]]#{CMAKE_CURRENT_SOURCE_DIR}/${global.idlFileName}_publisher.#[[$]]#{SOURCE_EXTENSION}
               #[[$]]#{CMAKE_CURRENT_SOURCE_DIR}/${global.idlFileName}Application.#[[$]]#{SOURCE_EXTENSION} 
               #[[$]]#{CMAKE_CURRENT_SOURCE_DIR}/${global.idlFileName}Application.h 
               #foreach($source in ${additionalSourceFiles}) #[[$]]#{CMAKE_CURRENT_SOURCE_DIR}/${source}#end
               #foreach($header in ${additionalHeaderFiles}) #[[$]]#{CMAKE_CURRENT_SOURCE_DIR}/${header}#end
               #[[$]]#{IDL_GEN_C} #[[$]]#{IDL_GEN_H})

ADD_EXECUTABLE(${global.idlFileName}_subscriber 
               #[[$]]#{CMAKE_CURRENT_SOURCE_DIR}/${global.idlFileName}_subscriber.${SOURCE_EXTENSION}
               #[[$]]#{CMAKE_CURRENT_SOURCE_DIR}/${global.idlFileName}Application.${SOURCE_EXTENSION}
               #[[$]]#{CMAKE_CURRENT_SOURCE_DIR}/${global.idlFileName}Application.h 
               #foreach($source in ${additionalSourceFiles}) #[[$]]#{CMAKE_CURRENT_SOURCE_DIR}/${source}#end
               #foreach($header in ${additionalHeaderFiles}) #[[$]]#{CMAKE_CURRENT_SOURCE_DIR}/${header}#end
               #[[$]]#{IDL_GEN_C} #[[$]]#{IDL_GEN_H})

TARGET_LINK_LIBRARIES(${global.idlFileName}_publisher  #[[$]]#{MICRO_C_LIBS} #[[$]]#{PLATFORM_LIBS})
TARGET_LINK_LIBRARIES(${global.idlFileName}_subscriber #[[$]]#{MICRO_C_LIBS} #[[$]]#{PLATFORM_LIBS})
