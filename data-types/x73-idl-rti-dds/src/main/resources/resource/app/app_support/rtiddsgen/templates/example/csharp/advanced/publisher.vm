/*
 * (c) Copyright, Real-Time Innovations, 2021.  All rights reserved.
 * RTI grants Licensee a license to use, modify, compile, and create derivative
 * works of the software solely for use with RTI Connext DDS. Licensee may
 * redistribute copies of the software provided that all such copies are subject
 * to this license. The software is provided "as is", with no warranty of any
 * type, including any warranty for fitness for any purpose. RTI is under no
 * obligation to maintain or support the software. RTI shall not be liable for
 * any incidental or consequential damages arising out of the use or inability
 * to use the software.
 */

using System;
using System.Threading;
using System.Threading.Tasks;
using Rti.Dds.Core;
using Rti.Dds.Core.Status;
using Rti.Dds.Domain;
using Rti.Dds.Publication;
using Rti.Dds.Topics;

#foreach($module in $constructMap.modulesName)
namespace $module
{
#end
/// <summary>
/// Example application that publishes ${constructMap.name}
/// </summary>
public sealed class ${constructMap.name}Publisher : I${constructMap.name}Application
{
    private readonly DomainParticipant participant;
    private readonly DataWriter<${constructMap.name}> writer;

    /// <summary>
    /// Creates a DomainParticipant, Topic, Publisher and DataWriter<${constructMap.name}>.
    /// </summary>
    public ${constructMap.name}Publisher(int domainId)
    {
        // Start communicating in a domain, usually one participant per application
        // Load QoS profile from USER_QOS_PROFILES.xml file
        DomainParticipantQos participantQos = QosProvider.Default.GetDomainParticipantQos("${envMap.idlFileName}_Library::${envMap.idlFileName}_Profile");
        participant = DomainParticipantFactory.Instance.CreateParticipant(domainId, participantQos);

        // A Topic has a name and a datatype.
        TopicQos topicQos = QosProvider.Default.GetTopicQos("${envMap.idlFileName}_Library::${envMap.idlFileName}_Profile");
        Topic<${constructMap.name}> topic = participant.CreateTopic<${constructMap.name}>("${constructMap.topicName}",topicQos);

        // Handle updates to the Topic status
        topic.InconsistentTopic += OnInconsistentTopic;

        // Create a Publisher, loading QoS profile from USER_QOS_PROFILES.xml.
        PublisherQos publisherQos = QosProvider.Default.GetPublisherQos("${envMap.idlFileName}_Library::${envMap.idlFileName}_Profile");
        Publisher publisher = participant.CreatePublisher(publisherQos);

        // Create a DataWriter, loading QoS profile from USER_QOS_PROFILES.xml, and
        // using a listener for events.
        DataWriterQos writerQos = QosProvider.Default.GetDataWriterQos("${envMap.idlFileName}_Library::${envMap.idlFileName}_Profile");
        writer = publisher.CreateDataWriter(topic, writerQos);

        // Handle updates to the statuses we are interested in
        writer.OfferedDeadlineMissed += OnOfferedDeadlineMissed;
        writer.OfferedIncompatibleQos += OnOfferedIncompatibleQos;
        writer.PublicationMatched += OnPublicationMatched;
        writer.LivelinessLost += OnLivelinessLost;
    }

    /// <summary>
    /// Publishes the data
    /// </summary>
    public async Task Run(int sampleCount, CancellationToken cancellationToken)
    {
        var sample = new ${constructMap.name}();
        for (int count = 0;
                count < sampleCount && !cancellationToken.IsCancellationRequested;
                count++)
        {
            // Modify the data to be sent here
#*------*##foreach($member in $constructMap.memberFieldMapList)
#*--------*##if($member.isInteger
                    && !$member.explicitDefaultValue
                    && !$member.resolvedTypeOptional
                    && !$member.isPointer)
            sample.${member.name} = #*
#*------------*##if(!$member.nativeTypeFQName.equals("int")&&
                !$member.nativeTypeFQName.equals("long"))#*
#*----------*# ($member.nativeTypeFQName) count;
#*------------*##else
#*----------*#count;
#*------------*##end
#*--------*##end
#*------*##end

            Console.WriteLine($"Writing ${constructMap.name}, count {count}");

            writer.Write(sample);

            await Task.Delay(1000, cancellationToken);
        }
    }

    /// <summary>
    /// Disposes all DDS entities created by this application.
    /// </summary>
    public void Dispose() => participant.Dispose();

    private void OnInconsistentTopic(IAnyTopic topic, InconsistentTopicStatus status)
    {
        Console.WriteLine($"Inconsistent topic: {status}");
    }

    private void OnOfferedDeadlineMissed(AnyDataWriter writer, OfferedDeadlineMissedStatus status)
    {
        Console.WriteLine($"Offered deadline missed: {status}");
    }

    private void OnOfferedIncompatibleQos(AnyDataWriter writer, OfferedIncompatibleQosStatus status)
    {
        Console.WriteLine($"Offered incompatible QoS: {status}");
    }

    private void OnPublicationMatched(AnyDataWriter writer, PublicationMatchedStatus status)
    {
        Console.WriteLine($"Publication matched: {status}");
    }

    private void OnLivelinessLost(AnyDataWriter writer, LivelinessLostStatus status)
    {
        Console.WriteLine($"Liveliness lost: {status}");
    }
}
#foreach($module in $constructMap.modulesName)
} // namespace $module
#end
