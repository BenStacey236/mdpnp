<?xml version="1.0"?>

<!--
(c) Copyright, Real-Time Innovations, Inc. 2022.  All rights reserved.
-->

<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:noNamespaceSchemaLocation="../schema/rtiddsgen_configuration.xsd">
<command_line_options>
    <command_line_option>
        <name>help</name>
        <help_msg>
        Prints this message.
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
        <telemetry>true</telemetry>
    </command_line_option>
    <command_line_option>
        <name>showTemplates</name>
        <help_msg>
        Prints and generates an xml file both containing a list
        of the available example templates, organized per language, that can
        be used with Code Generator -exampleTemplate option.
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
    </command_line_option>
    <command_line_option>
        <name>allocateWithMalloc</name>
        <help_msg>
        Use this flag to get backwards compatibility
        when allocating optional members with DDS_Heap_malloc in C++ (CODEGENII-620).
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
        <telemetry>true</telemetry>
        <short_name>awm</short_name>
    </command_line_option>
    <command_line_option>
        <name>autoGenFiles</name>
        <param>&lt;arch&gt;</param>
        <help_msg>
        Updates the autogenerated files, i.e, typefiles and makefile/project files
        shortcut for: -update &lt;typefiles&gt; -update &lt;makefiles&gt; -platform &lt;arch&gt;"
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
        <telemetry>true</telemetry>
        <short_name>agf</short_name>
    </command_line_option>
    <command_line_option>
        <name>create</name>
        <param>&lt;typefiles, examplefiles, makefiles&gt;</param>
        <help_msg>
        Creates the files
        indicated if they do not exist. For example:
        rtiddsgen -language C++11 -create typefiles test.idl
        If the files already exist, the files are not modified and a
        warning is printed. There can be multiple -create options.
        If you specify both -create and -update for the same file type,
        only the -update will be applied. If you use -create makefiles,
        the -platform &lt;arch&gt; option is required. For example:
        rtiddsgen -language c -create makefiles -platform x64Darwin20clang12.0 test.idl
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
        <telemetry>true</telemetry>
    </command_line_option>
    <command_line_option>
        <name>convertToIdl</name>
        <help_msg>
        Converts the input file into an equivalent IDL file.
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
        <telemetry>true</telemetry>
        <short_name>cti</short_name>
    </command_line_option>
    <command_line_option>
        <name>convertToXml</name>
        <help_msg>
        Converts the input file into an equivalent XML file.
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
        <telemetry>true</telemetry>
        <short_name>ctxml</short_name>
    </command_line_option>
    <command_line_option>
        <name>convertToXsd</name>
        <help_msg>
        Converts the input file into an equivalent XSD file.
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
        <telemetry>true</telemetry>
        <short_name>ctxsd</short_name>
    </command_line_option>
    <command_line_option>
        <name>xmlTypeLibrary</name>
        <help_msg>
        When generating XML use the type_library format instead of the types format
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
    </command_line_option>
    <command_line_option>
        <name>D</name>
        <param>&lt;name&gt;[=&lt;value&gt;]</param>
        <help_msg>Defines preprocessor macros</help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
    </command_line_option>
    <command_line_option>
        <name>d</name>
        <param>&lt;outdir&gt;</param>
        <help_msg>
        Generate output in the specified directory
        (default: IDL input file's directory)
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
    </command_line_option>
    <command_line_option>
        <name>use52CKeyhash</name>
        <help_msg>
        This flag is ignored
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
        <deprecated>true</deprecated>
    </command_line_option>
    <command_line_option>
        <name>use52JavaKeyhash</name>
        <help_msg>
        This option should be used when compatibility
        with 5.2.3 and earlier GARs is required when using keyed mutable
        types. Deprecate, use -use52Keyhash
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
        <deprecated>true</deprecated>
    </command_line_option>
    <command_line_option>
        <name>use52Keyhash</name>
        <help_msg>
        This option should be used when compatibility
        with 5.2.3 and earlier GARs is required when using keyed mutable
        types (CODEGENII-501 and CODEGENII-693)
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
    </command_line_option>
    <command_line_option>
        <name>use526Keyhash</name>
        <help_msg>
        This option should be used when compatibility
        with 5.2.6 is required when using keyed mutable types (CODEGENII-693)
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
    </command_line_option>
    <command_line_option>
        <name>dllExportMacroSuffix</name>
        <param>&lt;suffix&gt;</param>
        <help_msg>
        Defines the suffix of the macro that is
        used to export symbols when building Windows DLLs.
        The default macro is NDDS_USER_DLL_EXPORT. When this option is
        specified, the name of the macro is NDDS_USER_DLL_EXPORT_&lt;Suffix&gt;
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
    </command_line_option>
    <command_line_option>
        <name>enableEscapeChar</name>
        <help_msg>
        Enables the usage of the escape character '_' in IDL
        identifiers.
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
    </command_line_option>
    <command_line_option>
        <name>example</name>
        <param>&lt;arch&gt;</param>
        <help_msg>
        Generates type files, example files and makefile
        shortcut for: -create &lt;typefiles&gt; -create &lt;examplefiles&gt;
                      -create &lt;makefiles&gt; -platform &lt;arch&gt;
        Valid &lt;arch&gt; arguments are:
        For all languages but C#:
          universal (Generate compatible publisher/subscriber code for all
          supported platforms. It won't generate makefiles/project files)
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
        <telemetry>true</telemetry>
    </command_line_option>
    <command_line_option>
        <name>exampleTemplate</name>
        <param>&lt;templateName&gt;</param>
        <help_msg>
        Generate an example application using
        custom publisher and subscriber templates. You can also optionally
        add a QoS template. These templates should be saved under:
          $NDDSHOME/resource/app/app_support/rtiddsgen/templates/example/&lt;language&gt;/&lt;templateName>&gt;
        This option is not supported in Ada.
        In order to use this option, you have to use one of the next ones:
          -create examplefiles
          -update examplefiles
          -example &lt;architecture&gt;
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
        <telemetry>true</telemetry>
        <short_name>et</short_name>
    </command_line_option>
    <command_line_option>
        <name>express</name>
        <help_msg>
        This flag is ignored
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
        <deprecated>true</deprecated>
    </command_line_option>
    <command_line_option>
        <name>generateCTypeCode</name>
        <help_msg>
        This flag is ignored
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
        <deprecated>true</deprecated>
    </command_line_option>
    <command_line_option>
        <name>I</name>
        <param>&lt;directory&gt;</param>
        <help_msg>
        Adds the directory to the list of directories to be searched
        for header files
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
    </command_line_option>
    <command_line_option>
        <name>inputIdl</name>
        <param>&lt;IDLInputFile.idl&gt;</param>
        <help_msg>
        Indicates that the input file is an IDL file
        independently of the file extension
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
        <telemetry>true</telemetry>
        <short_name>inIdl</short_name>
    </command_line_option>
    <command_line_option>
        <name>inputXml</name>
        <param>&lt;XMLInputFile.xml&gt;</param>
        <help_msg>
        Indicates that the input file is an XML file
        independently of the file extension
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
        <telemetry>true</telemetry>
        <short_name>inXml</short_name>
    </command_line_option>
    <command_line_option>
        <name>inputXsd</name>
        <param>&lt;XSDInputFile.xsd&gt;</param>
        <help_msg>
        Indicates that the input file is an XSD file
        independently of the file extension
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
        <telemetry>true</telemetry>
        <short_name>inXsd</short_name>
    </command_line_option>
    <command_line_option>
        <name>language</name>
        <param>&lt;C|C++98|Java|Ada|C++11|C#|Python&gt;</param>
        <help_msg>
        Generates output for one of:
        C, C++11, C++98, C#, Python, Java or Ada
        Use of generated Ada code requires installation of RTI Ada Language
        Support. Please contact support@rti.com for more information."
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
        <telemetry>true</telemetry>
        <short_name>lang</short_name>
    </command_line_option>
    <command_line_option>
        <name>namespace</name>
        <help_msg>
        This parameter should be included to use C++ namespaces when
        the language option is C++
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
        <telemetry>true</telemetry>
    </command_line_option>
    <command_line_option>
        <name>stl</name>
        <help_msg>
        This flag is ignored
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
        <deprecated>true</deprecated>
    </command_line_option>
    <command_line_option>
        <name>constructor</name>
        <help_msg>
        This parameter should be used to generate type default
        constructor, copy constructor, copy assignment operator,
        and destructor when the language option is C++. The usage of this
        option will disable the generation of the following TypeSupport
        methods: create_data(_ex), delete_data(_ex), initialize_data(_ex)
        finalize_data(_ex), copy_data
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
        <telemetry>true</telemetry>
        <short_name>const</short_name>
    </command_line_option>
    <command_line_option>
        <name>virtualDestructor</name>
        <help_msg>
        This parameter should be used to generate a virtual
        destructor when the language option is C++. The usage of this option
        will automatically enable constructor generation (-constructor).
        Notice that the usage of this option will affect the filtering
        performance when using ContentFilterTopics or QueryConditions.
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
        <telemetry>true</telemetry>
        <short_name>vdest</short_name>
    </command_line_option>
    <command_line_option>
        <name>useStdString</name>
        <help_msg>
        Uses 'std::string' instead of 'char *' when generating code
        for IDL strings when the language option is C++. The usage of this
        option will automatically enable constructor generation (-constructor)
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
        <telemetry>true</telemetry>
        <short_name>stdStr</short_name>
    </command_line_option>
    <command_line_option>
        <name>plugableTypesPath</name>
        <param>&lt;path to plugable types templates&gt;</param>
        <help_msg>
        Defines the templates path to load pluggable types
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
    </command_line_option>
    <command_line_option>
        <name>alwaysUseStdVector</name>
        <help_msg>
        When -language C++11 is specified, map all
        sequences to 'std::vector', even bounded sequences that would
        otherwise map to 'rti::core::bounded_sequence.' Alternatively,
        the @use_vector annotation can be applied to each sequence member
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
        <telemetry>true</telemetry>
        <short_name>ausvec</short_name>
    </command_line_option>
    <command_line_option>
        <name>obfuscate</name>
        <help_msg>
        obfuscate the input IDL file
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
    </command_line_option>
    <command_line_option>
        <name>optimization</name>
        <param>&lt;level of optimization&gt;</param>
        <help_msg>
        Level of optimization of the code generation
        0: No Optimization.
        1: The compiler generates extra code for typedefs but optimizes its
            use. If a type that is used is a typedef that can be resolved to
            a primitive, enum, or aggregated type (struct, union, or value
            type), the generated code will invoke the code of the most basic
            type to which the typedef can be resolved. This level can be used
            if the generated code is not expected to be modified. This is the
            only optimization level supported for Java
            languages.
        2: (Default) This optimization level only applies to C, C++98,
            C++11 and higher, and Ada languages. With this optimization
            level, rtiddsgen optimizes the serialization/deserialization of
            structures and valuetypes by using more aggressive techniques. These
            techniques include inline expansion of nested types and
            serialization/deserialization of a set of consecutive members with a
            single copy function invocation (memcpy) when the memory layout
            (e.g, C structure layout) is the same as the wire layout (XCDR).
            2 is the default for C, C++98, C++11 and higher, microC, microC++, and Ada
            (but you can change it to 0 or 1). 1 is always used for Java and C#
            and you cannot change it.
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
        <telemetry>true</telemetry>
        <short_name>opti</short_name>
    </command_line_option>
    <command_line_option>
        <name>optimizeAlignment</name>
        <help_msg>
        This flag is ignored
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
        <deprecated>true</deprecated>
    </command_line_option>
    <command_line_option>
        <name>package</name>
        <param>&lt;packagePrefix&gt;</param>
        <help_msg>
        Uses &lt;packagePrefix&gt; as the root package
        (Java only)
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
        <telemetry>true</telemetry>
    </command_line_option>
    <command_line_option>
        <name>platform</name>
        <param>&lt;arch&gt;</param>
        <help_msg>
        Required if -create makefiles or -update makefiles
        is used. Valid &lt;arch&gt; arguments are the same as those
        in the -example &lt;arch&gt;
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
        <telemetry>true</telemetry>
        <short_name>plat</short_name>
    </command_line_option>
    <command_line_option>
        <name>ppNotRun</name>
        <help_msg>
        Option to not run the preprocessor. This option is deprecated,
        please use -ppDisable
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
        <deprecated>true</deprecated>
    </command_line_option>
    <command_line_option>
        <name>ppDisable</name>
        <help_msg>
        Option to not run the preprocessor
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
    </command_line_option>
    <command_line_option>
        <name>ppPath</name>
        <param>&lt;path to the preprocessor&gt;</param>
        <help_msg>
        Preprocessor path
        The default value is "cpp" for non-Windows architectures and
        "cl.exe" for Windows architectures.
        If you use -ppPath to provide the full path and filename for
        "cl.exe" or the cpp preprocessor, you must also use -ppOption (described below)
        to set the following preprocessor options:"
        If you use a non-default path for \"cl.exe\", you also need to set:
        -ppOption nologo -ppOption /C -ppOption /E -ppOption /X
        If you use a non-default path for cpp, you also need to set:
        -ppOption -C
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
    </command_line_option>
    <command_line_option>
        <name>ppOption</name>
        <param>&lt;option&gt;</param>
        <help_msg>
        Preprocessor option
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
    </command_line_option>
    <command_line_option>
        <name>qualifiedEnumerator</name>
        <help_msg>
        Uses the fully qualified name for enumerator values including
        the enum value.
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
        <telemetry>true</telemetry>
        <short_name>qe</short_name>
    </command_line_option>
    <command_line_option>
        <name>replace</name>
        <help_msg>
        Deprecated option. Please use -update for the proper files
        (typefiles, examplefiles, makefiles).
        This option is maintained for backwards compatibility.
        It allows rtiddsgen to overwrite any existing generated files.
        If you do not use this option and existing files are found,
        rtiddsgen will print a warning but will not overwrite the files.
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
        <telemetry>true</telemetry>
    </command_line_option>
    <command_line_option>
        <name>sequenceSize</name>
        <param>&lt;Unbounded sequences size&gt;</param>
        <help_msg>
        Size assigned to unbounded sequences. The default value is 100.
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
    </command_line_option>
    <command_line_option>
        <name>sharedLib</name>
        <help_msg>
        Generates makefile compiling with the dynamic libraries.
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
    </command_line_option>
    <command_line_option>
        <name>stringSize</name>
        <param>&lt;Unbounded strings size&gt;</param>
        <help_msg>
        Size assigned to unbounded strings.
        The default value is 255.
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
    </command_line_option>
    <command_line_option>
        <name>typeSequenceSuffix</name>
        <param>&lt;Suffix&gt;</param>
        <help_msg>
        Assigns a suffix to the name of the implicit
        sequence defined for IDL types. The option is compatible with languages
        C, C++ and Java. By default, the suffix is 'Seq'. For example,
        given the type 'Foo' the name of the sequence would be 'FooSeq'.
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
    </command_line_option>
    <command_line_option>
        <name>U</name>
        <param>&lt;name&gt;</param>
        <help_msg>
        Cancels any previous definition of name.
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
    </command_line_option>
    <command_line_option>
        <name>update</name>
        <param>&lt;typefiles, examplefiles, makefiles&gt;</param>
        <help_msg>
        Creates the files indicated if
        they do not exist. For example:
        rtiddsgen -language C++11 -update typefiles test.idl
        If the files already exist, -update overwrites the files without printing
        a warning. There can be multiple -update options. If both -create and
        -update are specified for the same file type, only the -update will be
        applied. If you use -update makefiles, the -platform &lt;arch&gt; option
        is required. For example:
        rtiddsgen -language c -update makefiles -platform x64Darwin20clang12.0 test.idl.
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
        <telemetry>true</telemetry>
    </command_line_option>
    <command_line_option>
        <name>unboundedSupport</name>
        <help_msg>
        Generates code that supports unbounded sequences and
        strings.
        This option is not supported in Ada.
        When this option is used, the command-line options sequenceSize and
        stringSize are ignored.
        This option also affects the way unbounded sequences are deserialized.
        When a sequence is being received into a sample from the DataReader's
        cache, the old memory for the sequence will be deallocated and memory
        of sufficient size to hold the deserialized data will be allocated.
        When initially constructed, sequences will not preallocate any
        elements having a maximum of zero elements.
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
        <telemetry>true</telemetry>
        <short_name>unbounS</short_name>
    </command_line_option>
    <command_line_option>
        <name>use42eAlignment</name>
        <help_msg>
        This option has been removed from codegen
        </help_msg>
        <supported>false</supported>
        <hidden>false</hidden>
        <deprecated>true</deprecated>
    </command_line_option>
    <command_line_option>
        <name>V</name>
        <param>&lt;name&gt;[=&lt;value&gt;]</param>
        <help_msg>
        Defines a user variable that can be used in the
        templates as $userVarList.name or $userVarList.name.equals(value).
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
    </command_line_option>
    <command_line_option>
        <name>verbosity</name>
        <param>&lt;1-3&gt;</param>
        <help_msg>
        rtiddsgen verbosity
        1: exceptions
        2: exceptions + warnings
        3: exceptions + warnings + information
        The default value is 3.
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
    </command_line_option>
    <command_line_option>
        <name>version</name>
        <help_msg>
        Prints the rtiddsgen version.
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
    </command_line_option>
    <command_line_option>
        <name>reader</name>
        <help_msg>
        Generates support for DataReader (only with -micro).
        </help_msg>
        <supported>false</supported>
        <hidden>false</hidden>
    </command_line_option>
    <command_line_option>
        <name>writer</name>
        <help_msg>
        Generates support for DataWriter (only with -micro).
        </help_msg>
        <supported>false</supported>
        <hidden>false</hidden>
    </command_line_option>
    <command_line_option>
        <name>micro</name>
        <help_msg>
        Generates code and support files for RTI Connext Micro, instead of
        RTI Connext. Use -micro -help to list command-line arguments
        supported by rtiddsgen when targeting RTI Connext Micro.
        </help_msg>
        <supported>false</supported>
        <hidden>false</hidden>
    </command_line_option>
    <command_line_option>
        <name>strict</name>
        <help_msg>
        Enables strict XType specification compliant checks.
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
    </command_line_option>
    <command_line_option>
        <name>uniqueNames</name>
        <help_msg>
        Generate unique names for TS types. This flag is only available
        for FACE C++. This feature is an RTI extension and it is not specified in
        the FACE Technical Standard 3.1.
        </help_msg>
        <supported>false</supported>
        <hidden>false</hidden>
    </command_line_option>
    <command_line_option>
        <name>r</name>
        <help_msg>
        Recursive search for input files in directories.
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
    </command_line_option>
    <command_line_option>
        <name>generateIncludeFiles</name>
        <help_msg>
        Generate code for any file included in the inputs files
        </help_msg>
        <supported>true</supported>
        <hidden>false</hidden>
    </command_line_option>

<!--
The following arguments are for RTI internal use.
The use of these arguments won't have RTI Support,
and they could be removed or their behaviour could
change without further notice.
-->
    <command_line_option>
        <name>additionalSourceFiles</name>
        <help_msg>
        Adds a list of sources separated by spaces to the makefile/project file sources to be compiled.
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>additionalHeaderFiles</name>
        <help_msg>
        Adds a list of headers separated by spaces to the makefile/project file headers.
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>additionalDefines</name>
        <help_msg>
        Adds a list of defines separated by spaces to the makefile/project file preprocessor definitions.
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>additionalLibraries</name>
        <help_msg>
        Adds a list of libraries separated by spaces to the makefile/project file libraries
        Similar to -additionalRtiLibraries without the 'z' 'd' RTI conventions.
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>additionalRtiLibraries</name>
        <help_msg>
        Adds a list of RTI library base names separated by spaces to the
        makefile/project file libraries.
        On Linux these base names will be added to the makefile with '-l' and suffixed with 'z', 'd', '.a' as appropriate.
        On Windows these base names will be suffixed with 'z', 'd' and '.lib' as appropriate.
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>additionalLibraryPaths</name>
        <help_msg>
        Adds a list of library paths separated by spaces to the makefile/project file library paths.
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>addPackageToTypecode</name>
        <help_msg>
        Add Package to type code name (Java only)
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>helpHidden</name>
        <help_msg>
        Prints this message.
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>printSupportedPlatforms</name>
        <help_msg>
        Generates an xml file on the working directory containing all the list of supported platforms.
        It can also be used with the option -d in order to generate the file in a different directory.
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>metp</name>
        <help_msg>
        Adds nddsmetp to RTI Libraries
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>zeroCopyShmem</name>
        <help_msg>...</help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>generateTestCode</name>
        <help_msg>
        For each type Foo, generate a function rti::test::initialize_test_values&lt;Foo&gt;()
        that initializes Foo's fields with non-default values (modern C++ only)
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>interpreted</name>
        <help_msg>
        [0-1] Indicates whether or not the serialization/deserialization must be interpreted
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
        <deprecated>true</deprecated>
        <telemetry>true</telemetry>
        <short_name>interp</short_name>
    </command_line_option>
    <command_line_option>
        <name>openssl</name>
        <help_msg>
        Adds to projectfiles the necesary OpenSSL parameters to compile a security example.
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>sourceDir</name>
        <help_msg>
        Modify the makefiles to point to the specified source code
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>ttGuard</name>
        <help_msg>
        This option create the identifier for the rtiddsgen execution from the time
        stamp execution
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>server</name>
        <help_msg>
        Run codegen server
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>serverPort</name>
        <help_msg>
        Port where codegen server will be listening
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>serverTimeout</name>
        <help_msg>
        Number of milliseconds it takes codegen server to stop after the last call
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>serverLogFilePath</name>
        <help_msg>
        Path to the log file of codegen server
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>rpcBasicMapping</name>
        <help_msg>
        Generates code using the Basic service mapping.
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>rpcTest</name>
        <help_msg>This option changes the generated code, to be able to run RPC tests</help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>preComputeTypeSizes</name>
        <help_msg>
        Outputs the precalculated type sizes of get_sample_max_size
        get_sample_min_size and get_sample_key_max_size methods in the generated code. When running
        with debug verbosity it also outputs a report of all the IDL type sizes
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>noCodeGeneration</name>
        <help_msg>
        Avoids the generation of typefiles. DEPRECATED use -create &lt;makefiles&gt;
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
        <deprecated>true</deprecated>
    </command_line_option>
    <command_line_option>
        <name>noDefaultNddshome</name>
        <help_msg>
        Avoids the generation a default NDDSHOME in the project/makefiles
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>makefileOnly</name>
        <help_msg>
        Generates project files without needing an IDL file.
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>libSuffix</name>
        <help_msg>
        Adds the desired libsuffix to the core libraries (removing leading and trailing whitespace)
        Use -libSuffix d for debug.
        Use -sharedLib for dynamic -libSuffix " is ignored in MS Windows project files.
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>modifyPubData</name>
        <help_msg>
        Adds the text in the generated publisher after the /*Modify your data here*/.
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>modifySubLoop</name>
        <help_msg>
        Adds the text in the generated subscriber after the output that prints sleeping for a few seconds.
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>mutExt</name>
        <help_msg>...</help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>ignoreAlignment</name>
        <help_msg>...</help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>makefile</name>
        <help_msg>
        Generates makefile/project files for the architecture. Deprecated use -create &lt;makefiles&gt;
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
        <deprecated>true</deprecated>
    </command_line_option>
    <command_line_option>
        <name>projectOutput</name>
        <help_msg>...</help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>disableBeautifier</name>
        <help_msg>
        Disables the code beautifier (default in Ada)
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>disableXSDValidation</name>
        <help_msg>
        When this option is used, rtiddsgen does not check that
        the input XSD file is well-formed. The use of this option is not recommended
        in general as the code generation may receive invalid inputs.
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>xmlWithOnlineXsd</name>
        <help_msg>
        Generates XML and QoS with online version of the XSD schema.
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>convertToMonitoringIdl</name>
        <help_msg>
        Generates monitoring distribution IDL file.
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>generateMonitoringCode</name>
        <help_msg>
        Generates monitoring related code for an IDL file.
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>generateMonitoringIdHeader</name>
        <help_msg>
        Generates monitoring ID header file.
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
    <command_line_option>
        <name>workingDirectory</name>
        <help_msg>
        Specifies the working directory and convert relative path arguments to absolute path.
        </help_msg>
        <supported>true</supported>
        <hidden>true</hidden>
    </command_line_option>
</command_line_options>

<!-- Annotations -->
<annotations>
    <annotation>
        <name>allowed_data_representation</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>ami</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>appendable</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>autoid</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>bit_bound</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>copy</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>custom</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>data_representation</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>DDSservice</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>DDSRequestTopic</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>DDSReplyTopic</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>default</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>deprecated</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>default_literal</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>default_nested</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>extensibility</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>external</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>final</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>hashid</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>id</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>interpreted</name>
        <status>Warning</status>
    </annotation>
    <annotation>
        <name>key</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>language_binding</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>max</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>min</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>must_understand</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>mutable</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>nested</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>no_sequence</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>non_serialized</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>observable</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>observable_group</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>observable_level</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>oneway</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>optimization</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>optional</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>position</name>
        <status>Warning</status>
    </annotation>
    <annotation>
        <name>range</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>resolve_name</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>resource</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>service</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>top_level</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>topic</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>transfer_mode</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>try_construct</name>
        <status>Warning</status>
    </annotation>
    <annotation>
        <name>unit</name>
        <status>Warning</status>
    </annotation>
    <annotation>
        <name>use_vector</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>value</name>
        <status>Supported</status>
    </annotation>
    <annotation>
        <name>verbatim</name>
        <status>Supported</status>
    </annotation>
</annotations>
</configuration>
