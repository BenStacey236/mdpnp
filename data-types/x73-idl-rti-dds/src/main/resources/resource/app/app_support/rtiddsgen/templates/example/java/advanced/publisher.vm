/*
* (c) Copyright, Real-Time Innovations, 2020.  All rights reserved.
* RTI grants Licensee a license to use, modify, compile, and create derivative
* works of the software solely for use with RTI Connext DDS. Licensee may
* redistribute copies of the software provided that all such copies are subject
* to this license. The software is provided "as is", with no warranty of any
* type, including any warranty for fitness for any purpose. RTI is under no
* obligation to maintain or support the software. RTI shall not be liable for
* any incidental or consequential damages arising out of the use or inability
* to use the software.
*/

#if($constructMap.packageName && $constructMap.packageName!="")
package $constructMap.packageName;
#end

import java.util.Objects;

import com.rti.dds.domain.DomainParticipant;
import com.rti.dds.domain.DomainParticipantFactory;
import com.rti.dds.infrastructure.InstanceHandle_t;
import com.rti.dds.infrastructure.StatusKind;
import com.rti.dds.publication.DataWriter;
import com.rti.dds.publication.DataWriterAdapter;
import com.rti.dds.publication.LivelinessLostStatus;
import com.rti.dds.publication.OfferedDeadlineMissedStatus;
import com.rti.dds.publication.OfferedIncompatibleQosStatus;
import com.rti.dds.publication.PublicationMatchedStatus;
import com.rti.dds.publication.Publisher;
import com.rti.dds.topic.Topic;

/** 
 * Simple example showing all Connext code in one place for readability.
 */
public class ${constructMap.name}Publisher extends Application implements AutoCloseable {

    // Usually one per application
    private DomainParticipant participant = null;
    
    // Listener that will be notified of DataWriter events
    class ${constructMap.name}DataWriterListener extends DataWriterAdapter {

        // Notifications about data
        @Override
        public void on_offered_deadline_missed(DataWriter writer,
                OfferedDeadlineMissedStatus offeredDeadlineMissedStatus) {
            // Add code here to handle deadline missed events
        }
        
        // Notifications about DataReaders
        @Override
        public void on_offered_incompatible_qos(DataWriter writer,
                OfferedIncompatibleQosStatus offeredIncompatibleQosStatus) {
            // Add code here to handle incompatible QoS events
        }

        @Override
        public void on_publication_matched(DataWriter writer,
                PublicationMatchedStatus publicationMatchedStatus) {
            // Add code here to handle publication matched events
        }
        
        // Notification about self
        @Override
        public void on_liveliness_lost(DataWriter writer,
                LivelinessLostStatus livelinessLostStatus) {
            // Add code here to handle liveliness lost events
        }
    }    

    private void runApplication() {
        // Start communicating in a domain
        participant = Objects.requireNonNull(
                DomainParticipantFactory.get_instance().create_participant_with_profile(
                        getDomainId(),
                        "${envMap.idlFileName}_Library",
                        "${envMap.idlFileName}_Profile",
                        null, // listener
                        StatusKind.STATUS_MASK_NONE));

        // A Publisher allows an application to create one or more DataWriters
        Publisher publisher = Objects.requireNonNull(
                participant.create_publisher_with_profile(
                        "${envMap.idlFileName}_Library",
                        "${envMap.idlFileName}_Profile",
                        null, // listener
                        StatusKind.STATUS_MASK_NONE));

        // Register the datatype to use when creating the Topic
        String typeName = ${constructMap.name}TypeSupport.get_type_name();
        ${constructMap.name}TypeSupport.register_type(participant, typeName);

        // Create a Topic with a name and a datatype
        Topic topic = Objects.requireNonNull(
                participant.create_topic_with_profile(
                        "${constructMap.topicName}",
                        typeName,
                        "${envMap.idlFileName}_Library",
                        "${envMap.idlFileName}_Profile",
                        null, // listener
                        StatusKind.STATUS_MASK_NONE));
        
        // Creating a writer listener, and enabling the DataWriter statuses we want
        // to be notified about
        ${constructMap.name}DataWriterListener writerListener = new ${constructMap.name}DataWriterListener();
        int mask = StatusKind.OFFERED_DEADLINE_MISSED_STATUS
                | StatusKind.REQUESTED_INCOMPATIBLE_QOS_STATUS
                | StatusKind.PUBLICATION_MATCHED_STATUS | StatusKind.LIVELINESS_LOST_STATUS;

        // This DataWriter writes data on "${constructMap.topicName}" Topic
        ${constructMap.name}DataWriter writer = (${constructMap.name}DataWriter) Objects.requireNonNull(
                publisher.create_datawriter_with_profile(
                        topic,
                        "${envMap.idlFileName}_Library",
                        "${envMap.idlFileName}_Profile",
                        writerListener, // listener
                        mask));

        // Create data sample for writing
        ${constructMap.name} data = new ${constructMap.name}();

        for (int samplesWritten = 0; !isShutdownRequested()
                && samplesWritten < getMaxSampleCount(); samplesWritten++) {

            // Modify the data to be written here
#*------*##foreach($member in $constructMap.memberFieldMapList)
#*--------*##if($member.isInteger
                    && !$member.explicitDefaultValue
                    && !$member.resolvedTypeOptional
                    && !$member.isPointer)
            data.$member.name = #*
#*----------*##if($member.nativeTypeFQName=="byte"||
                $member.nativeTypeFQName=="short")#*
#*----------*#(${member.nativeTypeFQName}) #end#*
#*----------*#samplesWritten;
#*--------*##end
#*------*##end

            System.out.println("Writing ${constructMap.name}, count " + samplesWritten);

            writer.write(data, InstanceHandle_t.HANDLE_NIL);
            try {
                Thread.sleep(1000); // 1 second
            } catch (InterruptedException ix) {
                System.err.println("INTERRUPTED");
                break;
            }
        }
    }

    @Override
    public void close() {
        // Delete all entities (DataWriter, Topic, Publisher, DomainParticipant)
        if (participant != null) {
            participant.delete_contained_entities();

            DomainParticipantFactory.get_instance()
                    .delete_participant(participant);
        }
    }

    public static void main(String[] args) {
        // Create example and run: Uses try-with-resources,
        // publisherApplication.close() automatically called
        try (${constructMap.name}Publisher publisherApplication = new ${constructMap.name}Publisher()) {
            publisherApplication.parseArguments(args);
            publisherApplication.addShutdownHook();
            publisherApplication.runApplication();
        }

        // Releases the memory used by the participant factory. Optional at application exit.
        DomainParticipantFactory.finalize_instance();
    }
}
