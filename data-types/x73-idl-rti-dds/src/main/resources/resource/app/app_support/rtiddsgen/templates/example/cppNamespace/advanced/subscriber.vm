/*
 * (c) Copyright, Real-Time Innovations, 2020.  All rights reserved.
 * RTI grants Licensee a license to use, modify, compile, and create derivative
 * works of the software solely for use with RTI Connext DDS. Licensee may
 * redistribute copies of the software provided that all such copies are subject
 * to this license. The software is provided "as is", with no warranty of any
 * type, including any warranty for fitness for any purpose. RTI is under no
 * obligation to maintain or support the software. RTI shall not be liable for
 * any incidental or consequential damages arising out of the use or inability
 * to use the software.
 */

${envMap.POUND_CHAR}include <iostream>
${envMap.POUND_CHAR}include <stdio.h>
${envMap.POUND_CHAR}include <stdlib.h>

${envMap.POUND_CHAR}include "${envMap.idlFileName}.h"
${envMap.POUND_CHAR}include "${envMap.idlFileName}Support.h"
${envMap.POUND_CHAR}include "ndds/ndds_cpp.h"
${envMap.POUND_CHAR}include "ndds/ndds_namespace_cpp.h"
${envMap.POUND_CHAR}include "application.h"

using namespace DDS;

#if( ${envMap.universal} )
${envMap.POUND_CHAR}if defined(RTI_ANDROID)
#end
#if( ${envMap.android} || ${envMap.universal})
${envMap.POUND_CHAR}include <stdarg.h>
${envMap.POUND_CHAR}include <android/log.h>

typedef int (*RTIAndroidOnCoutMethod)(const char *text);
static RTIAndroidOnCoutMethod publisher_onCout = NULL;
extern "C" void RTIAndroid_registerOnCout(RTIAndroidOnCoutMethod onCout) {
    publisher_onCout = onCout;
}

#*--*#${envMap.POUND_CHAR}define RTI_ANDROID_BUFFER_SIZE 512

class RTIAndroidBuffer : public std::streambuf {
  public:
    RTIAndroidBuffer() { 
        this->setp(buffer, buffer + RTI_ANDROID_BUFFER_SIZE - 1); 
    }

  private:
    int overflow(int c) {
        if (c == traits_type::eof()) {
            *this->pptr() = traits_type::to_char_type(c);
            this->sbumpc();
        }
        return this->sync()? traits_type::eof(): traits_type::not_eof(c);
    }

    int sync() {
        int rc = 0;
        if (this->pbase() != this->pptr()) {
            char writebuf[RTI_ANDROID_BUFFER_SIZE + 1];
            memcpy(writebuf, this->pbase(), this->pptr() - this->pbase());
            writebuf[this->pptr() - this->pbase()] = '\0';

            /* forward message */
            if (publisher_onCout != NULL) {
                rc = publisher_onCout(writebuf);
            }

            /* log also to logcat */
            __android_log_write(ANDROID_LOG_INFO, "RTIConnextLog", writebuf);

            this->setp(buffer, buffer + RTI_ANDROID_BUFFER_SIZE - 1);
        }
        return rc;
    }

    char buffer[RTI_ANDROID_BUFFER_SIZE];
};
#end

#if( ${envMap.universal} )
${envMap.POUND_CHAR}endif /* RTI_ANDROID */
#end

using namespace application;

static int shutdown_participant(
        DomainParticipant *participant,
        const char *shutdown_message,
        int status);

#set($nativeFQNameArray = $constructMap.nativeFQName.split("::"))
#foreach ($module in $nativeFQNameArray)
#*--*##if($foreach.count < $nativeFQNameArray.size())
#*----*#namespace $module {
#*--*##end
#end

// Listener that will be notified of DataReader events
class ${constructMap.name}DataReaderListener : public DataReaderListener {
  public:
    // Notifications about data
    void on_requested_deadline_missed(
            DataReader * /*reader*/,
            const RequestedDeadlineMissedStatus& /*status*/)
    {
    }
    void on_sample_rejected(
            DataReader * /*reader*/,
            const SampleRejectedStatus& /*status*/)
    {
    }
    void on_sample_lost(
            DataReader * /*reader*/,
            const SampleLostStatus& /*status*/)
    {
    }
    // Notifications about DataWriters
    void on_requested_incompatible_qos(
            DataReader * /*reader*/,
            const RequestedIncompatibleQosStatus& /*status*/)
    {
    }
    void on_liveliness_changed(
            DataReader * /*reader*/,
            const LivelinessChangedStatus& /*status*/)
    {
    }
    void on_subscription_matched(
            DataReader * /*reader*/,
            const SubscriptionMatchedStatus& /*status*/)
    {
    }
};

#foreach ($module in $nativeFQNameArray)
#*--*##if($foreach.count < $nativeFQNameArray.size())
#*----*#}
#*--*##end
#end

// Process data. Returns number of samples processed.
unsigned int process_data(${constructMap.FQName}DataReader *typed_reader)
{
    ${constructMap.FQName}${envMap.typeSeqSuffix} data_seq;
    SampleInfoSeq info_seq;
    unsigned int samples_read = 0;
    ReturnCode_t retcode;

    // Take available data from DataReader's queue
    retcode = typed_reader->take(
            data_seq,
            info_seq,
            LENGTH_UNLIMITED,
            ANY_SAMPLE_STATE,
            ANY_VIEW_STATE,
            ANY_INSTANCE_STATE);
    if (retcode == RETCODE_NO_DATA) {
        return samples_read;
    } else if (retcode != RETCODE_OK) {
        std::cerr << "take error " << retcode << std::endl;
        return samples_read;
    }

    // Iterate over all available data
    for (int i = 0; i < data_seq.length(); ++i) {
        // Check if a sample is an instance lifecycle event
        if (info_seq[i].valid_data) {
            // Print data
            std::cout << "Received data" << std::endl;
#if ($constructMap.languageBinding.equals("FLAT_DATA"))
            // To access the data members, get the root to the flat-data sample:
            // ${constructMap.FQName}Offset sample_root = data_seq[i]->root();
            // 
#end
            ${constructMap.FQName}TypeSupport::print_data(&data_seq[i]);
            samples_read++;
        } else {
            std::cout << "Received instance state notification" << std::endl;
        }
    }
    // Data loaned from Connext for performance. Return loan when done.
    retcode = typed_reader->return_loan(data_seq, info_seq);
    if (retcode != RETCODE_OK) {
        std::cerr << "return loan error " << retcode << std::endl;
    }
    
    return samples_read;
}

int run_subscriber_application(unsigned int domain_id, unsigned int sample_count)
{
    // Start communicating in a domain, usually one participant per application
    DomainParticipant *participant =
            TheParticipantFactory->create_participant_with_profile(
                    domain_id,
                    "${envMap.idlFileName}_Library",
                    "${envMap.idlFileName}_Profile",
                    NULL /* listener */,
                    STATUS_MASK_NONE);
    if (participant == NULL) {
        return shutdown_participant(participant, "create_participant error", EXIT_FAILURE);
    }

    // A Subscriber allows an application to create one or more DataReaders
    Subscriber *subscriber = participant->create_subscriber_with_profile(
            "${envMap.idlFileName}_Library",
            "${envMap.idlFileName}_Profile",
            NULL /* listener */,
            STATUS_MASK_NONE);
    if (subscriber == NULL) {
        return shutdown_participant(participant, "create_subscriber error", EXIT_FAILURE);
    }

    // Register the datatype to use when creating the Topic
    const char *type_name = ${constructMap.FQName}TypeSupport::get_type_name();
    ReturnCode_t retcode =
            ${constructMap.FQName}TypeSupport::register_type(participant, type_name);
    if (retcode != RETCODE_OK) {
        return shutdown_participant(participant, "register_type error", EXIT_FAILURE);
    }

    // Create a Topic with a name and a datatype
    Topic *topic = participant->create_topic_with_profile(
            "${constructMap.topicName}",
            type_name,
            "${envMap.idlFileName}_Library",
            "${envMap.idlFileName}_Profile",
            NULL /* listener */,
            STATUS_MASK_NONE);
    if (topic == NULL) {
        return shutdown_participant(participant, "create_topic error", EXIT_FAILURE);
    }

    // Create a data reader listener
    ${constructMap.nativeFQName}DataReaderListener *reader_listener = new ${constructMap.nativeFQName}DataReaderListener();

    // Notify of all statuses in the listener except for new data, which we handle
    // in this thread with a WaitSet
    StatusMask status_mask = STATUS_MASK_ALL & ~DATA_AVAILABLE_STATUS;

    // This DataReader reads data on "${constructMap.topicName}" Topic and uses QoS
    // from USER_QOS_PROFILES.xml
    DataReader *untyped_reader = subscriber->create_datareader_with_profile(
            topic,
            "${envMap.idlFileName}_Library",
            "${envMap.idlFileName}_Profile",
            reader_listener,
            status_mask);
    if (untyped_reader == NULL) {
        delete reader_listener;
        return shutdown_participant(participant, "create_datareader error", EXIT_FAILURE);
    }
    
    // Narrow casts from a untyped DataReader to a reader of your type
    ${constructMap.FQName}DataReader *typed_reader =
            ${constructMap.FQName}DataReader::narrow(untyped_reader);
    if (typed_reader == NULL) {
        delete reader_listener;
        return shutdown_participant(participant, "DataReader narrow error", EXIT_FAILURE);
    }

    // Create ReadCondition that triggers when unread data in reader's queue
    ReadCondition *read_condition = typed_reader->create_readcondition(
            ANY_SAMPLE_STATE,
            ANY_VIEW_STATE,
            ANY_INSTANCE_STATE);
    if (read_condition == NULL) {
        delete reader_listener;
        return shutdown_participant(participant, "create_readcondition error", EXIT_FAILURE);
    }

    // WaitSet will be woken when the attached condition is triggered
    WaitSet waitset;
    retcode = waitset.attach_condition(read_condition);
    if (retcode != RETCODE_OK) {
        delete reader_listener;
        return shutdown_participant(participant, "attach_condition error", EXIT_FAILURE);
    }

    // Main loop. Wait for data to arrive, and process when it arrives
    unsigned int samples_read = 0;
#*----*##if( ${envMap.universal} )
${envMap.POUND_CHAR}if (!defined(RTI_VXWORKS) || defined(__RTP__))
#*----*##end
#*----*##if( !${envMap.vxWorks} || ${envMap.rtp} || ${envMap.universal} )
    while (!shutdown_requested && samples_read < sample_count) {
#*----*##end
#*----*##if( ${envMap.universal} )
${envMap.POUND_CHAR}else
#*----*##end
#*----*##if( ${envMap.vxWorks} && !${envMap.rtp} || ${envMap.universal} )
    while (samples_read < sample_count) {
#*----*##end
#*----*##if( ${envMap.universal} )
${envMap.POUND_CHAR}endif
#*----*##end
## Integity cannot use ConditionSeq CODEGENII-1443
#*----*##if( ${envMap.universal} )
${envMap.POUND_CHAR}if (defined(RTI_INTY))
#*----*##end
#*----*##if( ${envMap.integrity} || ${envMap.universal} )
        DDSConditionSeq active_conditions_seq;
#*----*##end
#*----*##if( ${envMap.universal} )
${envMap.POUND_CHAR}else
#*----*##end
#*----*##if( !${envMap.integrity} || ${envMap.universal}  )
        ConditionSeq active_conditions_seq;
#*----*##end
#*----*##if( ${envMap.universal} )
${envMap.POUND_CHAR}endif
#*----*##end

        // Wait for data and report if it does not arrive in 1 second
        Duration_t wait_timeout = { 1, 0 };
        retcode = waitset.wait(active_conditions_seq, wait_timeout);

        if (retcode == RETCODE_OK) {
            // If the read condition is triggered, process data
            samples_read += process_data(typed_reader); 
        } else {
            if (retcode == RETCODE_TIMEOUT) {
                std::cout << "No data after 1 second" << std::endl;
            }
        }
    }

    // Cleanup
    delete reader_listener;
    return shutdown_participant(participant, "Shutting down", 0);
}

// Delete all entities
static int shutdown_participant(
        DomainParticipant *participant,
        const char *shutdown_message,
        int status)
{
    ReturnCode_t retcode;

    std::cout << shutdown_message << std::endl;

    if (participant != NULL) {
        // Cleanup everything created by this Participant
        retcode = participant->delete_contained_entities();
        if (retcode != RETCODE_OK) {
            std::cerr << "delete_contained_entities error" << retcode
                      << std::endl;
            status = EXIT_FAILURE;
        }

        retcode = TheParticipantFactory->delete_participant(participant);
        if (retcode != RETCODE_OK) {
            std::cerr << "delete_participant error" << retcode << std::endl;
            status = EXIT_FAILURE;
        }
    }
    return status;
}

#if( ${envMap.universal} )
${envMap.POUND_CHAR}if (!defined(RTI_VXWORKS) || defined(__RTP__))
#end
#if( !${envMap.vxWorks} || ${envMap.rtp}  || ${envMap.universal} )
int main(int argc, char *argv[])
{
#*----*##if( ${envMap.universal} )
${envMap.POUND_CHAR}if defined(RTI_ANDROID)
#*----*##end
#*----*##if( ${envMap.android} || ${envMap.universal})
    std::cout.rdbuf(new RTIAndroidBuffer);
    std::cerr.rdbuf(new RTIAndroidBuffer);
#*----*##end
#*----*##if( ${envMap.universal} )
${envMap.POUND_CHAR}endif /* RTI_ANDROID */
#*----*##end

    // Parse arguments and handle control-C
    ApplicationArguments arguments;
    parse_arguments(arguments, argc, argv);
    if (arguments.parse_result == PARSE_RETURN_EXIT) {
        return EXIT_SUCCESS;
    } else if (arguments.parse_result == PARSE_RETURN_FAILURE) {
        return EXIT_FAILURE;
    }
    setup_signal_handlers();

    // Sets Connext verbosity to help debugging
    NDDSConfigLogger::get_instance()->set_verbosity(arguments.verbosity);

    int status = run_subscriber_application(arguments.domain_id, arguments.sample_count);

    // Releases the memory used by the participant factory.  Optional at
    // application exit
    ReturnCode_t retcode = DomainParticipantFactory::finalize_instance();
    if (retcode != RETCODE_OK) {
        std::cerr << "finalize_instance error" << retcode << std::endl;
        status = EXIT_FAILURE;
    }

#*----*##if( ${envMap.universal} )
${envMap.POUND_CHAR}if defined(RTI_ANDROID)
#*----*##end
#*----*##if( ${envMap.android} || ${envMap.universal})
    std::cout.rdbuf(0);
    std::cerr.rdbuf(0);
#*----*##end
#*----*##if(${envMap.universal} )
${envMap.POUND_CHAR}endif /* RTI_ANDROID */
#*----*##end
    return status;
}
#end
#if( ${envMap.universal} )
${envMap.POUND_CHAR}endif
#end
