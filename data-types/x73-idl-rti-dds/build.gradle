/*******************************************************************************

 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************/
apply plugin: 'java'
import org.apache.tools.ant.taskdefs.condition.Os

//For RTI 6.x, use an RTI_INSTALL_DIR to get RTI artifacts, rather than a built in one.
ext {
  rtiNddsJava = ".." + File.separator + ".." + File.separator + "artifacts" + File.separator + "nddsjava.jar"
  rtiDdsGen2 = [ ".." + File.separator + ".." + File.separator + "artifacts" + File.separator + "rtiddsgen2.jar" ,  ".." + File.separator + ".." + File.separator + "artifacts" + File.separator + "rtiusagemetrics-api.jar" ]
}

// jplourde hacked this together March 13 with

// By default we build (no task specified)
defaultTasks 'build'

sourceCompatibility = JAVA_VERSION_SOURCE
targetCompatibility = JAVA_VERSION_CLASSES

// configuration for code generation
configurations { 
  rtiddsgen
  iceddsgen
}

def GENERATED_JAVA_SOURCES = new File(project.projectDir, 'build/generated/src/main/java').getPath()
def GENERATED_CPP_SOURCES  = new File(project.projectDir, 'build/generated/src/main/cpp').getPath()
def IDL_DIR = new File(project.projectDir, '../x73-idl/src/main/idl').getPath()

// add generated source code to the main java sourceset
sourceSets {
  main {
    java {
      srcDirs += GENERATED_JAVA_SOURCES
    }
  }
}

// include java source code in the assembled jar
jar.doFirst {
  sourceSets.main.java.srcDirs.each {
    from it
  }
}

dependencies {
  // nddsjava.jar is the java binding library for RTI DDS
  implementation files(rtiNddsJava)
  implementation files(rtiDdsGen2)
  //This next slf4j entry appears to have been a missing dependency somehow?
  //Rather than a migration from mdpnp artifactory...
  implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.2'

  //compile project(':data-types:x73-idl')
  testImplementation group: 'junit', name: 'junit', version: '4.11'

  // all these dependencies are for the code generator
  rtiddsgen project(':data-types:x73-idl')
  //For DDS 6.X, rtiddsgen program is a shell script that configures its own classpath, so the rtidds* files are redundant
/*
  classpath for ddsgen in 7 comes from META-INF/MANIFEST.MF as follows
antlr-3.5.2.jar log4j-core-2.17.1.jar log4j-1.2-api-2.17.1
 .jar log4j-api-2.17.1.jar velocity-engine-core-2.3.jar commons-lang-2
 .6.jar slf4j-simple-1.7.35.jar ST4-4.0.8.jar antlr-runtime-3.5.2.jar 
 commons-lang3-3.11.jar slf4j-api-1.7.35.jar
*/

  rtiddsgen group: 'xalan', name: 'xalan', version: '2.7.1'
  rtiddsgen group: 'org.aspectj', name: 'aspectjrt', version: '1.7.2'

  iceddsgen group: 'ant-contrib', name: 'ant-contrib', version: '1.0b3'

  //iceddsgen group: 'log4j', name: 'log4j', version: '1.2.16'
  iceddsgen group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.19.0'
  iceddsgen group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.19.0'
  iceddsgen group: 'com.google.code.gson', name: 'gson', version: '2.9.1'
  iceddsgen group: 'org.apache.velocity', name: 'velocity-engine-core', version: '2.3'
  iceddsgen group: 'org.antlr', name: 'antlr', version: '3.5.2'
  iceddsgen group: 'org.antlr', name: 'antlr-runtime', version: '3.5.2'
  iceddsgen group: 'commons-lang', name: 'commons-lang', version: '2.6'
  iceddsgen group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'
  iceddsgen group: 'org.antlr', name: 'ST4', version: '4.0.8'
  iceddsgen group: 'org.slf4j', name: 'slf4j-api', version: '1.7.35'
  iceddsgen group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.35'



  iceddsgen files(rtiDdsGen2)

}

// makes output directories for the code generator
task mkdirs {
  doLast {
    file(GENERATED_JAVA_SOURCES).mkdirs()
    file(GENERATED_CPP_SOURCES).mkdirs()
  }
}

// explodes resources (xml schema, etc) used by rtiddsgen
task rtiddsgenExplodeResources(type: Copy) {
  //  dirMode = 0755
  //  fileMode = 0644
    println 'rtiddsgenExplodeResources started'
    configurations.rtiddsgen.filter {
      it.toString().endsWith(".zip")}.each {
      println it
      from zipTree(it) into new File(project.projectDir, 'build/rtiddsgen').getPath()}
    println 'rtiddsgenExplodeResources ended'
}


/*
What we want to emulate is...

/home/simon/rti_connext_dds-6.0.1/bin/../resource/app/jre/x64Linux/bin/java -classpath /home/simon/rti_connext_dds-6.0.1/bin/../resource/app/lib/java/ant-contrib-1.0b3.jar:/home/simon/rti_connext_dds-6.0.1/bin/../resource/app/lib/java/antlr-3.4-complete.jar:/home/simon/rti_connext_dds-6.0.1/bin/../resource/app/lib/java/log4j-1.2.16.jar:/home/simon/rti_connext_dds-6.0.1/bin/../resource/app/lib/java/velocity-1.7-dep.jar:/home/simon/rti_connext_dds-6.0.1/bin/../resource/app/lib/java/rtiddsgen2.jar -DNDDS_RESOURCE_DIR=/home/simon/rti_connext_dds-6.0.1/bin/../resource/app/app_support/rtiddsgen -DNDDSHOME=/home/simon/rti_connext_dds-6.0.1 -jar /home/simon/rti_connext_dds-6.0.1/bin/../resource/app/lib/java/rtiddsgen2.jar -language Java -d /openice/dds6libs/mdpnp/data-types/x73-idl-rti-dds/build/generated/src/main/java -ppOption -I/openice/dds6libs/mdpnp/data-types/x73-idl-rti-dds/../x73-idl/src/main/idl -replace -inputIdl /openice/dds6libs/mdpnp/data-types/x73-idl/src/main/idl/himss/himss2015.idl
*/

/* For DDS 7, we want to emulate

/home/simon/rti_connext_dds-7.1.0/bin/../resource/app/jre/x64Linux/bin/java -DNDDS_RESOURCE_DIR=/home/simon/rti_connext_dds-7.1.0/bin/../resource/app/app_support/rtiddsgen -DNDDSHOME=/home/simon/rti_connext_dds-7.1.0 -DCONNEXT_VERSION=7.1.0 -DCONNEXT_PLATFORM=x64Linux3gcc4.8.2 -DCONNEXT_WORKSPACE=/home/simon/rti_workspace/7.1.0 -jar /home/simon/rti_connext_dds-7.1.0/bin/../resource/app/lib/java/rtiddsgen2.jar -I ../x73-idl/src/main/idl -inputIdl ../x73-idl/src/main/idl/ice/ice.idl -language Java

*/

//Generated the .py files for the IDL.
task iceddsgenPython(dependsOn: [mkdirs, rtiddsgenExplodeResources]) {
  FileTree idlFiles = project(':data-types:x73-idl').buildZip.source
  idlFiles.each { f ->
    doLast {
      javaexec {
        classpath = configurations.iceddsgen
        main = 'com.rti.ndds.nddsgen.Main'
        args( '-language' )
        args( 'Python' );
        args( '-d' )
        args( f.getParent() )
	args( '-I' )
        args( IDL_DIR)
        args( '-replace')
        args( '-inputIdl')
        args( f.getPath() )
        jvmArgs("-DNDDS_RESOURCE_DIR=src/main/resources/resource/app/app_support/rtiddsgen" , "-DCONNEXT_VERSION=7.3.0", "-DCONNEXT_PLATFORM=x64Linux3gcc4.8.2")
      }
    }
  }
}

task copyIceDotPy(dependsOn: iceddsgenPython, type: Copy) {
  //Admitting defeat here and using a hardcoded path to the ice.py file...
  def idlProjectDir= project(':data-types:x73-idl').projectDir;
  into idlProjectDir

  into ("/src/main/idl/ice/numeric_subscriber") {
    from( idlProjectDir.getPath()+"/src/main/idl/ice" ) {
      include 'ice.py'
    }
  }
  duplicatesStrategy 'include'


  into ("/src/main/idl/ice/samples") {
    from( idlProjectDir.getPath()+"/src/main/idl/ice" ) {
      include 'ice.py'
    }
  }
  duplicatesStrategy 'include'

  into ("/src/main/idl/ice/pump_controller") {
    from( idlProjectDir.getPath()+"/src/main/idl/ice" ) {
      include 'ice.py'
    }
  }
  duplicatesStrategy 'include'

}

task iceddsgenJava(dependsOn: [mkdirs, rtiddsgenExplodeResources, copyIceDotPy]) {
  FileTree idlFiles = project(':data-types:x73-idl').buildZip.source
  idlFiles.each { f ->
    doLast {
      javaexec {
        classpath = configurations.iceddsgen
        main = 'com.rti.ndds.nddsgen.Main'
        args( '-language' )
        args( 'Java' );
        args( '-d')
        args( GENERATED_JAVA_SOURCES)
	args( '-I' )
        args( IDL_DIR)
        args( '-replace')
        args( '-inputIdl')
        args( f.getPath() )
        jvmArgs("-DNDDS_RESOURCE_DIR=src/main/resources/resource/app/app_support/rtiddsgen" , "-DCONNEXT_VERSION=7.3.0", "-DCONNEXT_PLATFORM=x64Linux3gcc4.8.2")
      }


    }

  }

}

// Deletes the java code generated by the RTI DDS code generator
task cleanRtiddsgenJava(type: Delete) {
  delete GENERATED_JAVA_SOURCES, GENERATED_CPP_SOURCES
}

// IDL files are the inputs to the code generator
iceddsgenJava.inputs.sourceFiles.collect { (project(':data-types:x73-idl').buildZip.source) }

// java files under generated/src/main/java are the outputs of the code generator
iceddsgenJava.outputs.files(fileTree(dir: GENERATED_JAVA_SOURCES).include('**/*.java'))

// before compiling java code generation must complete
compileJava.dependsOn 'iceddsgenJava'

// before cleaning generated sources should be cleaned
clean.dependsOn 'cleanRtiddsgenJava'

//Need to call this from build - or maybe just use defaultTask?
build.dependsOn 'iceddsgenJava'
